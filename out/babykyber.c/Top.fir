circuit Top :
  module WishboneHost :
    input clock : Clock
    input reset : Reset
    output io : { wbMasterTransmitter : { flip ready : UInt<1>, valid : UInt<1>, bits : { cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : { flip ready : UInt<1>, valid : UInt<1>, bits : { ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}}

    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h1") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h1")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h0") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h0") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h0") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h0") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h0") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h0") @[WishboneHost.scala 37:116]
    reg startWBTransaction : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with :
      reset => (reset, io.wbSlaveReceiver.bits.ack) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h0") @[WishboneHost.scala 64:14]
    node _T_3 = eq(stateReg, UInt<1>("h1")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h1") @[WishboneHost.scala 67:14]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h0")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h1")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h1") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h1") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h1") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h0") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
    else :
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h1")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h1")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h1") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h1") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h1") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h0")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h0") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h0") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h0") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h0") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h0") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h0") @[WishboneHost.scala 103:118]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h0")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h1") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h0") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h0") @[WishboneHost.scala 111:26]
    else :
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h0")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h1") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h1") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h0") @[WishboneHost.scala 116:26]
    node _T_17 = eq(stateReg, UInt<1>("h0")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h1"), UInt<1>("h0")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
    else :
      node _T_18 = eq(stateReg, UInt<1>("h1")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h0") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h0") @[WishboneHost.scala 123:16]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]

  module WishboneDevice :
    input clock : Clock
    input reset : Reset
    output io : { wbSlaveTransmitter : { flip ready : UInt<1>, valid : UInt<1>, bits : { ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : { flip ready : UInt<1>, valid : UInt<1>, bits : { cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}}

    wire ack : UInt<1> @[WishboneDevice.scala 17:21]
    ack <= UInt<1>("h0") @[WishboneDevice.scala 17:21]
    io.wbMasterReceiver.ready <= UInt<1>("h1") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h1") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h0")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h1") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h0") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h0")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h1") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h1") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
        else :
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h1") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h0") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h1") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
          else :
            io.wbSlaveTransmitter.valid <= UInt<1>("h0") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h0") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
      else :
        io.reqOut.valid <= UInt<1>("h1") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h0")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h1") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h1") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
        else :
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h1") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h0") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h1") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
          else :
            io.wbSlaveTransmitter.valid <= UInt<1>("h0") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h0") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
    else :
      io.reqOut.valid <= UInt<1>("h0") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h0") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h0") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h0") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]

  extmodule kybertop :
    input clk : UInt<1>
    input rst_n : UInt<1>
    input enable : UInt<1>
    input key_enable : UInt<1>
    input encryption_enable : UInt<1>
    input decryption_enable : UInt<1>
    input data_Req : SInt<32>
    input addr_Req : SInt<32>
    input wen_Req : UInt<1>
    input bytelane_Req : UInt<8>
    output data_Resp : SInt<32>
    output key_done : UInt<1>
    output encryption_done : UInt<1>
    output decryption_done : UInt<1>
    defname = kybertop

  module BabyKyberTop :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, flip enable : UInt<1>, flip key_enable : UInt<1>, flip encryption_enable : UInt<1>, flip decryption_enable : UInt<1>, cio_babykyber_intr_key : UInt<1>, cio_babykyber_intr_encrypt : UInt<1>, cio_babykyber_intr_decrypt : UInt<1>}

    reg validReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[BabyKyber.scala 32:25]
    io.rsp.valid <= validReg @[BabyKyber.scala 33:16]
    io.req.ready <= UInt<1>("h1") @[BabyKyber.scala 34:16]
    wire rdata : SInt<32> @[BabyKyber.scala 36:19]
    inst bkyber of kybertop @[BabyKyber.scala 39:22]
    node _bkyber_io_clk_T = asUInt(clock) @[BabyKyber.scala 42:32]
    node _bkyber_io_clk_T_1 = bits(_bkyber_io_clk_T, 0, 0) @[BabyKyber.scala 42:34]
    bkyber.clk <= _bkyber_io_clk_T_1 @[BabyKyber.scala 42:17]
    node _bkyber_io_rst_n_T = asUInt(reset) @[BabyKyber.scala 43:35]
    node _bkyber_io_rst_n_T_1 = eq(_bkyber_io_rst_n_T, UInt<1>("h0")) @[BabyKyber.scala 43:22]
    bkyber.rst_n <= _bkyber_io_rst_n_T_1 @[BabyKyber.scala 43:19]
    bkyber.enable <= io.enable @[BabyKyber.scala 46:20]
    bkyber.key_enable <= io.key_enable @[BabyKyber.scala 47:24]
    bkyber.encryption_enable <= io.encryption_enable @[BabyKyber.scala 48:31]
    bkyber.decryption_enable <= io.decryption_enable @[BabyKyber.scala 49:31]
    bkyber.data_Req is invalid @[BabyKyber.scala 52:22]
    bkyber.addr_Req is invalid @[BabyKyber.scala 53:22]
    bkyber.wen_Req is invalid @[BabyKyber.scala 54:21]
    bkyber.bytelane_Req is invalid @[BabyKyber.scala 55:26]
    io.cio_babykyber_intr_key <= bkyber.key_done @[BabyKyber.scala 59:29]
    io.cio_babykyber_intr_encrypt <= bkyber.encryption_done @[BabyKyber.scala 60:33]
    io.cio_babykyber_intr_decrypt <= bkyber.decryption_done @[BabyKyber.scala 61:33]
    node _T = and(io.req.valid, io.req.bits.isWrite) @[BabyKyber.scala 66:21]
    when _T : @[BabyKyber.scala 66:45]
      node _bkyber_io_data_Req_T = asSInt(io.req.bits.dataRequest) @[BabyKyber.scala 68:51]
      bkyber.data_Req <= _bkyber_io_data_Req_T @[BabyKyber.scala 68:24]
      node _bkyber_io_addr_Req_T = asSInt(io.req.bits.addrRequest) @[BabyKyber.scala 69:51]
      bkyber.addr_Req <= _bkyber_io_addr_Req_T @[BabyKyber.scala 69:24]
      bkyber.wen_Req <= io.req.bits.isWrite @[BabyKyber.scala 70:23]
      bkyber.bytelane_Req <= io.req.bits.activeByteLane @[BabyKyber.scala 71:28]
      rdata <= bkyber.data_Resp @[BabyKyber.scala 72:11]
      validReg <= UInt<1>("h1") @[BabyKyber.scala 73:14]
    else :
      node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h0")) @[BabyKyber.scala 74:30]
      node _T_2 = and(io.req.valid, _T_1) @[BabyKyber.scala 74:27]
      when _T_2 : @[BabyKyber.scala 74:52]
        validReg <= UInt<1>("h1") @[BabyKyber.scala 76:14]
        bkyber.wen_Req <= UInt<1>("h0") @[BabyKyber.scala 77:23]
        node _bkyber_io_addr_Req_T_1 = asSInt(io.req.bits.addrRequest) @[BabyKyber.scala 78:51]
        bkyber.addr_Req <= _bkyber_io_addr_Req_T_1 @[BabyKyber.scala 78:24]
        rdata <= bkyber.data_Resp @[BabyKyber.scala 79:11]
      else :
        validReg <= UInt<1>("h0") @[BabyKyber.scala 81:14]
        rdata is invalid @[BabyKyber.scala 82:11]
    node _io_rsp_bits_dataResponse_T = asUInt(rdata) @[BabyKyber.scala 85:37]
    io.rsp.bits.dataResponse <= _io_rsp_bits_dataResponse_T @[BabyKyber.scala 85:28]
    io.rsp.bits.error <= UInt<1>("h0") @[BabyKyber.scala 86:21]

  module BabyKyberHarness :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, flip enable : UInt<1>, flip key_enable : UInt<1>, flip encryption_enable : UInt<1>, flip decryption_enable : UInt<1>, cio_babykyber_intr_key : UInt<1>, cio_babykyber_intr_encrypt : UInt<1>, cio_babykyber_intr_decrypt : UInt<1>}

    inst hostAdapter of WishboneHost @[BabyKyberHarness.scala 46:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[BabyKyberHarness.scala 47:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst babykyber of BabyKyberTop @[BabyKyberHarness.scala 48:25]
    babykyber.clock <= clock
    babykyber.reset <= reset
    hostAdapter.io.reqIn <= io.req @[BabyKyberHarness.scala 50:24]
    io.rsp.bits <= hostAdapter.io.rspOut.bits @[BabyKyberHarness.scala 51:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[BabyKyberHarness.scala 51:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[BabyKyberHarness.scala 51:10]
    deviceAdapter.io.wbMasterReceiver <= hostAdapter.io.wbMasterTransmitter @[BabyKyberHarness.scala 52:38]
    hostAdapter.io.wbSlaveReceiver <= deviceAdapter.io.wbSlaveTransmitter @[BabyKyberHarness.scala 53:34]
    babykyber.io.req <= deviceAdapter.io.reqOut @[BabyKyberHarness.scala 55:20]
    deviceAdapter.io.rspIn <= babykyber.io.rsp @[BabyKyberHarness.scala 56:20]
    babykyber.io.enable <= io.enable @[BabyKyberHarness.scala 59:23]
    babykyber.io.key_enable <= io.key_enable @[BabyKyberHarness.scala 60:27]
    babykyber.io.encryption_enable <= io.encryption_enable @[BabyKyberHarness.scala 61:34]
    babykyber.io.decryption_enable <= io.decryption_enable @[BabyKyberHarness.scala 62:34]
    io.cio_babykyber_intr_key <= babykyber.io.cio_babykyber_intr_key @[BabyKyberHarness.scala 65:29]
    io.cio_babykyber_intr_encrypt <= babykyber.io.cio_babykyber_intr_encrypt @[BabyKyberHarness.scala 66:33]
    io.cio_babykyber_intr_decrypt <= babykyber.io.cio_babykyber_intr_decrypt @[BabyKyberHarness.scala 67:33]

  module InstructionFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip address : UInt<32>, instruction : UInt<32>, flip stall : UInt<1>, coreInstrReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip coreInstrResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}}

    wire rst : UInt<1> @[InstructionFetch.scala 15:17]
    node _rst_T = asUInt(reset) @[InstructionFetch.scala 16:16]
    rst <= _rst_T @[InstructionFetch.scala 16:7]
    reg state_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[InstructionFetch.scala 19:36]
    node _next_state_T = eq(state_reg, UInt<1>("h0")) @[InstructionFetch.scala 21:17]
    node _next_state_T_1 = eq(state_reg, UInt<2>("h2")) @[InstructionFetch.scala 21:41]
    node _next_state_T_2 = and(_next_state_T_1, io.coreInstrResp.valid) @[InstructionFetch.scala 21:50]
    node _next_state_T_3 = or(_next_state_T, _next_state_T_2) @[InstructionFetch.scala 21:26]
    node _next_state_T_4 = eq(state_reg, UInt<1>("h1")) @[InstructionFetch.scala 22:17]
    node _next_state_T_5 = and(_next_state_T_4, io.coreInstrReq.ready) @[InstructionFetch.scala 22:26]
    node _next_state_T_6 = eq(io.stall, UInt<1>("h0")) @[InstructionFetch.scala 22:54]
    node _next_state_T_7 = and(_next_state_T_5, _next_state_T_6) @[InstructionFetch.scala 22:51]
    node _next_state_T_8 = mux(_next_state_T_7, UInt<2>("h2"), state_reg) @[Mux.scala 101:16]
    node next_state = mux(_next_state_T_3, UInt<1>("h1"), _next_state_T_8) @[Mux.scala 101:16]
    state_reg <= next_state @[InstructionFetch.scala 24:13]
    node _io_coreInstrResp_ready_T = eq(state_reg, UInt<2>("h2")) @[InstructionFetch.scala 25:39]
    io.coreInstrResp.ready <= _io_coreInstrResp_ready_T @[InstructionFetch.scala 25:26]
    io.coreInstrReq.bits.activeByteLane <= UInt<4>("hf") @[InstructionFetch.scala 29:39]
    io.coreInstrReq.bits.isWrite <= UInt<1>("h0") @[InstructionFetch.scala 30:32]
    io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 31:36]
    node _io_coreInstrReq_bits_addrRequest_T = bits(io.address, 31, 2) @[InstructionFetch.scala 35:28]
    node _io_coreInstrReq_bits_addrRequest_T_1 = cat(UInt<1>("h0"), _io_coreInstrReq_bits_addrRequest_T) @[Cat.scala 33:92]
    wire _io_coreInstrReq_bits_addrRequest_WIRE : UInt<31> @[InstructionFetch.scala 33:42]
    _io_coreInstrReq_bits_addrRequest_WIRE is invalid @[InstructionFetch.scala 33:42]
    node _io_coreInstrReq_bits_addrRequest_T_2 = mux(io.coreInstrReq.ready, _io_coreInstrReq_bits_addrRequest_T_1, _io_coreInstrReq_bits_addrRequest_WIRE) @[InstructionFetch.scala 33:42]
    io.coreInstrReq.bits.addrRequest <= _io_coreInstrReq_bits_addrRequest_T_2 @[InstructionFetch.scala 33:36]
    node _io_coreInstrReq_valid_T = eq(state_reg, UInt<1>("h1")) @[InstructionFetch.scala 38:39]
    node _io_coreInstrReq_valid_T_1 = eq(io.stall, UInt<1>("h0")) @[InstructionFetch.scala 38:50]
    node _io_coreInstrReq_valid_T_2 = and(_io_coreInstrReq_valid_T, _io_coreInstrReq_valid_T_1) @[InstructionFetch.scala 38:48]
    io.coreInstrReq.valid <= _io_coreInstrReq_valid_T_2 @[InstructionFetch.scala 38:25]
    wire _io_instruction_WIRE : UInt<32> @[InstructionFetch.scala 40:24]
    _io_instruction_WIRE is invalid @[InstructionFetch.scala 40:24]
    node _io_instruction_T = mux(io.coreInstrResp.valid, io.coreInstrResp.bits.dataResponse, _io_instruction_WIRE) @[InstructionFetch.scala 40:24]
    io.instruction <= _io_instruction_T @[InstructionFetch.scala 40:18]

  module CSRRegFile :
    input clock : Clock
    input reset : Reset
    output io : { MISA : { flip i_value : UInt<32>}, MHARTID : { flip i_value : UInt<32>}, CSR : { flip i_opr : UInt<2>, o_data : UInt<32>, flip i_data : UInt<32>, flip i_addr : UInt<12>, flip i_w_en : UInt<1>}, FCSR : { flip except : UInt<1>[5], nx : UInt<1>, uf : UInt<1>, of : UInt<1>, dz : UInt<1>, nv : UInt<1>, frm : UInt<3>}}

    reg MISA_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 18:38]
    reg MHARTID_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 19:38]
    reg MCAUSE_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 20:38]
    reg MTVEC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 21:38]
    reg MEPC_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 22:38]
    reg MIE_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CSRRegFile.scala 23:38]
    reg MSTATUS_TW_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 26:38]
    reg MSTATUS_MPRV_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 27:38]
    reg MSTATUS_MPP_REG : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CSRRegFile.scala 28:38]
    reg MSTATUS_MPIE_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 29:38]
    reg MSTATUS_MIE_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 30:38]
    reg FCSR_NX_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 33:38]
    reg FCSR_UF_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 34:38]
    reg FCSR_OF_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 35:38]
    reg FCSR_DZ_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 36:38]
    reg FCSR_NV_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSRRegFile.scala 37:38]
    reg FCSR_FRM_REG : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[CSRRegFile.scala 38:38]
    MISA_REG <= io.MISA.i_value @[CSRRegFile.scala 41:29]
    MHARTID_REG <= io.MHARTID.i_value @[CSRRegFile.scala 42:29]
    node _FCSR_NX_REG_T = or(FCSR_NX_REG, io.FCSR.except[0]) @[CSRRegFile.scala 51:25]
    FCSR_NX_REG <= _FCSR_NX_REG_T @[CSRRegFile.scala 51:17]
    node _FCSR_UF_REG_T = or(FCSR_UF_REG, io.FCSR.except[1]) @[CSRRegFile.scala 51:25]
    FCSR_UF_REG <= _FCSR_UF_REG_T @[CSRRegFile.scala 51:17]
    node _FCSR_OF_REG_T = or(FCSR_OF_REG, io.FCSR.except[2]) @[CSRRegFile.scala 51:25]
    FCSR_OF_REG <= _FCSR_OF_REG_T @[CSRRegFile.scala 51:17]
    node _FCSR_DZ_REG_T = or(FCSR_DZ_REG, io.FCSR.except[3]) @[CSRRegFile.scala 51:25]
    FCSR_DZ_REG <= _FCSR_DZ_REG_T @[CSRRegFile.scala 51:17]
    node _FCSR_NV_REG_T = or(FCSR_NV_REG, io.FCSR.except[4]) @[CSRRegFile.scala 51:25]
    FCSR_NV_REG <= _FCSR_NV_REG_T @[CSRRegFile.scala 51:17]
    io.FCSR.nx <= FCSR_NX_REG @[CSRRegFile.scala 53:29]
    io.FCSR.uf <= FCSR_UF_REG @[CSRRegFile.scala 54:29]
    io.FCSR.of <= FCSR_OF_REG @[CSRRegFile.scala 55:29]
    io.FCSR.dz <= FCSR_DZ_REG @[CSRRegFile.scala 56:29]
    io.FCSR.nv <= FCSR_NV_REG @[CSRRegFile.scala 57:29]
    io.FCSR.frm <= FCSR_FRM_REG @[CSRRegFile.scala 58:29]
    wire w_data : UInt<32> @[CSRRegFile.scala 61:39]
    wire r_data : UInt<32> @[CSRRegFile.scala 62:39]
    node MSTATUS_WIRE_lo_lo = cat(MSTATUS_MIE_REG, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo_hi_hi = cat(UInt<3>("h0"), MSTATUS_MPIE_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo_hi = cat(MSTATUS_WIRE_lo_hi_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_lo = cat(MSTATUS_WIRE_lo_hi, MSTATUS_WIRE_lo_lo) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_lo_hi = cat(MSTATUS_MPRV_REG, UInt<4>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_lo = cat(MSTATUS_WIRE_hi_lo_hi, MSTATUS_MPP_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_hi_hi = cat(UInt<10>("h0"), MSTATUS_TW_REG) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi_hi = cat(MSTATUS_WIRE_hi_hi_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node MSTATUS_WIRE_hi = cat(MSTATUS_WIRE_hi_hi, MSTATUS_WIRE_hi_lo) @[Cat.scala 33:92]
    node _MSTATUS_WIRE_T = cat(MSTATUS_WIRE_hi, MSTATUS_WIRE_lo) @[Cat.scala 33:92]
    wire MSTATUS_WIRE : UInt @[CSRRegFile.scala 63:43]
    MSTATUS_WIRE <= _MSTATUS_WIRE_T @[CSRRegFile.scala 63:43]
    node _MCAUSE_WLRL_WIRE_T = bits(MCAUSE_REG, 30, 0) @[CSRRegFile.scala 64:54]
    wire MCAUSE_WLRL_WIRE : UInt @[CSRRegFile.scala 64:43]
    MCAUSE_WLRL_WIRE <= _MCAUSE_WLRL_WIRE_T @[CSRRegFile.scala 64:43]
    node _MCAUSE_INTERRUPT_WIRE_T = bits(MCAUSE_REG, 31, 31) @[CSRRegFile.scala 65:54]
    wire MCAUSE_INTERRUPT_WIRE : UInt<1> @[CSRRegFile.scala 65:43]
    MCAUSE_INTERRUPT_WIRE <= _MCAUSE_INTERRUPT_WIRE_T @[CSRRegFile.scala 65:43]
    node _MTVEC_MODE_WIRE_T = bits(MTVEC_REG, 1, 0) @[CSRRegFile.scala 66:53]
    wire MTVEC_MODE_WIRE : UInt @[CSRRegFile.scala 66:43]
    MTVEC_MODE_WIRE <= _MTVEC_MODE_WIRE_T @[CSRRegFile.scala 66:43]
    node _MTVEC_BASE_WIRE_T = bits(MTVEC_REG, 31, 2) @[CSRRegFile.scala 67:53]
    wire MTVEC_BASE_WIRE : UInt @[CSRRegFile.scala 67:43]
    MTVEC_BASE_WIRE <= _MTVEC_BASE_WIRE_T @[CSRRegFile.scala 67:43]
    node FFLAGS_WIRE_lo_hi = cat(FCSR_OF_REG, FCSR_UF_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_lo = cat(FFLAGS_WIRE_lo_hi, FCSR_NX_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_hi_hi = cat(UInt<27>("h0"), FCSR_NV_REG) @[Cat.scala 33:92]
    node FFLAGS_WIRE_hi = cat(FFLAGS_WIRE_hi_hi, FCSR_DZ_REG) @[Cat.scala 33:92]
    node _FFLAGS_WIRE_T = cat(FFLAGS_WIRE_hi, FFLAGS_WIRE_lo) @[Cat.scala 33:92]
    wire FFLAGS_WIRE : UInt @[CSRRegFile.scala 68:43]
    FFLAGS_WIRE <= _FFLAGS_WIRE_T @[CSRRegFile.scala 68:43]
    node _FRM_WIRE_T = cat(UInt<29>("h0"), FCSR_FRM_REG) @[Cat.scala 33:92]
    wire FRM_WIRE : UInt @[CSRRegFile.scala 76:43]
    FRM_WIRE <= _FRM_WIRE_T @[CSRRegFile.scala 76:43]
    node FCSR_WIRE_lo_hi = cat(FCSR_OF_REG, FCSR_UF_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_lo = cat(FCSR_WIRE_lo_hi, FCSR_NX_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi_lo = cat(FCSR_NV_REG, FCSR_DZ_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi_hi = cat(UInt<24>("h0"), FCSR_FRM_REG) @[Cat.scala 33:92]
    node FCSR_WIRE_hi = cat(FCSR_WIRE_hi_hi, FCSR_WIRE_hi_lo) @[Cat.scala 33:92]
    node _FCSR_WIRE_T = cat(FCSR_WIRE_hi, FCSR_WIRE_lo) @[Cat.scala 33:92]
    wire FCSR_WIRE : UInt @[CSRRegFile.scala 77:43]
    FCSR_WIRE <= _FCSR_WIRE_T @[CSRRegFile.scala 77:43]
    wire READ : UInt<2> @[CSRRegFile.scala 91:36]
    wire WRITE : UInt<2> @[CSRRegFile.scala 91:36]
    wire SET : UInt<2> @[CSRRegFile.scala 91:36]
    wire CLEAR : UInt<2> @[CSRRegFile.scala 91:36]
    READ <= UInt<2>("h0") @[CSRRegFile.scala 92:111]
    WRITE <= UInt<2>("h1") @[CSRRegFile.scala 92:111]
    SET <= UInt<2>("h2") @[CSRRegFile.scala 92:111]
    CLEAR <= UInt<2>("h3") @[CSRRegFile.scala 92:111]
    node _r_data_T = eq(UInt<10>("h301"), io.CSR.i_addr) @[Mux.scala 81:61]
    wire _r_data_WIRE : UInt<32> @[Mux.scala 81:58]
    _r_data_WIRE is invalid @[Mux.scala 81:58]
    node _r_data_T_1 = mux(_r_data_T, MISA_REG, _r_data_WIRE) @[Mux.scala 81:58]
    node _r_data_T_2 = eq(UInt<12>("hf14"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_3 = mux(_r_data_T_2, MHARTID_REG, _r_data_T_1) @[Mux.scala 81:58]
    node _r_data_T_4 = eq(UInt<10>("h300"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_5 = mux(_r_data_T_4, MSTATUS_WIRE, _r_data_T_3) @[Mux.scala 81:58]
    node _r_data_T_6 = eq(UInt<10>("h342"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_7 = mux(_r_data_T_6, MCAUSE_REG, _r_data_T_5) @[Mux.scala 81:58]
    node _r_data_T_8 = eq(UInt<10>("h305"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_9 = mux(_r_data_T_8, MTVEC_REG, _r_data_T_7) @[Mux.scala 81:58]
    node _r_data_T_10 = eq(UInt<10>("h341"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_11 = mux(_r_data_T_10, MEPC_REG, _r_data_T_9) @[Mux.scala 81:58]
    node _r_data_T_12 = eq(UInt<10>("h304"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_13 = mux(_r_data_T_12, MIE_REG, _r_data_T_11) @[Mux.scala 81:58]
    node _r_data_T_14 = eq(UInt<1>("h1"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_15 = mux(_r_data_T_14, FFLAGS_WIRE, _r_data_T_13) @[Mux.scala 81:58]
    node _r_data_T_16 = eq(UInt<2>("h2"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_17 = mux(_r_data_T_16, FRM_WIRE, _r_data_T_15) @[Mux.scala 81:58]
    node _r_data_T_18 = eq(UInt<2>("h3"), io.CSR.i_addr) @[Mux.scala 81:61]
    node _r_data_T_19 = mux(_r_data_T_18, FCSR_WIRE, _r_data_T_17) @[Mux.scala 81:58]
    r_data <= _r_data_T_19 @[CSRRegFile.scala 107:12]
    io.CSR.o_data <= r_data @[CSRRegFile.scala 109:19]
    node set_data = or(r_data, io.CSR.i_data) @[CSRRegFile.scala 113:29]
    node _clear_data_T = not(io.CSR.i_data) @[CSRRegFile.scala 114:31]
    node clear_data = and(r_data, _clear_data_T) @[CSRRegFile.scala 114:29]
    node _w_data_T = eq(WRITE, io.CSR.i_opr) @[Mux.scala 81:61]
    wire _w_data_WIRE : UInt<32> @[Mux.scala 81:58]
    _w_data_WIRE is invalid @[Mux.scala 81:58]
    node _w_data_T_1 = mux(_w_data_T, io.CSR.i_data, _w_data_WIRE) @[Mux.scala 81:58]
    node _w_data_T_2 = eq(SET, io.CSR.i_opr) @[Mux.scala 81:61]
    node _w_data_T_3 = mux(_w_data_T_2, set_data, _w_data_T_1) @[Mux.scala 81:58]
    node _w_data_T_4 = eq(CLEAR, io.CSR.i_opr) @[Mux.scala 81:61]
    node _w_data_T_5 = mux(_w_data_T_4, clear_data, _w_data_T_3) @[Mux.scala 81:58]
    w_data <= _w_data_T_5 @[CSRRegFile.scala 117:12]
    when io.CSR.i_w_en : @[CSRRegFile.scala 124:24]
      node _T = eq(UInt<10>("h300"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
      when _T : @[CSRRegFile.scala 125:30]
        node _MSTATUS_TW_REG_T = bits(w_data, 21, 21) @[CSRRegFile.scala 127:43]
        MSTATUS_TW_REG <= _MSTATUS_TW_REG_T @[CSRRegFile.scala 127:34]
        node _MSTATUS_MPRV_REG_T = bits(w_data, 17, 17) @[CSRRegFile.scala 128:43]
        MSTATUS_MPRV_REG <= _MSTATUS_MPRV_REG_T @[CSRRegFile.scala 128:34]
        node _MSTATUS_MPP_REG_T = bits(w_data, 12, 11) @[CSRRegFile.scala 129:43]
        MSTATUS_MPP_REG <= _MSTATUS_MPP_REG_T @[CSRRegFile.scala 129:34]
        node _MSTATUS_MPIE_REG_T = bits(w_data, 7, 7) @[CSRRegFile.scala 130:43]
        MSTATUS_MPIE_REG <= _MSTATUS_MPIE_REG_T @[CSRRegFile.scala 130:34]
        node _MSTATUS_MIE_REG_T = bits(w_data, 3, 3) @[CSRRegFile.scala 131:43]
        MSTATUS_MIE_REG <= _MSTATUS_MIE_REG_T @[CSRRegFile.scala 131:34]
      else :
        node _T_1 = eq(UInt<10>("h342"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
        when _T_1 : @[CSRRegFile.scala 125:30]
          MCAUSE_REG <= w_data @[CSRRegFile.scala 134:34]
        else :
          node _T_2 = eq(UInt<10>("h305"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
          when _T_2 : @[CSRRegFile.scala 125:30]
            MTVEC_REG <= w_data @[CSRRegFile.scala 137:34]
          else :
            node _T_3 = eq(UInt<10>("h341"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
            when _T_3 : @[CSRRegFile.scala 125:30]
              MEPC_REG <= w_data @[CSRRegFile.scala 140:34]
            else :
              node _T_4 = eq(UInt<10>("h304"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
              when _T_4 : @[CSRRegFile.scala 125:30]
                MIE_REG <= w_data @[CSRRegFile.scala 143:34]
              else :
                node _T_5 = eq(UInt<2>("h3"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
                when _T_5 : @[CSRRegFile.scala 125:30]
                  node _FCSR_NX_REG_T_1 = bits(w_data, 0, 0) @[CSRRegFile.scala 146:43]
                  FCSR_NX_REG <= _FCSR_NX_REG_T_1 @[CSRRegFile.scala 146:34]
                  node _FCSR_UF_REG_T_1 = bits(w_data, 1, 1) @[CSRRegFile.scala 147:43]
                  FCSR_UF_REG <= _FCSR_UF_REG_T_1 @[CSRRegFile.scala 147:34]
                  node _FCSR_OF_REG_T_1 = bits(w_data, 2, 2) @[CSRRegFile.scala 148:43]
                  FCSR_OF_REG <= _FCSR_OF_REG_T_1 @[CSRRegFile.scala 148:34]
                  node _FCSR_DZ_REG_T_1 = bits(w_data, 3, 3) @[CSRRegFile.scala 149:43]
                  FCSR_DZ_REG <= _FCSR_DZ_REG_T_1 @[CSRRegFile.scala 149:34]
                  node _FCSR_NV_REG_T_1 = bits(w_data, 4, 4) @[CSRRegFile.scala 150:43]
                  FCSR_NV_REG <= _FCSR_NV_REG_T_1 @[CSRRegFile.scala 150:34]
                  node _FCSR_FRM_REG_T = bits(w_data, 7, 5) @[CSRRegFile.scala 151:43]
                  FCSR_FRM_REG <= _FCSR_FRM_REG_T @[CSRRegFile.scala 151:34]
                else :
                  node _T_6 = eq(UInt<1>("h1"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
                  when _T_6 : @[CSRRegFile.scala 125:30]
                    node _FCSR_NX_REG_T_2 = bits(w_data, 0, 0) @[CSRRegFile.scala 154:43]
                    FCSR_NX_REG <= _FCSR_NX_REG_T_2 @[CSRRegFile.scala 154:34]
                    node _FCSR_UF_REG_T_2 = bits(w_data, 1, 1) @[CSRRegFile.scala 155:43]
                    FCSR_UF_REG <= _FCSR_UF_REG_T_2 @[CSRRegFile.scala 155:34]
                    node _FCSR_OF_REG_T_2 = bits(w_data, 2, 2) @[CSRRegFile.scala 156:43]
                    FCSR_OF_REG <= _FCSR_OF_REG_T_2 @[CSRRegFile.scala 156:34]
                    node _FCSR_DZ_REG_T_2 = bits(w_data, 3, 3) @[CSRRegFile.scala 157:43]
                    FCSR_DZ_REG <= _FCSR_DZ_REG_T_2 @[CSRRegFile.scala 157:34]
                    node _FCSR_NV_REG_T_2 = bits(w_data, 4, 4) @[CSRRegFile.scala 158:43]
                    FCSR_NV_REG <= _FCSR_NV_REG_T_2 @[CSRRegFile.scala 158:34]
                  else :
                    node _T_7 = eq(UInt<2>("h2"), io.CSR.i_addr) @[CSRRegFile.scala 125:30]
                    when _T_7 : @[CSRRegFile.scala 125:30]
                      node _FCSR_FRM_REG_T_1 = bits(w_data, 2, 0) @[CSRRegFile.scala 161:43]
                      FCSR_FRM_REG <= _FCSR_FRM_REG_T_1 @[CSRRegFile.scala 161:34]


  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip i_misa_value : UInt<32>, flip i_mhartid_value : UInt<32>, flip i_data : UInt<32>, flip i_imm : UInt<5>, o_data : UInt<32>, flip i_opr : UInt<3>, flip i_addr : UInt<12>, flip i_w_en : UInt<1>, flip f_except : UInt<1>[5], fcsr_o_data : UInt<32>}

    inst csrRegFile of CSRRegFile @[CSR.scala 21:28]
    csrRegFile.clock <= clock
    csrRegFile.reset <= reset
    node _csrRegFile_io_CSR_i_data_T = bits(io.i_opr, 2, 2) @[CSR.scala 24:52]
    node _csrRegFile_io_CSR_i_data_T_1 = mux(_csrRegFile_io_CSR_i_data_T, io.i_imm, io.i_data) @[CSR.scala 24:43]
    csrRegFile.io.CSR.i_data <= _csrRegFile_io_CSR_i_data_T_1 @[CSR.scala 24:37]
    csrRegFile.io.CSR.i_opr <= io.i_opr @[CSR.scala 25:37]
    csrRegFile.io.MISA.i_value <= io.i_misa_value @[CSR.scala 26:37]
    csrRegFile.io.MHARTID.i_value <= io.i_mhartid_value @[CSR.scala 27:37]
    csrRegFile.io.CSR.i_addr <= io.i_addr @[CSR.scala 28:37]
    csrRegFile.io.CSR.i_w_en <= io.i_w_en @[CSR.scala 29:37]
    csrRegFile.io.FCSR.except <= io.f_except @[CSR.scala 30:37]
    io.o_data <= csrRegFile.io.CSR.o_data @[CSR.scala 32:37]
    node io_fcsr_o_data_lo_hi = cat(csrRegFile.io.FCSR.of, csrRegFile.io.FCSR.uf) @[Cat.scala 33:92]
    node io_fcsr_o_data_lo = cat(io_fcsr_o_data_lo_hi, csrRegFile.io.FCSR.nx) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi_lo = cat(csrRegFile.io.FCSR.nv, csrRegFile.io.FCSR.dz) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi_hi = cat(UInt<24>("h0"), csrRegFile.io.FCSR.frm) @[Cat.scala 33:92]
    node io_fcsr_o_data_hi = cat(io_fcsr_o_data_hi_hi, io_fcsr_o_data_hi_lo) @[Cat.scala 33:92]
    node _io_fcsr_o_data_T = cat(io_fcsr_o_data_hi, io_fcsr_o_data_lo) @[Cat.scala 33:92]
    io.fcsr_o_data <= _io_fcsr_o_data_T @[CSR.scala 33:37]

  module CSRController :
    input clock : Clock
    input reset : Reset
    output io : { flip regWrExecute : UInt<1>, flip rdSelExecute : UInt<5>, flip csrWrExecute : UInt<1>, flip regWrMemory : UInt<1>, flip rdSelMemory : UInt<5>, flip csrWrMemory : UInt<1>, flip regWrWriteback : UInt<1>, flip rdSelWriteback : UInt<5>, flip csrWrWriteback : UInt<1>, flip rs1SelDecode : UInt<5>, flip csrInstDecode : UInt<1>, flip csrInstIsImmd : UInt<1>, forwardRS1 : UInt<3>}

    node _hazard_DecEx_T = and(io.regWrExecute, io.csrInstDecode) @[CSRController.scala 33:44]
    node _hazard_DecEx_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 35:28]
    node _hazard_DecEx_T_2 = and(_hazard_DecEx_T, _hazard_DecEx_T_1) @[CSRController.scala 34:45]
    node _hazard_DecEx_T_3 = orr(io.rdSelExecute) @[CSRController.scala 36:44]
    node _hazard_DecEx_T_4 = and(_hazard_DecEx_T_2, _hazard_DecEx_T_3) @[CSRController.scala 35:46]
    node _hazard_DecEx_T_5 = not(io.csrWrExecute) @[CSRController.scala 37:28]
    node _hazard_DecEx_T_6 = and(_hazard_DecEx_T_4, _hazard_DecEx_T_5) @[CSRController.scala 36:48]
    node _hazard_DecEx_T_7 = eq(io.rdSelExecute, io.rs1SelDecode) @[CSRController.scala 38:44]
    node _hazard_DecEx_T_8 = and(_hazard_DecEx_T_6, _hazard_DecEx_T_7) @[CSRController.scala 37:45]
    node hazard_DecEx = mux(_hazard_DecEx_T_8, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 33:27]
    node _hazard_DecMem_T = and(io.regWrMemory, io.csrInstDecode) @[CSRController.scala 42:44]
    node _hazard_DecMem_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 44:28]
    node _hazard_DecMem_T_2 = and(_hazard_DecMem_T, _hazard_DecMem_T_1) @[CSRController.scala 43:45]
    node _hazard_DecMem_T_3 = orr(io.rdSelMemory) @[CSRController.scala 45:43]
    node _hazard_DecMem_T_4 = and(_hazard_DecMem_T_2, _hazard_DecMem_T_3) @[CSRController.scala 44:46]
    node _hazard_DecMem_T_5 = not(io.csrWrMemory) @[CSRController.scala 46:28]
    node _hazard_DecMem_T_6 = and(_hazard_DecMem_T_4, _hazard_DecMem_T_5) @[CSRController.scala 45:47]
    node _hazard_DecMem_T_7 = eq(io.rdSelMemory, io.rs1SelDecode) @[CSRController.scala 47:43]
    node _hazard_DecMem_T_8 = and(_hazard_DecMem_T_6, _hazard_DecMem_T_7) @[CSRController.scala 46:44]
    node _hazard_DecMem_T_9 = not(hazard_DecEx) @[CSRController.scala 48:28]
    node _hazard_DecMem_T_10 = and(_hazard_DecMem_T_8, _hazard_DecMem_T_9) @[CSRController.scala 47:63]
    node hazard_DecMem = mux(_hazard_DecMem_T_10, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 42:28]
    node _hazard_DecWb_T = and(io.regWrWriteback, io.csrInstDecode) @[CSRController.scala 52:46]
    node _hazard_DecWb_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 54:28]
    node _hazard_DecWb_T_2 = and(_hazard_DecWb_T, _hazard_DecWb_T_1) @[CSRController.scala 53:45]
    node _hazard_DecWb_T_3 = orr(io.rdSelWriteback) @[CSRController.scala 55:46]
    node _hazard_DecWb_T_4 = and(_hazard_DecWb_T_2, _hazard_DecWb_T_3) @[CSRController.scala 54:46]
    node _hazard_DecWb_T_5 = not(io.csrWrWriteback) @[CSRController.scala 56:28]
    node _hazard_DecWb_T_6 = and(_hazard_DecWb_T_4, _hazard_DecWb_T_5) @[CSRController.scala 55:50]
    node _hazard_DecWb_T_7 = eq(io.rdSelWriteback, io.rs1SelDecode) @[CSRController.scala 57:46]
    node _hazard_DecWb_T_8 = and(_hazard_DecWb_T_6, _hazard_DecWb_T_7) @[CSRController.scala 56:47]
    node _hazard_DecWb_T_9 = not(hazard_DecEx) @[CSRController.scala 58:28]
    node _hazard_DecWb_T_10 = and(_hazard_DecWb_T_8, _hazard_DecWb_T_9) @[CSRController.scala 57:66]
    node _hazard_DecWb_T_11 = and(_hazard_DecWb_T_10, hazard_DecMem) @[CSRController.scala 58:42]
    node hazard_DecWb = mux(_hazard_DecWb_T_11, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 52:27]
    node _csrHazard_DecEx_T = and(io.regWrExecute, io.csrInstDecode) @[CSRController.scala 63:47]
    node _csrHazard_DecEx_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 65:28]
    node _csrHazard_DecEx_T_2 = and(_csrHazard_DecEx_T, _csrHazard_DecEx_T_1) @[CSRController.scala 64:45]
    node _csrHazard_DecEx_T_3 = orr(io.rdSelExecute) @[CSRController.scala 66:44]
    node _csrHazard_DecEx_T_4 = and(_csrHazard_DecEx_T_2, _csrHazard_DecEx_T_3) @[CSRController.scala 65:46]
    node _csrHazard_DecEx_T_5 = and(_csrHazard_DecEx_T_4, io.csrWrExecute) @[CSRController.scala 66:48]
    node _csrHazard_DecEx_T_6 = eq(io.rdSelExecute, io.rs1SelDecode) @[CSRController.scala 68:44]
    node _csrHazard_DecEx_T_7 = and(_csrHazard_DecEx_T_5, _csrHazard_DecEx_T_6) @[CSRController.scala 67:44]
    node csrHazard_DecEx = mux(_csrHazard_DecEx_T_7, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 63:30]
    node _csrHazard_DecMem_T = and(io.regWrMemory, io.csrInstDecode) @[CSRController.scala 72:47]
    node _csrHazard_DecMem_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 74:28]
    node _csrHazard_DecMem_T_2 = and(_csrHazard_DecMem_T, _csrHazard_DecMem_T_1) @[CSRController.scala 73:45]
    node _csrHazard_DecMem_T_3 = orr(io.rdSelMemory) @[CSRController.scala 75:43]
    node _csrHazard_DecMem_T_4 = and(_csrHazard_DecMem_T_2, _csrHazard_DecMem_T_3) @[CSRController.scala 74:46]
    node _csrHazard_DecMem_T_5 = and(_csrHazard_DecMem_T_4, io.csrWrMemory) @[CSRController.scala 75:47]
    node _csrHazard_DecMem_T_6 = eq(io.rdSelMemory, io.rs1SelDecode) @[CSRController.scala 77:43]
    node _csrHazard_DecMem_T_7 = and(_csrHazard_DecMem_T_5, _csrHazard_DecMem_T_6) @[CSRController.scala 76:43]
    node _csrHazard_DecMem_T_8 = not(csrHazard_DecEx) @[CSRController.scala 78:28]
    node _csrHazard_DecMem_T_9 = and(_csrHazard_DecMem_T_7, _csrHazard_DecMem_T_8) @[CSRController.scala 77:63]
    node csrHazard_DecMem = mux(_csrHazard_DecMem_T_9, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 72:31]
    node _csrHazard_DecWb_T = and(io.regWrWriteback, io.csrInstDecode) @[CSRController.scala 82:49]
    node _csrHazard_DecWb_T_1 = not(io.csrInstIsImmd) @[CSRController.scala 84:28]
    node _csrHazard_DecWb_T_2 = and(_csrHazard_DecWb_T, _csrHazard_DecWb_T_1) @[CSRController.scala 83:45]
    node _csrHazard_DecWb_T_3 = orr(io.rdSelWriteback) @[CSRController.scala 85:46]
    node _csrHazard_DecWb_T_4 = and(_csrHazard_DecWb_T_2, _csrHazard_DecWb_T_3) @[CSRController.scala 84:46]
    node _csrHazard_DecWb_T_5 = and(_csrHazard_DecWb_T_4, io.csrWrWriteback) @[CSRController.scala 85:50]
    node _csrHazard_DecWb_T_6 = eq(io.rdSelWriteback, io.rs1SelDecode) @[CSRController.scala 87:46]
    node _csrHazard_DecWb_T_7 = and(_csrHazard_DecWb_T_5, _csrHazard_DecWb_T_6) @[CSRController.scala 86:46]
    node _csrHazard_DecWb_T_8 = not(csrHazard_DecEx) @[CSRController.scala 88:28]
    node _csrHazard_DecWb_T_9 = and(_csrHazard_DecWb_T_7, _csrHazard_DecWb_T_8) @[CSRController.scala 87:66]
    node _csrHazard_DecWb_T_10 = and(_csrHazard_DecWb_T_9, csrHazard_DecMem) @[CSRController.scala 88:45]
    node csrHazard_DecWb = mux(_csrHazard_DecWb_T_10, UInt<1>("h1"), UInt<1>("h0")) @[CSRController.scala 82:30]
    node _io_forwardRS1_T = eq(hazard_DecEx, UInt<1>("h1")) @[Mux.scala 81:61]
    wire _io_forwardRS1_WIRE : UInt<1> @[Mux.scala 81:58]
    _io_forwardRS1_WIRE is invalid @[Mux.scala 81:58]
    node _io_forwardRS1_T_1 = mux(_io_forwardRS1_T, UInt<1>("h1"), _io_forwardRS1_WIRE) @[Mux.scala 81:58]
    node _io_forwardRS1_T_2 = eq(hazard_DecMem, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_3 = mux(_io_forwardRS1_T_2, UInt<2>("h2"), _io_forwardRS1_T_1) @[Mux.scala 81:58]
    node _io_forwardRS1_T_4 = eq(hazard_DecWb, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_5 = mux(_io_forwardRS1_T_4, UInt<2>("h3"), _io_forwardRS1_T_3) @[Mux.scala 81:58]
    node _io_forwardRS1_T_6 = eq(csrHazard_DecEx, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_7 = mux(_io_forwardRS1_T_6, UInt<3>("h4"), _io_forwardRS1_T_5) @[Mux.scala 81:58]
    node _io_forwardRS1_T_8 = eq(csrHazard_DecMem, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_9 = mux(_io_forwardRS1_T_8, UInt<3>("h5"), _io_forwardRS1_T_7) @[Mux.scala 81:58]
    node _io_forwardRS1_T_10 = eq(csrHazard_DecWb, UInt<1>("h1")) @[Mux.scala 81:61]
    node _io_forwardRS1_T_11 = mux(_io_forwardRS1_T_10, UInt<3>("h6"), _io_forwardRS1_T_9) @[Mux.scala 81:58]
    io.forwardRS1 <= _io_forwardRS1_T_11 @[CSRController.scala 102:19]

  module HazardUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip id_ex_memRead : UInt<1>, flip ex_mem_memRead : UInt<1>, flip id_ex_branch : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip dmem_resp_valid : UInt<1>, flip taken : UInt<1>, flip jump : UInt<2>, flip branch : UInt<1>, if_reg_write : UInt<1>, pc_write : UInt<1>, ctl_mux : UInt<1>, ifid_flush : UInt<1>, take_branch : UInt<1>}

    io.ctl_mux <= UInt<1>("h1") @[HazardUnit.scala 25:14]
    io.pc_write <= UInt<1>("h1") @[HazardUnit.scala 26:26]
    io.if_reg_write <= UInt<1>("h1") @[HazardUnit.scala 27:19]
    io.take_branch <= UInt<1>("h1") @[HazardUnit.scala 28:18]
    io.ifid_flush <= UInt<1>("h0") @[HazardUnit.scala 29:17]
    node _T = or(io.id_ex_memRead, io.branch) @[HazardUnit.scala 33:23]
    node _T_1 = eq(io.id_ex_rd, io.id_rs1) @[HazardUnit.scala 34:22]
    node _T_2 = eq(io.id_ex_rd, io.id_rs2) @[HazardUnit.scala 34:53]
    node _T_3 = or(_T_1, _T_2) @[HazardUnit.scala 34:37]
    node _T_4 = and(_T, _T_3) @[HazardUnit.scala 34:5]
    node _T_5 = neq(io.id_ex_rd, UInt<1>("h0")) @[HazardUnit.scala 36:21]
    node _T_6 = neq(io.id_rs1, UInt<1>("h0")) @[HazardUnit.scala 36:44]
    node _T_7 = and(_T_5, _T_6) @[HazardUnit.scala 36:30]
    node _T_8 = neq(io.id_ex_rd, UInt<1>("h0")) @[HazardUnit.scala 37:24]
    node _T_9 = neq(io.id_rs2, UInt<1>("h0")) @[HazardUnit.scala 37:47]
    node _T_10 = and(_T_8, _T_9) @[HazardUnit.scala 37:33]
    node _T_11 = or(_T_7, _T_10) @[HazardUnit.scala 37:7]
    node _T_12 = and(_T_4, _T_11) @[HazardUnit.scala 35:5]
    node _T_13 = eq(io.id_ex_branch, UInt<1>("h0")) @[HazardUnit.scala 38:10]
    node _T_14 = and(_T_12, _T_13) @[HazardUnit.scala 38:7]
    when _T_14 : @[HazardUnit.scala 39:5]
      skip
    node _T_15 = or(io.ex_mem_memRead, io.branch) @[HazardUnit.scala 47:24]
    node _T_16 = eq(io.ex_mem_rd, io.id_rs1) @[HazardUnit.scala 48:23]
    node _T_17 = eq(io.ex_mem_rd, io.id_rs2) @[HazardUnit.scala 48:55]
    node _T_18 = or(_T_16, _T_17) @[HazardUnit.scala 48:38]
    node _T_19 = and(_T_15, _T_18) @[HazardUnit.scala 48:5]
    when _T_19 : @[HazardUnit.scala 49:5]
      skip
    node _T_20 = neq(io.jump, UInt<1>("h0")) @[HazardUnit.scala 57:29]
    node _T_21 = or(io.taken, _T_20) @[HazardUnit.scala 57:17]
    when _T_21 : @[HazardUnit.scala 57:39]
      io.ifid_flush <= UInt<1>("h1") @[HazardUnit.scala 58:19]
    else :
      io.ifid_flush <= UInt<1>("h0") @[HazardUnit.scala 60:19]


  module Control :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<32>, aluSrc : UInt<1>, memToReg : UInt<2>, regWrite : UInt<1>, memRead : UInt<1>, memWrite : UInt<1>, branch : UInt<1>, aluOp : UInt<2>, jump : UInt<2>, aluSrc1 : UInt<2>, f_read : UInt<1>[3], f_wr : UInt<1>}

    node _signals_T = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_1 = eq(UInt<6>("h33"), _signals_T) @[Lookup.scala 31:38]
    node _signals_T_2 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_3 = eq(UInt<5>("h13"), _signals_T_2) @[Lookup.scala 31:38]
    node _signals_T_4 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_5 = eq(UInt<7>("h73"), _signals_T_4) @[Lookup.scala 31:38]
    node _signals_T_6 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_7 = eq(UInt<2>("h3"), _signals_T_6) @[Lookup.scala 31:38]
    node _signals_T_8 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_9 = eq(UInt<6>("h23"), _signals_T_8) @[Lookup.scala 31:38]
    node _signals_T_10 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_11 = eq(UInt<7>("h63"), _signals_T_10) @[Lookup.scala 31:38]
    node _signals_T_12 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_13 = eq(UInt<6>("h37"), _signals_T_12) @[Lookup.scala 31:38]
    node _signals_T_14 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_15 = eq(UInt<5>("h17"), _signals_T_14) @[Lookup.scala 31:38]
    node _signals_T_16 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_17 = eq(UInt<7>("h6f"), _signals_T_16) @[Lookup.scala 31:38]
    node _signals_T_18 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_19 = eq(UInt<7>("h67"), _signals_T_18) @[Lookup.scala 31:38]
    node _signals_T_20 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_21 = eq(UInt<3>("h7"), _signals_T_20) @[Lookup.scala 31:38]
    node _signals_T_22 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_23 = eq(UInt<6>("h27"), _signals_T_22) @[Lookup.scala 31:38]
    node _signals_T_24 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_25 = eq(UInt<7>("h43"), _signals_T_24) @[Lookup.scala 31:38]
    node _signals_T_26 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_27 = eq(UInt<7>("h47"), _signals_T_26) @[Lookup.scala 31:38]
    node _signals_T_28 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_29 = eq(UInt<7>("h4b"), _signals_T_28) @[Lookup.scala 31:38]
    node _signals_T_30 = and(io.in, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _signals_T_31 = eq(UInt<7>("h4f"), _signals_T_30) @[Lookup.scala 31:38]
    node _signals_T_32 = and(io.in, UInt<32>("hfe00007f")) @[Lookup.scala 31:38]
    node _signals_T_33 = eq(UInt<7>("h53"), _signals_T_32) @[Lookup.scala 31:38]
    node _signals_T_34 = and(io.in, UInt<32>("hfe00007f")) @[Lookup.scala 31:38]
    node _signals_T_35 = eq(UInt<28>("h8000053"), _signals_T_34) @[Lookup.scala 31:38]
    node _signals_T_36 = and(io.in, UInt<32>("hfe00007f")) @[Lookup.scala 31:38]
    node _signals_T_37 = eq(UInt<29>("h10000053"), _signals_T_36) @[Lookup.scala 31:38]
    node _signals_T_38 = and(io.in, UInt<32>("hfe00007f")) @[Lookup.scala 31:38]
    node _signals_T_39 = eq(UInt<29>("h18000053"), _signals_T_38) @[Lookup.scala 31:38]
    node _signals_T_40 = and(io.in, UInt<32>("hfe00007f")) @[Lookup.scala 31:38]
    node _signals_T_41 = eq(UInt<31>("h58000053"), _signals_T_40) @[Lookup.scala 31:38]
    node _signals_T_42 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_43 = eq(UInt<30>("h20000053"), _signals_T_42) @[Lookup.scala 31:38]
    node _signals_T_44 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_45 = eq(UInt<30>("h20001053"), _signals_T_44) @[Lookup.scala 31:38]
    node _signals_T_46 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_47 = eq(UInt<30>("h20002053"), _signals_T_46) @[Lookup.scala 31:38]
    node _signals_T_48 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_49 = eq(UInt<30>("h28000053"), _signals_T_48) @[Lookup.scala 31:38]
    node _signals_T_50 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_51 = eq(UInt<30>("h28001053"), _signals_T_50) @[Lookup.scala 31:38]
    node _signals_T_52 = and(io.in, UInt<32>("hfff0007f")) @[Lookup.scala 31:38]
    node _signals_T_53 = eq(UInt<32>("hd0000053"), _signals_T_52) @[Lookup.scala 31:38]
    node _signals_T_54 = and(io.in, UInt<32>("hfff0007f")) @[Lookup.scala 31:38]
    node _signals_T_55 = eq(UInt<32>("hd0100053"), _signals_T_54) @[Lookup.scala 31:38]
    node _signals_T_56 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_57 = eq(UInt<32>("hf0000053"), _signals_T_56) @[Lookup.scala 31:38]
    node _signals_T_58 = and(io.in, UInt<32>("hfff0007f")) @[Lookup.scala 31:38]
    node _signals_T_59 = eq(UInt<32>("hc0000053"), _signals_T_58) @[Lookup.scala 31:38]
    node _signals_T_60 = and(io.in, UInt<32>("hfff0007f")) @[Lookup.scala 31:38]
    node _signals_T_61 = eq(UInt<32>("hc0100053"), _signals_T_60) @[Lookup.scala 31:38]
    node _signals_T_62 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_63 = eq(UInt<32>("he0000053"), _signals_T_62) @[Lookup.scala 31:38]
    node _signals_T_64 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_65 = eq(UInt<32>("ha0002053"), _signals_T_64) @[Lookup.scala 31:38]
    node _signals_T_66 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_67 = eq(UInt<32>("ha0001053"), _signals_T_66) @[Lookup.scala 31:38]
    node _signals_T_68 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_69 = eq(UInt<32>("ha0000053"), _signals_T_68) @[Lookup.scala 31:38]
    node _signals_T_70 = and(io.in, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _signals_T_71 = eq(UInt<32>("he0001053"), _signals_T_70) @[Lookup.scala 31:38]
    node _signals_T_72 = mux(_signals_T_71, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_73 = mux(_signals_T_69, UInt<1>("h1"), _signals_T_72) @[Lookup.scala 34:39]
    node _signals_T_74 = mux(_signals_T_67, UInt<1>("h1"), _signals_T_73) @[Lookup.scala 34:39]
    node _signals_T_75 = mux(_signals_T_65, UInt<1>("h1"), _signals_T_74) @[Lookup.scala 34:39]
    node _signals_T_76 = mux(_signals_T_63, UInt<1>("h1"), _signals_T_75) @[Lookup.scala 34:39]
    node _signals_T_77 = mux(_signals_T_61, UInt<1>("h1"), _signals_T_76) @[Lookup.scala 34:39]
    node _signals_T_78 = mux(_signals_T_59, UInt<1>("h1"), _signals_T_77) @[Lookup.scala 34:39]
    node _signals_T_79 = mux(_signals_T_57, UInt<1>("h1"), _signals_T_78) @[Lookup.scala 34:39]
    node _signals_T_80 = mux(_signals_T_55, UInt<1>("h1"), _signals_T_79) @[Lookup.scala 34:39]
    node _signals_T_81 = mux(_signals_T_53, UInt<1>("h1"), _signals_T_80) @[Lookup.scala 34:39]
    node _signals_T_82 = mux(_signals_T_51, UInt<1>("h1"), _signals_T_81) @[Lookup.scala 34:39]
    node _signals_T_83 = mux(_signals_T_49, UInt<1>("h1"), _signals_T_82) @[Lookup.scala 34:39]
    node _signals_T_84 = mux(_signals_T_47, UInt<1>("h1"), _signals_T_83) @[Lookup.scala 34:39]
    node _signals_T_85 = mux(_signals_T_45, UInt<1>("h1"), _signals_T_84) @[Lookup.scala 34:39]
    node _signals_T_86 = mux(_signals_T_43, UInt<1>("h1"), _signals_T_85) @[Lookup.scala 34:39]
    node _signals_T_87 = mux(_signals_T_41, UInt<1>("h1"), _signals_T_86) @[Lookup.scala 34:39]
    node _signals_T_88 = mux(_signals_T_39, UInt<1>("h1"), _signals_T_87) @[Lookup.scala 34:39]
    node _signals_T_89 = mux(_signals_T_37, UInt<1>("h1"), _signals_T_88) @[Lookup.scala 34:39]
    node _signals_T_90 = mux(_signals_T_35, UInt<1>("h1"), _signals_T_89) @[Lookup.scala 34:39]
    node _signals_T_91 = mux(_signals_T_33, UInt<1>("h1"), _signals_T_90) @[Lookup.scala 34:39]
    node _signals_T_92 = mux(_signals_T_31, UInt<1>("h1"), _signals_T_91) @[Lookup.scala 34:39]
    node _signals_T_93 = mux(_signals_T_29, UInt<1>("h1"), _signals_T_92) @[Lookup.scala 34:39]
    node _signals_T_94 = mux(_signals_T_27, UInt<1>("h1"), _signals_T_93) @[Lookup.scala 34:39]
    node _signals_T_95 = mux(_signals_T_25, UInt<1>("h1"), _signals_T_94) @[Lookup.scala 34:39]
    node _signals_T_96 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_95) @[Lookup.scala 34:39]
    node _signals_T_97 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_96) @[Lookup.scala 34:39]
    node _signals_T_98 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_97) @[Lookup.scala 34:39]
    node _signals_T_99 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_98) @[Lookup.scala 34:39]
    node _signals_T_100 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_99) @[Lookup.scala 34:39]
    node _signals_T_101 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_100) @[Lookup.scala 34:39]
    node _signals_T_102 = mux(_signals_T_11, UInt<1>("h1"), _signals_T_101) @[Lookup.scala 34:39]
    node _signals_T_103 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_102) @[Lookup.scala 34:39]
    node _signals_T_104 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_103) @[Lookup.scala 34:39]
    node _signals_T_105 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_104) @[Lookup.scala 34:39]
    node _signals_T_106 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_105) @[Lookup.scala 34:39]
    node signals_0 = mux(_signals_T_1, UInt<1>("h1"), _signals_T_106) @[Lookup.scala 34:39]
    node _signals_T_107 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_108 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_107) @[Lookup.scala 34:39]
    node _signals_T_109 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_108) @[Lookup.scala 34:39]
    node _signals_T_110 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_109) @[Lookup.scala 34:39]
    node _signals_T_111 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_110) @[Lookup.scala 34:39]
    node _signals_T_112 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_111) @[Lookup.scala 34:39]
    node _signals_T_113 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_112) @[Lookup.scala 34:39]
    node _signals_T_114 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_113) @[Lookup.scala 34:39]
    node _signals_T_115 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_114) @[Lookup.scala 34:39]
    node _signals_T_116 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_115) @[Lookup.scala 34:39]
    node _signals_T_117 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_116) @[Lookup.scala 34:39]
    node _signals_T_118 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_117) @[Lookup.scala 34:39]
    node _signals_T_119 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_118) @[Lookup.scala 34:39]
    node _signals_T_120 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_119) @[Lookup.scala 34:39]
    node _signals_T_121 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_120) @[Lookup.scala 34:39]
    node _signals_T_122 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_121) @[Lookup.scala 34:39]
    node _signals_T_123 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_122) @[Lookup.scala 34:39]
    node _signals_T_124 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_123) @[Lookup.scala 34:39]
    node _signals_T_125 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_124) @[Lookup.scala 34:39]
    node _signals_T_126 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_125) @[Lookup.scala 34:39]
    node _signals_T_127 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_126) @[Lookup.scala 34:39]
    node _signals_T_128 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_127) @[Lookup.scala 34:39]
    node _signals_T_129 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_128) @[Lookup.scala 34:39]
    node _signals_T_130 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_129) @[Lookup.scala 34:39]
    node _signals_T_131 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_130) @[Lookup.scala 34:39]
    node _signals_T_132 = mux(_signals_T_21, UInt<1>("h1"), _signals_T_131) @[Lookup.scala 34:39]
    node _signals_T_133 = mux(_signals_T_19, UInt<2>("h2"), _signals_T_132) @[Lookup.scala 34:39]
    node _signals_T_134 = mux(_signals_T_17, UInt<2>("h2"), _signals_T_133) @[Lookup.scala 34:39]
    node _signals_T_135 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_134) @[Lookup.scala 34:39]
    node _signals_T_136 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_135) @[Lookup.scala 34:39]
    node _signals_T_137 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_136) @[Lookup.scala 34:39]
    node _signals_T_138 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_137) @[Lookup.scala 34:39]
    node _signals_T_139 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_138) @[Lookup.scala 34:39]
    node _signals_T_140 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_139) @[Lookup.scala 34:39]
    node _signals_T_141 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_140) @[Lookup.scala 34:39]
    node signals_1 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_141) @[Lookup.scala 34:39]
    node _signals_T_142 = mux(_signals_T_71, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_143 = mux(_signals_T_69, UInt<1>("h1"), _signals_T_142) @[Lookup.scala 34:39]
    node _signals_T_144 = mux(_signals_T_67, UInt<1>("h1"), _signals_T_143) @[Lookup.scala 34:39]
    node _signals_T_145 = mux(_signals_T_65, UInt<1>("h1"), _signals_T_144) @[Lookup.scala 34:39]
    node _signals_T_146 = mux(_signals_T_63, UInt<1>("h1"), _signals_T_145) @[Lookup.scala 34:39]
    node _signals_T_147 = mux(_signals_T_61, UInt<1>("h1"), _signals_T_146) @[Lookup.scala 34:39]
    node _signals_T_148 = mux(_signals_T_59, UInt<1>("h1"), _signals_T_147) @[Lookup.scala 34:39]
    node _signals_T_149 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_148) @[Lookup.scala 34:39]
    node _signals_T_150 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_149) @[Lookup.scala 34:39]
    node _signals_T_151 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_150) @[Lookup.scala 34:39]
    node _signals_T_152 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_151) @[Lookup.scala 34:39]
    node _signals_T_153 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_152) @[Lookup.scala 34:39]
    node _signals_T_154 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_153) @[Lookup.scala 34:39]
    node _signals_T_155 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_154) @[Lookup.scala 34:39]
    node _signals_T_156 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_155) @[Lookup.scala 34:39]
    node _signals_T_157 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_156) @[Lookup.scala 34:39]
    node _signals_T_158 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_157) @[Lookup.scala 34:39]
    node _signals_T_159 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_158) @[Lookup.scala 34:39]
    node _signals_T_160 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_159) @[Lookup.scala 34:39]
    node _signals_T_161 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_160) @[Lookup.scala 34:39]
    node _signals_T_162 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_161) @[Lookup.scala 34:39]
    node _signals_T_163 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_162) @[Lookup.scala 34:39]
    node _signals_T_164 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_163) @[Lookup.scala 34:39]
    node _signals_T_165 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_164) @[Lookup.scala 34:39]
    node _signals_T_166 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_165) @[Lookup.scala 34:39]
    node _signals_T_167 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_166) @[Lookup.scala 34:39]
    node _signals_T_168 = mux(_signals_T_19, UInt<1>("h1"), _signals_T_167) @[Lookup.scala 34:39]
    node _signals_T_169 = mux(_signals_T_17, UInt<1>("h1"), _signals_T_168) @[Lookup.scala 34:39]
    node _signals_T_170 = mux(_signals_T_15, UInt<1>("h1"), _signals_T_169) @[Lookup.scala 34:39]
    node _signals_T_171 = mux(_signals_T_13, UInt<1>("h1"), _signals_T_170) @[Lookup.scala 34:39]
    node _signals_T_172 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_171) @[Lookup.scala 34:39]
    node _signals_T_173 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_172) @[Lookup.scala 34:39]
    node _signals_T_174 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_173) @[Lookup.scala 34:39]
    node _signals_T_175 = mux(_signals_T_5, UInt<1>("h1"), _signals_T_174) @[Lookup.scala 34:39]
    node _signals_T_176 = mux(_signals_T_3, UInt<1>("h1"), _signals_T_175) @[Lookup.scala 34:39]
    node signals_2 = mux(_signals_T_1, UInt<1>("h1"), _signals_T_176) @[Lookup.scala 34:39]
    node _signals_T_177 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_178 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_177) @[Lookup.scala 34:39]
    node _signals_T_179 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_178) @[Lookup.scala 34:39]
    node _signals_T_180 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_179) @[Lookup.scala 34:39]
    node _signals_T_181 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_180) @[Lookup.scala 34:39]
    node _signals_T_182 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_181) @[Lookup.scala 34:39]
    node _signals_T_183 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_182) @[Lookup.scala 34:39]
    node _signals_T_184 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_183) @[Lookup.scala 34:39]
    node _signals_T_185 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_184) @[Lookup.scala 34:39]
    node _signals_T_186 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_185) @[Lookup.scala 34:39]
    node _signals_T_187 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_186) @[Lookup.scala 34:39]
    node _signals_T_188 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_187) @[Lookup.scala 34:39]
    node _signals_T_189 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_188) @[Lookup.scala 34:39]
    node _signals_T_190 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_189) @[Lookup.scala 34:39]
    node _signals_T_191 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_190) @[Lookup.scala 34:39]
    node _signals_T_192 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_191) @[Lookup.scala 34:39]
    node _signals_T_193 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_192) @[Lookup.scala 34:39]
    node _signals_T_194 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_193) @[Lookup.scala 34:39]
    node _signals_T_195 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_194) @[Lookup.scala 34:39]
    node _signals_T_196 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_195) @[Lookup.scala 34:39]
    node _signals_T_197 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_196) @[Lookup.scala 34:39]
    node _signals_T_198 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_197) @[Lookup.scala 34:39]
    node _signals_T_199 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_198) @[Lookup.scala 34:39]
    node _signals_T_200 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_199) @[Lookup.scala 34:39]
    node _signals_T_201 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_200) @[Lookup.scala 34:39]
    node _signals_T_202 = mux(_signals_T_21, UInt<1>("h1"), _signals_T_201) @[Lookup.scala 34:39]
    node _signals_T_203 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_202) @[Lookup.scala 34:39]
    node _signals_T_204 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_203) @[Lookup.scala 34:39]
    node _signals_T_205 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_204) @[Lookup.scala 34:39]
    node _signals_T_206 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_205) @[Lookup.scala 34:39]
    node _signals_T_207 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_206) @[Lookup.scala 34:39]
    node _signals_T_208 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_207) @[Lookup.scala 34:39]
    node _signals_T_209 = mux(_signals_T_7, UInt<1>("h1"), _signals_T_208) @[Lookup.scala 34:39]
    node _signals_T_210 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_209) @[Lookup.scala 34:39]
    node _signals_T_211 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_210) @[Lookup.scala 34:39]
    node signals_3 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_211) @[Lookup.scala 34:39]
    node _signals_T_212 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_213 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_212) @[Lookup.scala 34:39]
    node _signals_T_214 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_213) @[Lookup.scala 34:39]
    node _signals_T_215 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_214) @[Lookup.scala 34:39]
    node _signals_T_216 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_215) @[Lookup.scala 34:39]
    node _signals_T_217 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_216) @[Lookup.scala 34:39]
    node _signals_T_218 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_217) @[Lookup.scala 34:39]
    node _signals_T_219 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_218) @[Lookup.scala 34:39]
    node _signals_T_220 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_219) @[Lookup.scala 34:39]
    node _signals_T_221 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_220) @[Lookup.scala 34:39]
    node _signals_T_222 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_221) @[Lookup.scala 34:39]
    node _signals_T_223 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_222) @[Lookup.scala 34:39]
    node _signals_T_224 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_223) @[Lookup.scala 34:39]
    node _signals_T_225 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_224) @[Lookup.scala 34:39]
    node _signals_T_226 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_225) @[Lookup.scala 34:39]
    node _signals_T_227 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_226) @[Lookup.scala 34:39]
    node _signals_T_228 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_227) @[Lookup.scala 34:39]
    node _signals_T_229 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_228) @[Lookup.scala 34:39]
    node _signals_T_230 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_229) @[Lookup.scala 34:39]
    node _signals_T_231 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_230) @[Lookup.scala 34:39]
    node _signals_T_232 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_231) @[Lookup.scala 34:39]
    node _signals_T_233 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_232) @[Lookup.scala 34:39]
    node _signals_T_234 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_233) @[Lookup.scala 34:39]
    node _signals_T_235 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_234) @[Lookup.scala 34:39]
    node _signals_T_236 = mux(_signals_T_23, UInt<1>("h1"), _signals_T_235) @[Lookup.scala 34:39]
    node _signals_T_237 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_236) @[Lookup.scala 34:39]
    node _signals_T_238 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_237) @[Lookup.scala 34:39]
    node _signals_T_239 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_238) @[Lookup.scala 34:39]
    node _signals_T_240 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_239) @[Lookup.scala 34:39]
    node _signals_T_241 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_240) @[Lookup.scala 34:39]
    node _signals_T_242 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_241) @[Lookup.scala 34:39]
    node _signals_T_243 = mux(_signals_T_9, UInt<1>("h1"), _signals_T_242) @[Lookup.scala 34:39]
    node _signals_T_244 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_243) @[Lookup.scala 34:39]
    node _signals_T_245 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_244) @[Lookup.scala 34:39]
    node _signals_T_246 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_245) @[Lookup.scala 34:39]
    node signals_4 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_246) @[Lookup.scala 34:39]
    node _signals_T_247 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_248 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_247) @[Lookup.scala 34:39]
    node _signals_T_249 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_248) @[Lookup.scala 34:39]
    node _signals_T_250 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_249) @[Lookup.scala 34:39]
    node _signals_T_251 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_250) @[Lookup.scala 34:39]
    node _signals_T_252 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_251) @[Lookup.scala 34:39]
    node _signals_T_253 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_252) @[Lookup.scala 34:39]
    node _signals_T_254 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_253) @[Lookup.scala 34:39]
    node _signals_T_255 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_254) @[Lookup.scala 34:39]
    node _signals_T_256 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_255) @[Lookup.scala 34:39]
    node _signals_T_257 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_256) @[Lookup.scala 34:39]
    node _signals_T_258 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_257) @[Lookup.scala 34:39]
    node _signals_T_259 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_258) @[Lookup.scala 34:39]
    node _signals_T_260 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_259) @[Lookup.scala 34:39]
    node _signals_T_261 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_260) @[Lookup.scala 34:39]
    node _signals_T_262 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_261) @[Lookup.scala 34:39]
    node _signals_T_263 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_262) @[Lookup.scala 34:39]
    node _signals_T_264 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_263) @[Lookup.scala 34:39]
    node _signals_T_265 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_264) @[Lookup.scala 34:39]
    node _signals_T_266 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_265) @[Lookup.scala 34:39]
    node _signals_T_267 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_266) @[Lookup.scala 34:39]
    node _signals_T_268 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_267) @[Lookup.scala 34:39]
    node _signals_T_269 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_268) @[Lookup.scala 34:39]
    node _signals_T_270 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_269) @[Lookup.scala 34:39]
    node _signals_T_271 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_270) @[Lookup.scala 34:39]
    node _signals_T_272 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_271) @[Lookup.scala 34:39]
    node _signals_T_273 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_272) @[Lookup.scala 34:39]
    node _signals_T_274 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_273) @[Lookup.scala 34:39]
    node _signals_T_275 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_274) @[Lookup.scala 34:39]
    node _signals_T_276 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_275) @[Lookup.scala 34:39]
    node _signals_T_277 = mux(_signals_T_11, UInt<1>("h1"), _signals_T_276) @[Lookup.scala 34:39]
    node _signals_T_278 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_277) @[Lookup.scala 34:39]
    node _signals_T_279 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_278) @[Lookup.scala 34:39]
    node _signals_T_280 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_279) @[Lookup.scala 34:39]
    node _signals_T_281 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_280) @[Lookup.scala 34:39]
    node signals_5 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_281) @[Lookup.scala 34:39]
    node _signals_T_282 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_283 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_282) @[Lookup.scala 34:39]
    node _signals_T_284 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_283) @[Lookup.scala 34:39]
    node _signals_T_285 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_284) @[Lookup.scala 34:39]
    node _signals_T_286 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_285) @[Lookup.scala 34:39]
    node _signals_T_287 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_286) @[Lookup.scala 34:39]
    node _signals_T_288 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_287) @[Lookup.scala 34:39]
    node _signals_T_289 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_288) @[Lookup.scala 34:39]
    node _signals_T_290 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_289) @[Lookup.scala 34:39]
    node _signals_T_291 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_290) @[Lookup.scala 34:39]
    node _signals_T_292 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_291) @[Lookup.scala 34:39]
    node _signals_T_293 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_292) @[Lookup.scala 34:39]
    node _signals_T_294 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_293) @[Lookup.scala 34:39]
    node _signals_T_295 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_294) @[Lookup.scala 34:39]
    node _signals_T_296 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_295) @[Lookup.scala 34:39]
    node _signals_T_297 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_296) @[Lookup.scala 34:39]
    node _signals_T_298 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_297) @[Lookup.scala 34:39]
    node _signals_T_299 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_298) @[Lookup.scala 34:39]
    node _signals_T_300 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_299) @[Lookup.scala 34:39]
    node _signals_T_301 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_300) @[Lookup.scala 34:39]
    node _signals_T_302 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_301) @[Lookup.scala 34:39]
    node _signals_T_303 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_302) @[Lookup.scala 34:39]
    node _signals_T_304 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_303) @[Lookup.scala 34:39]
    node _signals_T_305 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_304) @[Lookup.scala 34:39]
    node _signals_T_306 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_305) @[Lookup.scala 34:39]
    node _signals_T_307 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_306) @[Lookup.scala 34:39]
    node _signals_T_308 = mux(_signals_T_19, UInt<2>("h2"), _signals_T_307) @[Lookup.scala 34:39]
    node _signals_T_309 = mux(_signals_T_17, UInt<1>("h1"), _signals_T_308) @[Lookup.scala 34:39]
    node _signals_T_310 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_309) @[Lookup.scala 34:39]
    node _signals_T_311 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_310) @[Lookup.scala 34:39]
    node _signals_T_312 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_311) @[Lookup.scala 34:39]
    node _signals_T_313 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_312) @[Lookup.scala 34:39]
    node _signals_T_314 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_313) @[Lookup.scala 34:39]
    node _signals_T_315 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_314) @[Lookup.scala 34:39]
    node _signals_T_316 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_315) @[Lookup.scala 34:39]
    node signals_6 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_316) @[Lookup.scala 34:39]
    node _signals_T_317 = mux(_signals_T_71, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_318 = mux(_signals_T_69, UInt<1>("h1"), _signals_T_317) @[Lookup.scala 34:39]
    node _signals_T_319 = mux(_signals_T_67, UInt<1>("h1"), _signals_T_318) @[Lookup.scala 34:39]
    node _signals_T_320 = mux(_signals_T_65, UInt<1>("h1"), _signals_T_319) @[Lookup.scala 34:39]
    node _signals_T_321 = mux(_signals_T_63, UInt<1>("h1"), _signals_T_320) @[Lookup.scala 34:39]
    node _signals_T_322 = mux(_signals_T_61, UInt<1>("h1"), _signals_T_321) @[Lookup.scala 34:39]
    node _signals_T_323 = mux(_signals_T_59, UInt<1>("h1"), _signals_T_322) @[Lookup.scala 34:39]
    node _signals_T_324 = mux(_signals_T_57, UInt<1>("h1"), _signals_T_323) @[Lookup.scala 34:39]
    node _signals_T_325 = mux(_signals_T_55, UInt<1>("h1"), _signals_T_324) @[Lookup.scala 34:39]
    node _signals_T_326 = mux(_signals_T_53, UInt<1>("h1"), _signals_T_325) @[Lookup.scala 34:39]
    node _signals_T_327 = mux(_signals_T_51, UInt<1>("h1"), _signals_T_326) @[Lookup.scala 34:39]
    node _signals_T_328 = mux(_signals_T_49, UInt<1>("h1"), _signals_T_327) @[Lookup.scala 34:39]
    node _signals_T_329 = mux(_signals_T_47, UInt<1>("h1"), _signals_T_328) @[Lookup.scala 34:39]
    node _signals_T_330 = mux(_signals_T_45, UInt<1>("h1"), _signals_T_329) @[Lookup.scala 34:39]
    node _signals_T_331 = mux(_signals_T_43, UInt<1>("h1"), _signals_T_330) @[Lookup.scala 34:39]
    node _signals_T_332 = mux(_signals_T_41, UInt<1>("h1"), _signals_T_331) @[Lookup.scala 34:39]
    node _signals_T_333 = mux(_signals_T_39, UInt<1>("h1"), _signals_T_332) @[Lookup.scala 34:39]
    node _signals_T_334 = mux(_signals_T_37, UInt<1>("h1"), _signals_T_333) @[Lookup.scala 34:39]
    node _signals_T_335 = mux(_signals_T_35, UInt<1>("h1"), _signals_T_334) @[Lookup.scala 34:39]
    node _signals_T_336 = mux(_signals_T_33, UInt<1>("h1"), _signals_T_335) @[Lookup.scala 34:39]
    node _signals_T_337 = mux(_signals_T_31, UInt<1>("h1"), _signals_T_336) @[Lookup.scala 34:39]
    node _signals_T_338 = mux(_signals_T_29, UInt<1>("h1"), _signals_T_337) @[Lookup.scala 34:39]
    node _signals_T_339 = mux(_signals_T_27, UInt<1>("h1"), _signals_T_338) @[Lookup.scala 34:39]
    node _signals_T_340 = mux(_signals_T_25, UInt<1>("h1"), _signals_T_339) @[Lookup.scala 34:39]
    node _signals_T_341 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_340) @[Lookup.scala 34:39]
    node _signals_T_342 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_341) @[Lookup.scala 34:39]
    node _signals_T_343 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_342) @[Lookup.scala 34:39]
    node _signals_T_344 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_343) @[Lookup.scala 34:39]
    node _signals_T_345 = mux(_signals_T_15, UInt<1>("h0"), _signals_T_344) @[Lookup.scala 34:39]
    node _signals_T_346 = mux(_signals_T_13, UInt<1>("h0"), _signals_T_345) @[Lookup.scala 34:39]
    node _signals_T_347 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_346) @[Lookup.scala 34:39]
    node _signals_T_348 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_347) @[Lookup.scala 34:39]
    node _signals_T_349 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_348) @[Lookup.scala 34:39]
    node _signals_T_350 = mux(_signals_T_5, UInt<1>("h1"), _signals_T_349) @[Lookup.scala 34:39]
    node _signals_T_351 = mux(_signals_T_3, UInt<2>("h2"), _signals_T_350) @[Lookup.scala 34:39]
    node signals_7 = mux(_signals_T_1, UInt<2>("h2"), _signals_T_351) @[Lookup.scala 34:39]
    node _signals_T_352 = mux(_signals_T_71, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node _signals_T_353 = mux(_signals_T_69, UInt<1>("h0"), _signals_T_352) @[Lookup.scala 34:39]
    node _signals_T_354 = mux(_signals_T_67, UInt<1>("h0"), _signals_T_353) @[Lookup.scala 34:39]
    node _signals_T_355 = mux(_signals_T_65, UInt<1>("h0"), _signals_T_354) @[Lookup.scala 34:39]
    node _signals_T_356 = mux(_signals_T_63, UInt<1>("h0"), _signals_T_355) @[Lookup.scala 34:39]
    node _signals_T_357 = mux(_signals_T_61, UInt<1>("h0"), _signals_T_356) @[Lookup.scala 34:39]
    node _signals_T_358 = mux(_signals_T_59, UInt<1>("h0"), _signals_T_357) @[Lookup.scala 34:39]
    node _signals_T_359 = mux(_signals_T_57, UInt<1>("h0"), _signals_T_358) @[Lookup.scala 34:39]
    node _signals_T_360 = mux(_signals_T_55, UInt<1>("h0"), _signals_T_359) @[Lookup.scala 34:39]
    node _signals_T_361 = mux(_signals_T_53, UInt<1>("h0"), _signals_T_360) @[Lookup.scala 34:39]
    node _signals_T_362 = mux(_signals_T_51, UInt<1>("h0"), _signals_T_361) @[Lookup.scala 34:39]
    node _signals_T_363 = mux(_signals_T_49, UInt<1>("h0"), _signals_T_362) @[Lookup.scala 34:39]
    node _signals_T_364 = mux(_signals_T_47, UInt<1>("h0"), _signals_T_363) @[Lookup.scala 34:39]
    node _signals_T_365 = mux(_signals_T_45, UInt<1>("h0"), _signals_T_364) @[Lookup.scala 34:39]
    node _signals_T_366 = mux(_signals_T_43, UInt<1>("h0"), _signals_T_365) @[Lookup.scala 34:39]
    node _signals_T_367 = mux(_signals_T_41, UInt<1>("h0"), _signals_T_366) @[Lookup.scala 34:39]
    node _signals_T_368 = mux(_signals_T_39, UInt<1>("h0"), _signals_T_367) @[Lookup.scala 34:39]
    node _signals_T_369 = mux(_signals_T_37, UInt<1>("h0"), _signals_T_368) @[Lookup.scala 34:39]
    node _signals_T_370 = mux(_signals_T_35, UInt<1>("h0"), _signals_T_369) @[Lookup.scala 34:39]
    node _signals_T_371 = mux(_signals_T_33, UInt<1>("h0"), _signals_T_370) @[Lookup.scala 34:39]
    node _signals_T_372 = mux(_signals_T_31, UInt<1>("h0"), _signals_T_371) @[Lookup.scala 34:39]
    node _signals_T_373 = mux(_signals_T_29, UInt<1>("h0"), _signals_T_372) @[Lookup.scala 34:39]
    node _signals_T_374 = mux(_signals_T_27, UInt<1>("h0"), _signals_T_373) @[Lookup.scala 34:39]
    node _signals_T_375 = mux(_signals_T_25, UInt<1>("h0"), _signals_T_374) @[Lookup.scala 34:39]
    node _signals_T_376 = mux(_signals_T_23, UInt<1>("h0"), _signals_T_375) @[Lookup.scala 34:39]
    node _signals_T_377 = mux(_signals_T_21, UInt<1>("h0"), _signals_T_376) @[Lookup.scala 34:39]
    node _signals_T_378 = mux(_signals_T_19, UInt<1>("h0"), _signals_T_377) @[Lookup.scala 34:39]
    node _signals_T_379 = mux(_signals_T_17, UInt<1>("h0"), _signals_T_378) @[Lookup.scala 34:39]
    node _signals_T_380 = mux(_signals_T_15, UInt<1>("h1"), _signals_T_379) @[Lookup.scala 34:39]
    node _signals_T_381 = mux(_signals_T_13, UInt<2>("h2"), _signals_T_380) @[Lookup.scala 34:39]
    node _signals_T_382 = mux(_signals_T_11, UInt<1>("h0"), _signals_T_381) @[Lookup.scala 34:39]
    node _signals_T_383 = mux(_signals_T_9, UInt<1>("h0"), _signals_T_382) @[Lookup.scala 34:39]
    node _signals_T_384 = mux(_signals_T_7, UInt<1>("h0"), _signals_T_383) @[Lookup.scala 34:39]
    node _signals_T_385 = mux(_signals_T_5, UInt<1>("h0"), _signals_T_384) @[Lookup.scala 34:39]
    node _signals_T_386 = mux(_signals_T_3, UInt<1>("h0"), _signals_T_385) @[Lookup.scala 34:39]
    node signals_8 = mux(_signals_T_1, UInt<1>("h0"), _signals_T_386) @[Lookup.scala 34:39]
    io.aluSrc <= signals_0 @[Control.scala 226:13]
    io.memToReg <= signals_1 @[Control.scala 227:15]
    io.regWrite <= signals_2 @[Control.scala 228:15]
    io.memRead <= signals_3 @[Control.scala 229:14]
    io.memWrite <= signals_4 @[Control.scala 230:15]
    io.branch <= signals_5 @[Control.scala 231:13]
    io.jump <= signals_6 @[Control.scala 232:11]
    io.aluOp <= signals_7 @[Control.scala 233:12]
    io.aluSrc1 <= signals_8 @[Control.scala 234:14]
    node _f_ctrl_T = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_1 = eq(UInt<3>("h7"), _f_ctrl_T) @[Control.scala 264:13]
    node _f_ctrl_T_2 = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_3 = eq(UInt<6>("h27"), _f_ctrl_T_2) @[Control.scala 264:13]
    node _f_ctrl_T_4 = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_5 = eq(UInt<7>("h43"), _f_ctrl_T_4) @[Control.scala 264:13]
    node _f_ctrl_T_6 = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_7 = eq(UInt<7>("h47"), _f_ctrl_T_6) @[Control.scala 264:13]
    node _f_ctrl_T_8 = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_9 = eq(UInt<7>("h4b"), _f_ctrl_T_8) @[Control.scala 264:13]
    node _f_ctrl_T_10 = and(io.in, UInt<7>("h7f")) @[Control.scala 264:13]
    node _f_ctrl_T_11 = eq(UInt<7>("h4f"), _f_ctrl_T_10) @[Control.scala 264:13]
    node _f_ctrl_T_12 = and(io.in, UInt<32>("hfe00007f")) @[Control.scala 264:13]
    node _f_ctrl_T_13 = eq(UInt<7>("h53"), _f_ctrl_T_12) @[Control.scala 264:13]
    node _f_ctrl_T_14 = and(io.in, UInt<32>("hfe00007f")) @[Control.scala 264:13]
    node _f_ctrl_T_15 = eq(UInt<28>("h8000053"), _f_ctrl_T_14) @[Control.scala 264:13]
    node _f_ctrl_T_16 = and(io.in, UInt<32>("hfe00007f")) @[Control.scala 264:13]
    node _f_ctrl_T_17 = eq(UInt<29>("h10000053"), _f_ctrl_T_16) @[Control.scala 264:13]
    node _f_ctrl_T_18 = and(io.in, UInt<32>("hfe00007f")) @[Control.scala 264:13]
    node _f_ctrl_T_19 = eq(UInt<29>("h18000053"), _f_ctrl_T_18) @[Control.scala 264:13]
    node _f_ctrl_T_20 = and(io.in, UInt<32>("hfe00007f")) @[Control.scala 264:13]
    node _f_ctrl_T_21 = eq(UInt<31>("h58000053"), _f_ctrl_T_20) @[Control.scala 264:13]
    node _f_ctrl_T_22 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_23 = eq(UInt<30>("h20000053"), _f_ctrl_T_22) @[Control.scala 264:13]
    node _f_ctrl_T_24 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_25 = eq(UInt<30>("h20001053"), _f_ctrl_T_24) @[Control.scala 264:13]
    node _f_ctrl_T_26 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_27 = eq(UInt<30>("h20002053"), _f_ctrl_T_26) @[Control.scala 264:13]
    node _f_ctrl_T_28 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_29 = eq(UInt<30>("h28000053"), _f_ctrl_T_28) @[Control.scala 264:13]
    node _f_ctrl_T_30 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_31 = eq(UInt<30>("h28001053"), _f_ctrl_T_30) @[Control.scala 264:13]
    node _f_ctrl_T_32 = and(io.in, UInt<32>("hfff0007f")) @[Control.scala 264:13]
    node _f_ctrl_T_33 = eq(UInt<32>("hc0000053"), _f_ctrl_T_32) @[Control.scala 264:13]
    node _f_ctrl_T_34 = and(io.in, UInt<32>("hfff0007f")) @[Control.scala 264:13]
    node _f_ctrl_T_35 = eq(UInt<32>("hc0100053"), _f_ctrl_T_34) @[Control.scala 264:13]
    node _f_ctrl_T_36 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_37 = eq(UInt<32>("he0000053"), _f_ctrl_T_36) @[Control.scala 264:13]
    node _f_ctrl_T_38 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_39 = eq(UInt<32>("ha0002053"), _f_ctrl_T_38) @[Control.scala 264:13]
    node _f_ctrl_T_40 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_41 = eq(UInt<32>("ha0001053"), _f_ctrl_T_40) @[Control.scala 264:13]
    node _f_ctrl_T_42 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_43 = eq(UInt<32>("ha0000053"), _f_ctrl_T_42) @[Control.scala 264:13]
    node _f_ctrl_T_44 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_45 = eq(UInt<32>("he0001053"), _f_ctrl_T_44) @[Control.scala 264:13]
    node _f_ctrl_T_46 = and(io.in, UInt<32>("hfff0007f")) @[Control.scala 264:13]
    node _f_ctrl_T_47 = eq(UInt<32>("hd0000053"), _f_ctrl_T_46) @[Control.scala 264:13]
    node _f_ctrl_T_48 = and(io.in, UInt<32>("hfff0007f")) @[Control.scala 264:13]
    node _f_ctrl_T_49 = eq(UInt<32>("hd0100053"), _f_ctrl_T_48) @[Control.scala 264:13]
    node _f_ctrl_T_50 = and(io.in, UInt<32>("hfe00707f")) @[Control.scala 264:13]
    node _f_ctrl_T_51 = eq(UInt<32>("hf0000053"), _f_ctrl_T_50) @[Control.scala 264:13]
    wire f_ctrl : UInt<1>[26] @[Control.scala 237:25]
    f_ctrl[0] <= _f_ctrl_T_1 @[Control.scala 237:25]
    f_ctrl[1] <= _f_ctrl_T_3 @[Control.scala 237:25]
    f_ctrl[2] <= _f_ctrl_T_5 @[Control.scala 237:25]
    f_ctrl[3] <= _f_ctrl_T_7 @[Control.scala 237:25]
    f_ctrl[4] <= _f_ctrl_T_9 @[Control.scala 237:25]
    f_ctrl[5] <= _f_ctrl_T_11 @[Control.scala 237:25]
    f_ctrl[6] <= _f_ctrl_T_13 @[Control.scala 237:25]
    f_ctrl[7] <= _f_ctrl_T_15 @[Control.scala 237:25]
    f_ctrl[8] <= _f_ctrl_T_17 @[Control.scala 237:25]
    f_ctrl[9] <= _f_ctrl_T_19 @[Control.scala 237:25]
    f_ctrl[10] <= _f_ctrl_T_21 @[Control.scala 237:25]
    f_ctrl[11] <= _f_ctrl_T_23 @[Control.scala 237:25]
    f_ctrl[12] <= _f_ctrl_T_25 @[Control.scala 237:25]
    f_ctrl[13] <= _f_ctrl_T_27 @[Control.scala 237:25]
    f_ctrl[14] <= _f_ctrl_T_29 @[Control.scala 237:25]
    f_ctrl[15] <= _f_ctrl_T_31 @[Control.scala 237:25]
    f_ctrl[16] <= _f_ctrl_T_33 @[Control.scala 237:25]
    f_ctrl[17] <= _f_ctrl_T_35 @[Control.scala 237:25]
    f_ctrl[18] <= _f_ctrl_T_37 @[Control.scala 237:25]
    f_ctrl[19] <= _f_ctrl_T_39 @[Control.scala 237:25]
    f_ctrl[20] <= _f_ctrl_T_41 @[Control.scala 237:25]
    f_ctrl[21] <= _f_ctrl_T_43 @[Control.scala 237:25]
    f_ctrl[22] <= _f_ctrl_T_45 @[Control.scala 237:25]
    f_ctrl[23] <= _f_ctrl_T_47 @[Control.scala 237:25]
    f_ctrl[24] <= _f_ctrl_T_49 @[Control.scala 237:25]
    f_ctrl[25] <= _f_ctrl_T_51 @[Control.scala 237:25]
    node _io_f_read_0_T = or(f_ctrl[2], f_ctrl[3]) @[Control.scala 273:18]
    node _io_f_read_0_T_1 = or(_io_f_read_0_T, f_ctrl[4]) @[Control.scala 273:18]
    node _io_f_read_0_T_2 = or(_io_f_read_0_T_1, f_ctrl[5]) @[Control.scala 273:18]
    node _io_f_read_0_T_3 = or(_io_f_read_0_T_2, f_ctrl[6]) @[Control.scala 273:18]
    node _io_f_read_0_T_4 = or(_io_f_read_0_T_3, f_ctrl[7]) @[Control.scala 273:18]
    node _io_f_read_0_T_5 = or(_io_f_read_0_T_4, f_ctrl[8]) @[Control.scala 273:18]
    node _io_f_read_0_T_6 = or(_io_f_read_0_T_5, f_ctrl[9]) @[Control.scala 273:18]
    node _io_f_read_0_T_7 = or(_io_f_read_0_T_6, f_ctrl[10]) @[Control.scala 273:18]
    node _io_f_read_0_T_8 = or(_io_f_read_0_T_7, f_ctrl[11]) @[Control.scala 273:18]
    node _io_f_read_0_T_9 = or(_io_f_read_0_T_8, f_ctrl[12]) @[Control.scala 273:18]
    node _io_f_read_0_T_10 = or(_io_f_read_0_T_9, f_ctrl[13]) @[Control.scala 273:18]
    node _io_f_read_0_T_11 = or(_io_f_read_0_T_10, f_ctrl[14]) @[Control.scala 273:18]
    node _io_f_read_0_T_12 = or(_io_f_read_0_T_11, f_ctrl[15]) @[Control.scala 273:18]
    node _io_f_read_0_T_13 = or(_io_f_read_0_T_12, f_ctrl[16]) @[Control.scala 273:18]
    node _io_f_read_0_T_14 = or(_io_f_read_0_T_13, f_ctrl[17]) @[Control.scala 273:18]
    node _io_f_read_0_T_15 = or(_io_f_read_0_T_14, f_ctrl[18]) @[Control.scala 273:18]
    node _io_f_read_0_T_16 = or(_io_f_read_0_T_15, f_ctrl[19]) @[Control.scala 273:18]
    node _io_f_read_0_T_17 = or(_io_f_read_0_T_16, f_ctrl[20]) @[Control.scala 273:18]
    node _io_f_read_0_T_18 = or(_io_f_read_0_T_17, f_ctrl[21]) @[Control.scala 273:18]
    node _io_f_read_0_T_19 = or(_io_f_read_0_T_18, f_ctrl[22]) @[Control.scala 273:18]
    io.f_read[0] <= _io_f_read_0_T_19 @[Control.scala 271:32]
    node _io_f_read_1_T = or(f_ctrl[1], f_ctrl[2]) @[Control.scala 273:18]
    node _io_f_read_1_T_1 = or(_io_f_read_1_T, f_ctrl[3]) @[Control.scala 273:18]
    node _io_f_read_1_T_2 = or(_io_f_read_1_T_1, f_ctrl[4]) @[Control.scala 273:18]
    node _io_f_read_1_T_3 = or(_io_f_read_1_T_2, f_ctrl[5]) @[Control.scala 273:18]
    node _io_f_read_1_T_4 = or(_io_f_read_1_T_3, f_ctrl[6]) @[Control.scala 273:18]
    node _io_f_read_1_T_5 = or(_io_f_read_1_T_4, f_ctrl[7]) @[Control.scala 273:18]
    node _io_f_read_1_T_6 = or(_io_f_read_1_T_5, f_ctrl[8]) @[Control.scala 273:18]
    node _io_f_read_1_T_7 = or(_io_f_read_1_T_6, f_ctrl[9]) @[Control.scala 273:18]
    node _io_f_read_1_T_8 = or(_io_f_read_1_T_7, f_ctrl[11]) @[Control.scala 273:18]
    node _io_f_read_1_T_9 = or(_io_f_read_1_T_8, f_ctrl[12]) @[Control.scala 273:18]
    node _io_f_read_1_T_10 = or(_io_f_read_1_T_9, f_ctrl[13]) @[Control.scala 273:18]
    node _io_f_read_1_T_11 = or(_io_f_read_1_T_10, f_ctrl[14]) @[Control.scala 273:18]
    node _io_f_read_1_T_12 = or(_io_f_read_1_T_11, f_ctrl[15]) @[Control.scala 273:18]
    node _io_f_read_1_T_13 = or(_io_f_read_1_T_12, f_ctrl[19]) @[Control.scala 273:18]
    node _io_f_read_1_T_14 = or(_io_f_read_1_T_13, f_ctrl[20]) @[Control.scala 273:18]
    node _io_f_read_1_T_15 = or(_io_f_read_1_T_14, f_ctrl[21]) @[Control.scala 273:18]
    io.f_read[1] <= _io_f_read_1_T_15 @[Control.scala 271:32]
    node _io_f_read_2_T = or(f_ctrl[2], f_ctrl[3]) @[Control.scala 273:18]
    node _io_f_read_2_T_1 = or(_io_f_read_2_T, f_ctrl[4]) @[Control.scala 273:18]
    node _io_f_read_2_T_2 = or(_io_f_read_2_T_1, f_ctrl[5]) @[Control.scala 273:18]
    io.f_read[2] <= _io_f_read_2_T_2 @[Control.scala 271:32]
    node _io_f_wr_T = or(f_ctrl[0], f_ctrl[2]) @[Control.scala 280:16]
    node _io_f_wr_T_1 = or(_io_f_wr_T, f_ctrl[3]) @[Control.scala 280:16]
    node _io_f_wr_T_2 = or(_io_f_wr_T_1, f_ctrl[4]) @[Control.scala 280:16]
    node _io_f_wr_T_3 = or(_io_f_wr_T_2, f_ctrl[5]) @[Control.scala 280:16]
    node _io_f_wr_T_4 = or(_io_f_wr_T_3, f_ctrl[6]) @[Control.scala 280:16]
    node _io_f_wr_T_5 = or(_io_f_wr_T_4, f_ctrl[7]) @[Control.scala 280:16]
    node _io_f_wr_T_6 = or(_io_f_wr_T_5, f_ctrl[8]) @[Control.scala 280:16]
    node _io_f_wr_T_7 = or(_io_f_wr_T_6, f_ctrl[9]) @[Control.scala 280:16]
    node _io_f_wr_T_8 = or(_io_f_wr_T_7, f_ctrl[10]) @[Control.scala 280:16]
    node _io_f_wr_T_9 = or(_io_f_wr_T_8, f_ctrl[11]) @[Control.scala 280:16]
    node _io_f_wr_T_10 = or(_io_f_wr_T_9, f_ctrl[12]) @[Control.scala 280:16]
    node _io_f_wr_T_11 = or(_io_f_wr_T_10, f_ctrl[13]) @[Control.scala 280:16]
    node _io_f_wr_T_12 = or(_io_f_wr_T_11, f_ctrl[14]) @[Control.scala 280:16]
    node _io_f_wr_T_13 = or(_io_f_wr_T_12, f_ctrl[15]) @[Control.scala 280:16]
    node _io_f_wr_T_14 = or(_io_f_wr_T_13, f_ctrl[23]) @[Control.scala 280:16]
    node _io_f_wr_T_15 = or(_io_f_wr_T_14, f_ctrl[24]) @[Control.scala 280:16]
    node _io_f_wr_T_16 = or(_io_f_wr_T_15, f_ctrl[25]) @[Control.scala 280:16]
    io.f_wr <= _io_f_wr_T_16 @[Control.scala 276:17]

  module Registers :
    input clock : Clock
    input reset : Reset
    output io : { flip readAddress : UInt<5>[3], flip writeEnable : UInt<1>[2], flip writeAddress : UInt<5>, flip writeData : UInt<32>, flip f_read : UInt<1>[3], readData : UInt<32>[3]}

    wire _i_reg_WIRE : UInt<32>[32] @[Registers.scala 17:30]
    _i_reg_WIRE[0] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[1] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[2] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[3] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[4] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[5] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[6] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[7] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[8] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[9] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[10] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[11] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[12] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[13] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[14] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[15] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[16] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[17] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[18] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[19] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[20] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[21] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[22] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[23] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[24] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[25] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[26] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[27] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[28] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[29] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[30] <= UInt<32>("h0") @[Registers.scala 17:30]
    _i_reg_WIRE[31] <= UInt<32>("h0") @[Registers.scala 17:30]
    reg i_reg : UInt<32>[32], clock with :
      reset => (reset, _i_reg_WIRE) @[Registers.scala 17:22]
    reg f_reg : UInt<32>[32], clock with :
      reset => (UInt<1>("h0"), f_reg) @[Registers.scala 18:30]
    node _T = neq(io.writeAddress, UInt<1>("h0")) @[Registers.scala 20:47]
    node _T_1 = and(io.writeEnable[0], _T) @[Registers.scala 20:27]
    when _T_1 : @[Registers.scala 20:57]
      i_reg[io.writeAddress] <= io.writeData @[Registers.scala 21:28]
    when io.writeEnable[1] : @[Registers.scala 25:30]
      f_reg[io.writeAddress] <= io.writeData @[Registers.scala 26:34]
    node _io_readData_0_T = neq(io.readAddress[0], UInt<1>("h0")) @[Registers.scala 35:26]
    node _io_readData_0_T_1 = mux(_io_readData_0_T, i_reg[io.readAddress[0]], UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_readData_0_T_2 = mux(io.f_read[0], f_reg[io.readAddress[0]], _io_readData_0_T_1) @[Mux.scala 101:16]
    io.readData[0] <= _io_readData_0_T_2 @[Registers.scala 31:20]
    node _io_readData_1_T = neq(io.readAddress[1], UInt<1>("h0")) @[Registers.scala 35:26]
    node _io_readData_1_T_1 = mux(_io_readData_1_T, i_reg[io.readAddress[1]], UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_readData_1_T_2 = mux(io.f_read[1], f_reg[io.readAddress[1]], _io_readData_1_T_1) @[Mux.scala 101:16]
    io.readData[1] <= _io_readData_1_T_2 @[Registers.scala 31:20]
    node _io_readData_2_T = mux(io.f_read[2], f_reg[io.readAddress[2]], UInt<1>("h0")) @[Registers.scala 39:26]
    io.readData[2] <= _io_readData_2_T @[Registers.scala 39:20]

  module ImmediateGen :
    input clock : Clock
    input reset : Reset
    output io : { flip instruction : UInt<32>, out : UInt<32>}

    node opcode = bits(io.instruction, 6, 0) @[ImmediateGen.scala 11:30]
    node _T = eq(opcode, UInt<2>("h3")) @[ImmediateGen.scala 15:12]
    node _T_1 = eq(opcode, UInt<4>("hf")) @[ImmediateGen.scala 15:30]
    node _T_2 = or(_T, _T_1) @[ImmediateGen.scala 15:20]
    node _T_3 = eq(opcode, UInt<5>("h13")) @[ImmediateGen.scala 15:49]
    node _T_4 = or(_T_2, _T_3) @[ImmediateGen.scala 15:39]
    node _T_5 = eq(opcode, UInt<5>("h1b")) @[ImmediateGen.scala 15:68]
    node _T_6 = or(_T_4, _T_5) @[ImmediateGen.scala 15:58]
    node _T_7 = eq(opcode, UInt<7>("h67")) @[ImmediateGen.scala 15:87]
    node _T_8 = or(_T_6, _T_7) @[ImmediateGen.scala 15:77]
    node _T_9 = eq(opcode, UInt<7>("h73")) @[ImmediateGen.scala 15:107]
    node _T_10 = or(_T_8, _T_9) @[ImmediateGen.scala 15:97]
    node _T_11 = eq(opcode, UInt<3>("h7")) @[ImmediateGen.scala 16:24]
    node _T_12 = or(_T_10, _T_11) @[ImmediateGen.scala 16:5]
    when _T_12 : @[ImmediateGen.scala 17:5]
      node imm_i = bits(io.instruction, 31, 20) @[ImmediateGen.scala 18:31]
      node _ext_i_T = bits(imm_i, 11, 11) @[ImmediateGen.scala 19:35]
      node _ext_i_T_1 = bits(_ext_i_T, 0, 0) @[Bitwise.scala 77:15]
      node _ext_i_T_2 = mux(_ext_i_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
      node ext_i = cat(_ext_i_T_2, imm_i) @[Cat.scala 33:92]
      io.out <= ext_i @[ImmediateGen.scala 20:12]
    else :
      node _T_13 = eq(opcode, UInt<5>("h17")) @[ImmediateGen.scala 24:20]
      node _T_14 = eq(opcode, UInt<6>("h37")) @[ImmediateGen.scala 24:39]
      node _T_15 = or(_T_13, _T_14) @[ImmediateGen.scala 24:29]
      when _T_15 : @[ImmediateGen.scala 24:49]
        node imm_u = bits(io.instruction, 31, 12) @[ImmediateGen.scala 25:31]
        node _ext_u_T = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 77:12]
        node ext_u = cat(imm_u, _ext_u_T) @[Cat.scala 33:92]
        io.out <= ext_u @[ImmediateGen.scala 27:12]
      else :
        node _T_16 = eq(opcode, UInt<6>("h23")) @[ImmediateGen.scala 31:13]
        node _T_17 = eq(opcode, UInt<6>("h27")) @[ImmediateGen.scala 32:23]
        node _T_18 = or(_T_16, _T_17) @[ImmediateGen.scala 32:5]
        when _T_18 : @[ImmediateGen.scala 33:5]
          node _imm_s_T = bits(io.instruction, 31, 25) @[ImmediateGen.scala 34:35]
          node _imm_s_T_1 = bits(io.instruction, 11, 7) @[ImmediateGen.scala 34:59]
          node imm_s = cat(_imm_s_T, _imm_s_T_1) @[Cat.scala 33:92]
          node _ext_s_T = bits(imm_s, 11, 11) @[ImmediateGen.scala 35:35]
          node _ext_s_T_1 = bits(_ext_s_T, 0, 0) @[Bitwise.scala 77:15]
          node _ext_s_T_2 = mux(_ext_s_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
          node ext_s = cat(_ext_s_T_2, imm_s) @[Cat.scala 33:92]
          io.out <= ext_s @[ImmediateGen.scala 36:12]
        else :
          node _T_19 = eq(opcode, UInt<7>("h63")) @[ImmediateGen.scala 39:20]
          when _T_19 : @[ImmediateGen.scala 39:30]
            node _imm_sb_T = bits(io.instruction, 31, 31) @[ImmediateGen.scala 41:21]
            node _imm_sb_T_1 = bits(io.instruction, 7, 7) @[ImmediateGen.scala 42:21]
            node _imm_sb_T_2 = bits(io.instruction, 30, 25) @[ImmediateGen.scala 43:21]
            node _imm_sb_T_3 = bits(io.instruction, 11, 8) @[ImmediateGen.scala 44:21]
            node imm_sb_lo = cat(_imm_sb_T_2, _imm_sb_T_3) @[Cat.scala 33:92]
            node imm_sb_hi = cat(_imm_sb_T, _imm_sb_T_1) @[Cat.scala 33:92]
            node imm_sb = cat(imm_sb_hi, imm_sb_lo) @[Cat.scala 33:92]
            node _ext_sb_T = bits(imm_sb, 11, 11) @[ImmediateGen.scala 46:37]
            node _ext_sb_T_1 = bits(_ext_sb_T, 0, 0) @[Bitwise.scala 77:15]
            node _ext_sb_T_2 = mux(_ext_sb_T_1, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 77:12]
            node ext_sb_hi = cat(_ext_sb_T_2, imm_sb) @[Cat.scala 33:92]
            node ext_sb = cat(ext_sb_hi, UInt<1>("h0")) @[Cat.scala 33:92]
            io.out <= ext_sb @[ImmediateGen.scala 47:12]
          else :
            node _imm_uj_T = bits(io.instruction, 31, 31) @[ImmediateGen.scala 53:21]
            node _imm_uj_T_1 = bits(io.instruction, 19, 12) @[ImmediateGen.scala 54:21]
            node _imm_uj_T_2 = bits(io.instruction, 20, 20) @[ImmediateGen.scala 55:21]
            node _imm_uj_T_3 = bits(io.instruction, 30, 21) @[ImmediateGen.scala 56:21]
            node imm_uj_lo = cat(_imm_uj_T_2, _imm_uj_T_3) @[Cat.scala 33:92]
            node imm_uj_hi = cat(_imm_uj_T, _imm_uj_T_1) @[Cat.scala 33:92]
            node imm_uj = cat(imm_uj_hi, imm_uj_lo) @[Cat.scala 33:92]
            node _ext_uj_T = bits(imm_uj, 19, 19) @[ImmediateGen.scala 58:37]
            node _ext_uj_T_1 = bits(_ext_uj_T, 0, 0) @[Bitwise.scala 77:15]
            node _ext_uj_T_2 = mux(_ext_uj_T_1, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 77:12]
            node ext_uj_hi = cat(_ext_uj_T_2, imm_uj) @[Cat.scala 33:92]
            node ext_uj = cat(ext_uj_hi, UInt<1>("h0")) @[Cat.scala 33:92]
            io.out <= ext_uj @[ImmediateGen.scala 59:12]


  module BranchUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip branch : UInt<1>, flip funct3 : UInt<3>, flip rd1 : UInt<32>, flip rd2 : UInt<32>, flip take_branch : UInt<1>, taken : UInt<1>}

    io.taken is invalid @[BranchUnit.scala 16:12]
    wire check : UInt<1> @[BranchUnit.scala 18:25]
    check is invalid @[BranchUnit.scala 19:9]
    node _T = eq(UInt<1>("h0"), io.funct3) @[BranchUnit.scala 21:21]
    when _T : @[BranchUnit.scala 21:21]
      node _check_T = eq(io.rd1, io.rd2) @[BranchUnit.scala 22:32]
      check <= _check_T @[BranchUnit.scala 22:21]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.funct3) @[BranchUnit.scala 21:21]
      when _T_1 : @[BranchUnit.scala 21:21]
        node _check_T_1 = neq(io.rd1, io.rd2) @[BranchUnit.scala 23:32]
        check <= _check_T_1 @[BranchUnit.scala 23:21]
      else :
        node _T_2 = eq(UInt<3>("h4"), io.funct3) @[BranchUnit.scala 21:21]
        when _T_2 : @[BranchUnit.scala 21:21]
          node _check_T_2 = asSInt(io.rd1) @[BranchUnit.scala 24:32]
          node _check_T_3 = asSInt(io.rd2) @[BranchUnit.scala 24:48]
          node _check_T_4 = lt(_check_T_2, _check_T_3) @[BranchUnit.scala 24:39]
          check <= _check_T_4 @[BranchUnit.scala 24:21]
        else :
          node _T_3 = eq(UInt<3>("h5"), io.funct3) @[BranchUnit.scala 21:21]
          when _T_3 : @[BranchUnit.scala 21:21]
            node _check_T_5 = asSInt(io.rd1) @[BranchUnit.scala 25:32]
            node _check_T_6 = asSInt(io.rd2) @[BranchUnit.scala 25:49]
            node _check_T_7 = geq(_check_T_5, _check_T_6) @[BranchUnit.scala 25:39]
            check <= _check_T_7 @[BranchUnit.scala 25:21]
          else :
            node _T_4 = eq(UInt<3>("h6"), io.funct3) @[BranchUnit.scala 21:21]
            when _T_4 : @[BranchUnit.scala 21:21]
              node _check_T_8 = lt(io.rd1, io.rd2) @[BranchUnit.scala 26:32]
              check <= _check_T_8 @[BranchUnit.scala 26:21]
            else :
              node _T_5 = eq(UInt<3>("h7"), io.funct3) @[BranchUnit.scala 21:21]
              when _T_5 : @[BranchUnit.scala 21:21]
                node _check_T_9 = geq(io.rd1, io.rd2) @[BranchUnit.scala 27:32]
                check <= _check_T_9 @[BranchUnit.scala 27:21]
    node _io_taken_T = and(check, io.branch) @[BranchUnit.scala 30:21]
    node _io_taken_T_1 = and(_io_taken_T, io.take_branch) @[BranchUnit.scala 30:33]
    io.taken <= _io_taken_T_1 @[BranchUnit.scala 30:12]

  module InstructionDecode :
    input clock : Clock
    input reset : Reset
    output io : { flip id_instruction : UInt<32>, flip writeData : UInt<32>, flip writeReg : UInt<5>, flip pcAddress : UInt<32>, flip ctl_writeEnable : UInt<1>[2], flip id_ex_mem_read : UInt<1>, flip ex_mem_mem_read : UInt<1>, flip dmem_resp_valid : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_ex_branch : UInt<1>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ex_ins : UInt<32>, flip ex_result : UInt<32>, flip ex_mem_result : UInt<32>, flip mem_wb_result : UInt<32>, flip id_ex_regWr : UInt<1>, flip ex_mem_regWr : UInt<1>, flip csr_Ex : UInt<1>, flip csr_Mem : UInt<1>, flip csr_Wb : UInt<1>, flip csr_Ex_data : UInt<32>, flip csr_Mem_data : UInt<32>, flip csr_Wb_data : UInt<32>, flip dmem_data : UInt<32>, flip ex_stall : UInt<1>, immediate : UInt<32>, writeRegAddress : UInt<5>, readData1 : UInt<32>, readData2 : UInt<32>, func7 : UInt<7>, func3 : UInt<3>, ctl_aluSrc : UInt<1>, ctl_memToReg : UInt<2>, ctl_regWrite : UInt<1>[2], ctl_memRead : UInt<1>, ctl_memWrite : UInt<1>, ctl_branch : UInt<1>, ctl_aluOp : UInt<2>, ctl_jump : UInt<2>, ctl_aluSrc1 : UInt<2>, hdu_pcWrite : UInt<1>, hdu_if_reg_write : UInt<1>, pcSrc : UInt<1>, pcPlusOffset : UInt<32>, ifid_flush : UInt<1>, stall : UInt<1>, flip csr_i_misa : UInt<32>, flip csr_i_mhartid : UInt<32>, csr_o_data : UInt<32>, is_csr : UInt<1>, fcsr_o_data : UInt<32>, flip f_read_reg : UInt<1>[2][3], flip f_except : UInt<1>[5][3], flip is_f_in : UInt<1>[3], f_read : UInt<1>[3], readData3 : UInt<32>, is_f : UInt<1>, raddr : UInt<5>[3], rd_wdata : UInt<32>}

    wire is_f : UInt<1> @[InstructionDecode.scala 88:34]
    is_f <= UInt<1>("h0") @[InstructionDecode.scala 88:34]
    node _is_f_T = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_1 = eq(_is_f_T, UInt<3>("h7")) @[InstructionDecode.scala 98:35]
    node _is_f_T_2 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_3 = eq(_is_f_T_2, UInt<6>("h27")) @[InstructionDecode.scala 98:35]
    node _is_f_T_4 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_5 = eq(_is_f_T_4, UInt<7>("h43")) @[InstructionDecode.scala 98:35]
    node _is_f_T_6 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_7 = eq(_is_f_T_6, UInt<7>("h47")) @[InstructionDecode.scala 98:35]
    node _is_f_T_8 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_9 = eq(_is_f_T_8, UInt<7>("h4b")) @[InstructionDecode.scala 98:35]
    node _is_f_T_10 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_11 = eq(_is_f_T_10, UInt<7>("h4f")) @[InstructionDecode.scala 98:35]
    node _is_f_T_12 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 98:28]
    node _is_f_T_13 = eq(_is_f_T_12, UInt<7>("h53")) @[InstructionDecode.scala 98:35]
    node _is_f_T_14 = or(_is_f_T_1, _is_f_T_3) @[InstructionDecode.scala 98:53]
    node _is_f_T_15 = or(_is_f_T_14, _is_f_T_5) @[InstructionDecode.scala 98:53]
    node _is_f_T_16 = or(_is_f_T_15, _is_f_T_7) @[InstructionDecode.scala 98:53]
    node _is_f_T_17 = or(_is_f_T_16, _is_f_T_9) @[InstructionDecode.scala 98:53]
    node _is_f_T_18 = or(_is_f_T_17, _is_f_T_11) @[InstructionDecode.scala 98:53]
    node _is_f_T_19 = or(_is_f_T_18, _is_f_T_13) @[InstructionDecode.scala 98:53]
    is_f <= _is_f_T_19 @[InstructionDecode.scala 90:14]
    io.is_f <= is_f @[InstructionDecode.scala 99:17]
    inst csr of CSR @[InstructionDecode.scala 103:35]
    csr.clock <= clock
    csr.reset <= reset
    csr.io.i_misa_value <= io.csr_i_misa @[InstructionDecode.scala 105:37]
    csr.io.i_mhartid_value <= io.csr_i_mhartid @[InstructionDecode.scala 106:37]
    node _csr_io_i_imm_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 107:57]
    csr.io.i_imm <= _csr_io_i_imm_T @[InstructionDecode.scala 107:37]
    node _csr_io_i_opr_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 108:57]
    csr.io.i_opr <= _csr_io_i_opr_T @[InstructionDecode.scala 108:37]
    node _csr_io_i_addr_T = bits(io.id_instruction, 31, 20) @[InstructionDecode.scala 109:57]
    csr.io.i_addr <= _csr_io_i_addr_T @[InstructionDecode.scala 109:37]
    node _csr_io_i_w_en_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 110:75]
    node _csr_io_i_w_en_T_1 = neq(_csr_io_i_w_en_T, UInt<1>("h0")) @[InstructionDecode.scala 110:84]
    node _csr_io_i_w_en_T_2 = and(io.is_csr, _csr_io_i_w_en_T_1) @[InstructionDecode.scala 110:54]
    csr.io.i_w_en <= _csr_io_i_w_en_T_2 @[InstructionDecode.scala 110:37]
    csr.io.f_except <= io.f_except[2] @[InstructionDecode.scala 111:37]
    node _io_is_csr_T = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 113:57]
    node _io_is_csr_T_1 = eq(_io_is_csr_T, UInt<7>("h73")) @[InstructionDecode.scala 113:64]
    io.is_csr <= _io_is_csr_T_1 @[InstructionDecode.scala 113:37]
    node _io_csr_o_data_T = bits(io.id_instruction, 31, 20) @[InstructionDecode.scala 115:61]
    node _io_csr_o_data_T_1 = eq(_io_csr_o_data_T, UInt<1>("h1")) @[InstructionDecode.scala 115:70]
    node _io_csr_o_data_T_2 = bits(io.id_instruction, 31, 20) @[InstructionDecode.scala 115:100]
    node _io_csr_o_data_T_3 = eq(_io_csr_o_data_T_2, UInt<2>("h3")) @[InstructionDecode.scala 115:109]
    node _io_csr_o_data_T_4 = or(_io_csr_o_data_T_1, _io_csr_o_data_T_3) @[InstructionDecode.scala 115:79]
    node io_csr_o_data_lo = cat(io.f_except[0][1], io.f_except[0][0]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi_hi = cat(io.f_except[0][4], io.f_except[0][3]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi = cat(io_csr_o_data_hi_hi, io.f_except[0][2]) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_5 = cat(io_csr_o_data_hi, io_csr_o_data_lo) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_6 = mux(io.is_f_in[0], _io_csr_o_data_T_5, UInt<1>("h0")) @[InstructionDecode.scala 116:52]
    node io_csr_o_data_lo_1 = cat(io.f_except[1][1], io.f_except[1][0]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi_hi_1 = cat(io.f_except[1][4], io.f_except[1][3]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi_1 = cat(io_csr_o_data_hi_hi_1, io.f_except[1][2]) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_7 = cat(io_csr_o_data_hi_1, io_csr_o_data_lo_1) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_8 = mux(io.is_f_in[1], _io_csr_o_data_T_7, UInt<1>("h0")) @[InstructionDecode.scala 116:52]
    node io_csr_o_data_lo_2 = cat(io.f_except[2][1], io.f_except[2][0]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi_hi_2 = cat(io.f_except[2][4], io.f_except[2][3]) @[InstructionDecode.scala 116:91]
    node io_csr_o_data_hi_2 = cat(io_csr_o_data_hi_hi_2, io.f_except[2][2]) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_9 = cat(io_csr_o_data_hi_2, io_csr_o_data_lo_2) @[InstructionDecode.scala 116:91]
    node _io_csr_o_data_T_10 = mux(io.is_f_in[2], _io_csr_o_data_T_9, UInt<1>("h0")) @[InstructionDecode.scala 116:52]
    node _io_csr_o_data_T_11 = or(_io_csr_o_data_T_6, _io_csr_o_data_T_8) @[InstructionDecode.scala 117:53]
    node _io_csr_o_data_T_12 = or(_io_csr_o_data_T_11, _io_csr_o_data_T_10) @[InstructionDecode.scala 117:53]
    node _io_csr_o_data_T_13 = or(csr.io.o_data, _io_csr_o_data_T_12) @[InstructionDecode.scala 115:141]
    node _io_csr_o_data_T_14 = mux(_io_csr_o_data_T_4, _io_csr_o_data_T_13, csr.io.o_data) @[Mux.scala 101:16]
    io.csr_o_data <= _io_csr_o_data_T_14 @[InstructionDecode.scala 114:37]
    io.fcsr_o_data <= csr.io.fcsr_o_data @[InstructionDecode.scala 119:37]
    inst csrController of CSRController @[InstructionDecode.scala 122:45]
    csrController.clock <= clock
    csrController.reset <= reset
    csrController.io.regWrExecute <= io.id_ex_regWr @[InstructionDecode.scala 124:42]
    csrController.io.rdSelExecute <= io.id_ex_rd @[InstructionDecode.scala 125:42]
    csrController.io.csrWrExecute <= io.csr_Ex @[InstructionDecode.scala 126:42]
    csrController.io.regWrMemory <= io.ex_mem_regWr @[InstructionDecode.scala 127:42]
    csrController.io.rdSelMemory <= io.ex_mem_rd @[InstructionDecode.scala 128:42]
    csrController.io.csrWrMemory <= io.csr_Mem @[InstructionDecode.scala 129:42]
    csrController.io.regWrWriteback <= io.ctl_writeEnable[0] @[InstructionDecode.scala 130:42]
    csrController.io.rdSelWriteback <= io.writeReg @[InstructionDecode.scala 131:42]
    csrController.io.csrWrWriteback <= io.csr_Wb @[InstructionDecode.scala 132:42]
    node _csrController_io_rs1SelDecode_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 133:62]
    csrController.io.rs1SelDecode <= _csrController_io_rs1SelDecode_T @[InstructionDecode.scala 133:42]
    node _csrController_io_csrInstDecode_T = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 134:62]
    node _csrController_io_csrInstDecode_T_1 = eq(_csrController_io_csrInstDecode_T, UInt<7>("h73")) @[InstructionDecode.scala 134:69]
    csrController.io.csrInstDecode <= _csrController_io_csrInstDecode_T_1 @[InstructionDecode.scala 134:42]
    csrController.io.csrInstIsImmd <= UInt<1>("h0") @[InstructionDecode.scala 135:42]
    inst hdu of HazardUnit @[InstructionDecode.scala 139:19]
    hdu.clock <= clock
    hdu.reset <= reset
    hdu.io.dmem_resp_valid <= io.dmem_resp_valid @[InstructionDecode.scala 140:26]
    hdu.io.id_ex_memRead <= io.id_ex_mem_read @[InstructionDecode.scala 141:24]
    hdu.io.ex_mem_memRead <= io.ex_mem_mem_read @[InstructionDecode.scala 142:25]
    hdu.io.id_ex_rd <= io.id_ex_rd @[InstructionDecode.scala 143:19]
    hdu.io.id_ex_branch <= io.id_ex_branch @[InstructionDecode.scala 144:23]
    hdu.io.ex_mem_rd <= io.ex_mem_rd @[InstructionDecode.scala 145:20]
    node _hdu_io_id_rs1_T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 146:37]
    hdu.io.id_rs1 <= _hdu_io_id_rs1_T @[InstructionDecode.scala 146:17]
    node _hdu_io_id_rs2_T = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 147:37]
    hdu.io.id_rs2 <= _hdu_io_id_rs2_T @[InstructionDecode.scala 147:17]
    hdu.io.jump <= io.ctl_jump @[InstructionDecode.scala 148:15]
    hdu.io.branch <= io.ctl_branch @[InstructionDecode.scala 149:17]
    io.hdu_pcWrite <= hdu.io.pc_write @[InstructionDecode.scala 150:18]
    io.hdu_if_reg_write <= hdu.io.if_reg_write @[InstructionDecode.scala 151:23]
    inst control of Control @[InstructionDecode.scala 154:23]
    control.clock <= clock
    control.reset <= reset
    control.io.in <= io.id_instruction @[InstructionDecode.scala 155:17]
    io.ctl_aluOp <= control.io.aluOp @[InstructionDecode.scala 156:16]
    io.ctl_aluSrc <= control.io.aluSrc @[InstructionDecode.scala 157:17]
    io.ctl_aluSrc1 <= control.io.aluSrc1 @[InstructionDecode.scala 158:18]
    io.ctl_branch <= control.io.branch @[InstructionDecode.scala 159:17]
    io.ctl_memRead <= control.io.memRead @[InstructionDecode.scala 160:18]
    io.ctl_memToReg <= control.io.memToReg @[InstructionDecode.scala 161:19]
    io.ctl_jump <= control.io.jump @[InstructionDecode.scala 162:15]
    node _T = neq(io.id_instruction, UInt<5>("h13")) @[InstructionDecode.scala 163:44]
    node _T_1 = and(hdu.io.ctl_mux, _T) @[InstructionDecode.scala 163:23]
    when _T_1 : @[InstructionDecode.scala 163:57]
      io.ctl_memWrite <= control.io.memWrite @[InstructionDecode.scala 164:21]
      io.ctl_regWrite[0] <= control.io.regWrite @[InstructionDecode.scala 165:24]
    else :
      io.ctl_memWrite <= UInt<1>("h0") @[InstructionDecode.scala 167:21]
      io.ctl_regWrite[0] <= UInt<1>("h0") @[InstructionDecode.scala 168:24]
    node _io_ctl_regWrite_1_T = neq(io.id_instruction, UInt<5>("h13")) @[InstructionDecode.scala 172:43]
    node _io_ctl_regWrite_1_T_1 = and(hdu.io.ctl_mux, _io_ctl_regWrite_1_T) @[InstructionDecode.scala 172:22]
    node _io_ctl_regWrite_1_T_2 = mux(_io_ctl_regWrite_1_T_1, control.io.f_wr, UInt<1>("h0")) @[InstructionDecode.scala 171:30]
    io.ctl_regWrite[1] <= _io_ctl_regWrite_1_T_2 @[InstructionDecode.scala 171:24]
    io.f_read <= control.io.f_read @[InstructionDecode.scala 176:19]
    inst registers of Registers @[InstructionDecode.scala 180:25]
    registers.clock <= clock
    registers.reset <= reset
    node registerRs1 = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 182:48]
    node registerRs2 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 183:38]
    node registerRs3 = bits(io.id_instruction, 31, 27) @[InstructionDecode.scala 184:50]
    wire readData1 : UInt<32> @[InstructionDecode.scala 185:27]
    readData1 <= UInt<32>("h0") @[InstructionDecode.scala 185:27]
    wire readData2 : UInt<32> @[InstructionDecode.scala 186:27]
    readData2 <= UInt<32>("h0") @[InstructionDecode.scala 186:27]
    node writeData = mux(io.csr_Wb, io.csr_Wb_data, io.writeData) @[InstructionDecode.scala 187:32]
    registers.io.readAddress[0] <= registerRs1 @[InstructionDecode.scala 188:31]
    registers.io.readAddress[1] <= registerRs2 @[InstructionDecode.scala 189:31]
    node _registers_io_writeEnable_0_T = eq(io.ex_stall, UInt<1>("h0")) @[InstructionDecode.scala 190:60]
    node _registers_io_writeEnable_0_T_1 = and(_registers_io_writeEnable_0_T, io.csr_Wb) @[InstructionDecode.scala 190:73]
    node _registers_io_writeEnable_0_T_2 = or(io.ctl_writeEnable[0], _registers_io_writeEnable_0_T_1) @[InstructionDecode.scala 190:56]
    registers.io.writeEnable[0] <= _registers_io_writeEnable_0_T_2 @[InstructionDecode.scala 190:31]
    registers.io.writeAddress <= io.writeReg @[InstructionDecode.scala 191:29]
    registers.io.writeData <= writeData @[InstructionDecode.scala 192:26]
    registers.io.readAddress[2] <= registerRs3 @[InstructionDecode.scala 194:33]
    registers.io.f_read <= control.io.f_read @[InstructionDecode.scala 195:29]
    registers.io.writeEnable[1] <= io.ctl_writeEnable[1] @[InstructionDecode.scala 196:33]
    node _T_2 = eq(io.writeReg, registerRs1) @[InstructionDecode.scala 201:18]
    node _T_3 = eq(control.io.f_read[0], UInt<1>("h0")) @[InstructionDecode.scala 203:40]
    node _T_4 = and(io.ctl_writeEnable[0], _T_3) @[InstructionDecode.scala 203:37]
    node _T_5 = and(io.ctl_writeEnable[1], control.io.f_read[0]) @[InstructionDecode.scala 203:93]
    node _T_6 = or(_T_4, _T_5) @[InstructionDecode.scala 203:67]
    node _T_7 = and(_T_2, _T_6) @[InstructionDecode.scala 202:5]
    when _T_7 : @[InstructionDecode.scala 206:5]
      node _T_8 = eq(registerRs1, UInt<1>("h0")) @[InstructionDecode.scala 208:20]
      node _T_9 = eq(control.io.f_read[0], UInt<1>("h0")) @[InstructionDecode.scala 209:18]
      node _T_10 = and(_T_8, _T_9) @[InstructionDecode.scala 209:7]
      when _T_10 : @[InstructionDecode.scala 210:7]
        readData1 <= UInt<1>("h0") @[InstructionDecode.scala 211:17]
      else :
        readData1 <= io.writeData @[InstructionDecode.scala 213:17]
    else :
      readData1 <= registers.io.readData[0] @[InstructionDecode.scala 216:15]
    io.readData1 <= readData1 @[InstructionDecode.scala 218:16]
    node _T_11 = eq(io.writeReg, registerRs2) @[InstructionDecode.scala 220:18]
    node _T_12 = eq(control.io.f_read[1], UInt<1>("h0")) @[InstructionDecode.scala 222:40]
    node _T_13 = and(io.ctl_writeEnable[0], _T_12) @[InstructionDecode.scala 222:37]
    node _T_14 = and(io.ctl_writeEnable[1], control.io.f_read[1]) @[InstructionDecode.scala 222:93]
    node _T_15 = or(_T_13, _T_14) @[InstructionDecode.scala 222:67]
    node _T_16 = and(_T_11, _T_15) @[InstructionDecode.scala 221:5]
    when _T_16 : @[InstructionDecode.scala 225:5]
      node _T_17 = eq(registerRs2, UInt<1>("h0")) @[InstructionDecode.scala 227:20]
      node _T_18 = eq(control.io.f_read[1], UInt<1>("h0")) @[InstructionDecode.scala 228:18]
      node _T_19 = and(_T_17, _T_18) @[InstructionDecode.scala 228:7]
      when _T_19 : @[InstructionDecode.scala 229:7]
        readData2 <= UInt<1>("h0") @[InstructionDecode.scala 230:17]
      else :
        readData2 <= io.writeData @[InstructionDecode.scala 232:17]
    else :
      readData2 <= registers.io.readData[1] @[InstructionDecode.scala 235:15]
    io.readData2 <= readData2 @[InstructionDecode.scala 237:16]
    node _io_readData3_T = eq(io.writeReg, registerRs3) @[InstructionDecode.scala 240:20]
    node _io_readData3_T_1 = and(io.ctl_writeEnable[1], control.io.f_read[2]) @[InstructionDecode.scala 240:67]
    node _io_readData3_T_2 = and(_io_readData3_T, _io_readData3_T_1) @[InstructionDecode.scala 240:41]
    node _io_readData3_T_3 = mux(_io_readData3_T_2, io.writeData, registers.io.readData[2]) @[InstructionDecode.scala 239:28]
    io.readData3 <= _io_readData3_T_3 @[InstructionDecode.scala 239:22]
    inst immediate of ImmediateGen @[InstructionDecode.scala 247:25]
    immediate.clock <= clock
    immediate.reset <= reset
    immediate.io.instruction <= io.id_instruction @[InstructionDecode.scala 248:28]
    io.immediate <= immediate.io.out @[InstructionDecode.scala 249:16]
    wire input1 : UInt<32> @[InstructionDecode.scala 252:20]
    wire input2 : UInt<32> @[InstructionDecode.scala 253:20]
    node _T_20 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 256:35]
    node _T_21 = eq(registerRs1, _T_20) @[InstructionDecode.scala 256:18]
    node _T_22 = eq(io.f_read_reg[1][0], UInt<1>("h0")) @[InstructionDecode.scala 257:16]
    node _T_23 = and(_T_21, _T_22) @[InstructionDecode.scala 257:5]
    when _T_23 : @[InstructionDecode.scala 258:5]
      input1 <= io.ex_mem_result @[InstructionDecode.scala 259:12]
    else :
      node _T_24 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 261:35]
      node _T_25 = eq(registerRs1, _T_24) @[InstructionDecode.scala 261:18]
      node _T_26 = eq(io.f_read_reg[2][0], UInt<1>("h0")) @[InstructionDecode.scala 262:16]
      node _T_27 = and(_T_25, _T_26) @[InstructionDecode.scala 262:5]
      when _T_27 : @[InstructionDecode.scala 263:5]
        input1 <= io.mem_wb_result @[InstructionDecode.scala 264:12]
      else :
        input1 <= readData1 @[InstructionDecode.scala 266:12]
    node _T_28 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 269:35]
    node _T_29 = eq(registerRs2, _T_28) @[InstructionDecode.scala 269:18]
    node _T_30 = eq(io.f_read_reg[1][1], UInt<1>("h0")) @[InstructionDecode.scala 270:16]
    node _T_31 = and(_T_29, _T_30) @[InstructionDecode.scala 270:5]
    when _T_31 : @[InstructionDecode.scala 271:5]
      input2 <= io.ex_mem_result @[InstructionDecode.scala 272:12]
    else :
      node _T_32 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 274:35]
      node _T_33 = eq(registerRs2, _T_32) @[InstructionDecode.scala 274:18]
      node _T_34 = eq(io.f_read_reg[2][1], UInt<1>("h0")) @[InstructionDecode.scala 275:16]
      node _T_35 = and(_T_33, _T_34) @[InstructionDecode.scala 275:5]
      when _T_35 : @[InstructionDecode.scala 276:5]
        input2 <= io.mem_wb_result @[InstructionDecode.scala 277:12]
      else :
        input2 <= readData2 @[InstructionDecode.scala 279:12]
    inst bu of BranchUnit @[InstructionDecode.scala 283:18]
    bu.clock <= clock
    bu.reset <= reset
    bu.io.branch <= io.ctl_branch @[InstructionDecode.scala 284:16]
    node _bu_io_funct3_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 285:36]
    bu.io.funct3 <= _bu_io_funct3_T @[InstructionDecode.scala 285:16]
    bu.io.rd1 <= input1 @[InstructionDecode.scala 286:13]
    bu.io.rd2 <= input2 @[InstructionDecode.scala 287:13]
    bu.io.take_branch <= hdu.io.take_branch @[InstructionDecode.scala 288:21]
    hdu.io.taken <= bu.io.taken @[InstructionDecode.scala 289:16]
    wire j_offset : UInt<32> @[InstructionDecode.scala 292:22]
    node _T_36 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 294:31]
    node _T_37 = eq(registerRs1, _T_36) @[InstructionDecode.scala 294:18]
    node _T_38 = eq(io.f_read_reg[0][0], UInt<1>("h0")) @[InstructionDecode.scala 295:16]
    node _T_39 = and(_T_37, _T_38) @[InstructionDecode.scala 295:5]
    when _T_39 : @[InstructionDecode.scala 296:5]
      j_offset <= io.ex_result @[InstructionDecode.scala 297:14]
    else :
      node _T_40 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 299:35]
      node _T_41 = eq(registerRs1, _T_40) @[InstructionDecode.scala 299:18]
      node _T_42 = eq(io.f_read_reg[1][0], UInt<1>("h0")) @[InstructionDecode.scala 300:16]
      node _T_43 = and(_T_41, _T_42) @[InstructionDecode.scala 300:5]
      when _T_43 : @[InstructionDecode.scala 301:5]
        j_offset <= io.ex_mem_result @[InstructionDecode.scala 302:14]
      else :
        node _T_44 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 304:35]
        node _T_45 = eq(registerRs1, _T_44) @[InstructionDecode.scala 304:18]
        node _T_46 = eq(io.f_read_reg[2][0], UInt<1>("h0")) @[InstructionDecode.scala 305:16]
        node _T_47 = and(_T_45, _T_46) @[InstructionDecode.scala 305:5]
        when _T_47 : @[InstructionDecode.scala 306:5]
          j_offset <= io.mem_wb_result @[InstructionDecode.scala 307:14]
        else :
          j_offset <= readData1 @[InstructionDecode.scala 309:14]
    node _T_48 = eq(io.ctl_jump, UInt<1>("h1")) @[InstructionDecode.scala 313:20]
    when _T_48 : @[InstructionDecode.scala 313:29]
      node _io_pcPlusOffset_T = add(io.pcAddress, io.immediate) @[InstructionDecode.scala 314:37]
      node _io_pcPlusOffset_T_1 = tail(_io_pcPlusOffset_T, 1) @[InstructionDecode.scala 314:37]
      io.pcPlusOffset <= _io_pcPlusOffset_T_1 @[InstructionDecode.scala 314:21]
    else :
      node _T_49 = eq(io.ctl_jump, UInt<2>("h2")) @[InstructionDecode.scala 315:26]
      when _T_49 : @[InstructionDecode.scala 315:35]
        node _io_pcPlusOffset_T_2 = add(j_offset, io.immediate) @[InstructionDecode.scala 316:35]
        node _io_pcPlusOffset_T_3 = tail(_io_pcPlusOffset_T_2, 1) @[InstructionDecode.scala 316:35]
        io.pcPlusOffset <= _io_pcPlusOffset_T_3 @[InstructionDecode.scala 316:23]
      else :
        node _io_pcPlusOffset_T_4 = add(io.pcAddress, immediate.io.out) @[InstructionDecode.scala 319:39]
        node _io_pcPlusOffset_T_5 = tail(_io_pcPlusOffset_T_4, 1) @[InstructionDecode.scala 319:39]
        io.pcPlusOffset <= _io_pcPlusOffset_T_5 @[InstructionDecode.scala 319:23]
    node _T_50 = neq(io.ctl_jump, UInt<1>("h0")) @[InstructionDecode.scala 322:36]
    node _T_51 = or(bu.io.taken, _T_50) @[InstructionDecode.scala 322:20]
    when _T_51 : @[InstructionDecode.scala 322:46]
      io.pcSrc <= UInt<1>("h1") @[InstructionDecode.scala 323:14]
    else :
      io.pcSrc <= UInt<1>("h0") @[InstructionDecode.scala 325:14]
    io.ifid_flush <= hdu.io.ifid_flush @[InstructionDecode.scala 329:17]
    node _io_writeRegAddress_T = bits(io.id_instruction, 11, 7) @[InstructionDecode.scala 331:42]
    io.writeRegAddress <= _io_writeRegAddress_T @[InstructionDecode.scala 331:22]
    node _io_func3_T = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 332:32]
    io.func3 <= _io_func3_T @[InstructionDecode.scala 332:12]
    node _T_52 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 334:23]
    node _T_53 = eq(_T_52, UInt<6>("h33")) @[InstructionDecode.scala 334:29]
    node _T_54 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 335:25]
    node _T_55 = eq(_T_54, UInt<5>("h13")) @[InstructionDecode.scala 335:31]
    node _T_56 = eq(io.func3, UInt<3>("h5")) @[InstructionDecode.scala 335:61]
    node _T_57 = and(_T_55, _T_56) @[InstructionDecode.scala 335:49]
    node _T_58 = or(_T_53, _T_57) @[InstructionDecode.scala 334:47]
    node _T_59 = bits(io.id_instruction, 6, 0) @[InstructionDecode.scala 336:27]
    node _T_60 = eq(_T_59, UInt<7>("h53")) @[InstructionDecode.scala 336:34]
    node _T_61 = or(_T_58, _T_60) @[InstructionDecode.scala 336:7]
    when _T_61 : @[InstructionDecode.scala 337:4]
      node _io_func7_T = bits(io.id_instruction, 31, 25) @[InstructionDecode.scala 338:34]
      io.func7 <= _io_func7_T @[InstructionDecode.scala 338:14]
    else :
      io.func7 <= UInt<1>("h0") @[InstructionDecode.scala 340:14]
    node _io_stall_T = eq(io.func7, UInt<1>("h1")) @[InstructionDecode.scala 343:24]
    node _io_stall_T_1 = eq(io.func3, UInt<3>("h4")) @[InstructionDecode.scala 343:45]
    node _io_stall_T_2 = eq(io.func3, UInt<3>("h5")) @[InstructionDecode.scala 343:65]
    node _io_stall_T_3 = or(_io_stall_T_1, _io_stall_T_2) @[InstructionDecode.scala 343:53]
    node _io_stall_T_4 = eq(io.func3, UInt<3>("h6")) @[InstructionDecode.scala 343:85]
    node _io_stall_T_5 = or(_io_stall_T_3, _io_stall_T_4) @[InstructionDecode.scala 343:73]
    node _io_stall_T_6 = eq(io.func3, UInt<3>("h7")) @[InstructionDecode.scala 343:105]
    node _io_stall_T_7 = or(_io_stall_T_5, _io_stall_T_6) @[InstructionDecode.scala 343:93]
    node _io_stall_T_8 = and(_io_stall_T, _io_stall_T_7) @[InstructionDecode.scala 343:32]
    io.stall <= _io_stall_T_8 @[InstructionDecode.scala 343:12]
    node _T_62 = mux(io.ex_mem_mem_read, io.dmem_data, io.ex_mem_result) @[InstructionDecode.scala 347:15]
    node _csr_io_i_data_T = eq(UInt<1>("h1"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_1 = mux(_csr_io_i_data_T, io.ex_result, registers.io.readData[0]) @[Mux.scala 81:58]
    node _csr_io_i_data_T_2 = eq(UInt<2>("h2"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_3 = mux(_csr_io_i_data_T_2, _T_62, _csr_io_i_data_T_1) @[Mux.scala 81:58]
    node _csr_io_i_data_T_4 = eq(UInt<2>("h3"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_5 = mux(_csr_io_i_data_T_4, io.writeData, _csr_io_i_data_T_3) @[Mux.scala 81:58]
    node _csr_io_i_data_T_6 = eq(UInt<3>("h4"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_7 = mux(_csr_io_i_data_T_6, io.csr_Ex_data, _csr_io_i_data_T_5) @[Mux.scala 81:58]
    node _csr_io_i_data_T_8 = eq(UInt<3>("h5"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_9 = mux(_csr_io_i_data_T_8, io.csr_Mem_data, _csr_io_i_data_T_7) @[Mux.scala 81:58]
    node _csr_io_i_data_T_10 = eq(UInt<3>("h6"), csrController.io.forwardRS1) @[Mux.scala 81:61]
    node _csr_io_i_data_T_11 = mux(_csr_io_i_data_T_10, io.csr_Wb_data, _csr_io_i_data_T_9) @[Mux.scala 81:58]
    csr.io.i_data <= _csr_io_i_data_T_11 @[InstructionDecode.scala 355:23]
    io.raddr[0] <= registerRs1 @[InstructionDecode.scala 365:33]
    io.raddr[1] <= registerRs2 @[InstructionDecode.scala 365:33]
    io.raddr[2] <= io.writeReg @[InstructionDecode.scala 365:33]
    io.rd_wdata <= writeData @[InstructionDecode.scala 367:21]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip input1 : UInt<32>, flip input2 : UInt<32>, flip aluCtl : UInt<4>, zero : UInt<1>, result : UInt<32>}

    node _io_result_T = eq(io.aluCtl, UInt<1>("h0")) @[ALU.scala 17:18]
    node _io_result_T_1 = and(io.input1, io.input2) @[ALU.scala 17:41]
    node _io_result_T_2 = eq(io.aluCtl, UInt<1>("h1")) @[ALU.scala 18:18]
    node _io_result_T_3 = or(io.input1, io.input2) @[ALU.scala 18:41]
    node _io_result_T_4 = eq(io.aluCtl, UInt<2>("h2")) @[ALU.scala 19:18]
    node _io_result_T_5 = add(io.input1, io.input2) @[ALU.scala 19:41]
    node _io_result_T_6 = tail(_io_result_T_5, 1) @[ALU.scala 19:41]
    node _io_result_T_7 = eq(io.aluCtl, UInt<2>("h3")) @[ALU.scala 20:18]
    node _io_result_T_8 = sub(io.input1, io.input2) @[ALU.scala 20:41]
    node _io_result_T_9 = tail(_io_result_T_8, 1) @[ALU.scala 20:41]
    node _io_result_T_10 = eq(io.aluCtl, UInt<3>("h4")) @[ALU.scala 21:18]
    node _io_result_T_11 = asSInt(io.input1) @[ALU.scala 21:41]
    node _io_result_T_12 = asSInt(io.input2) @[ALU.scala 21:60]
    node _io_result_T_13 = lt(_io_result_T_11, _io_result_T_12) @[ALU.scala 21:48]
    node _io_result_T_14 = eq(io.aluCtl, UInt<3>("h5")) @[ALU.scala 22:18]
    node _io_result_T_15 = lt(io.input1, io.input2) @[ALU.scala 22:41]
    node _io_result_T_16 = eq(io.aluCtl, UInt<3>("h6")) @[ALU.scala 23:18]
    node _io_result_T_17 = bits(io.input2, 4, 0) @[ALU.scala 23:53]
    node _io_result_T_18 = dshl(io.input1, _io_result_T_17) @[ALU.scala 23:41]
    node _io_result_T_19 = eq(io.aluCtl, UInt<3>("h7")) @[ALU.scala 24:18]
    node _io_result_T_20 = bits(io.input2, 4, 0) @[ALU.scala 24:53]
    node _io_result_T_21 = dshr(io.input1, _io_result_T_20) @[ALU.scala 24:41]
    node _io_result_T_22 = eq(io.aluCtl, UInt<4>("h8")) @[ALU.scala 25:18]
    node _io_result_T_23 = asSInt(io.input1) @[ALU.scala 25:41]
    node _io_result_T_24 = bits(io.input2, 4, 0) @[ALU.scala 25:60]
    node _io_result_T_25 = dshr(_io_result_T_23, _io_result_T_24) @[ALU.scala 25:48]
    node _io_result_T_26 = asUInt(_io_result_T_25) @[ALU.scala 25:68]
    node _io_result_T_27 = eq(io.aluCtl, UInt<4>("h9")) @[ALU.scala 26:18]
    node _io_result_T_28 = xor(io.input1, io.input2) @[ALU.scala 26:41]
    node _io_result_T_29 = mux(_io_result_T_27, _io_result_T_28, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_result_T_30 = mux(_io_result_T_22, _io_result_T_26, _io_result_T_29) @[Mux.scala 101:16]
    node _io_result_T_31 = mux(_io_result_T_19, _io_result_T_21, _io_result_T_30) @[Mux.scala 101:16]
    node _io_result_T_32 = mux(_io_result_T_16, _io_result_T_18, _io_result_T_31) @[Mux.scala 101:16]
    node _io_result_T_33 = mux(_io_result_T_14, _io_result_T_15, _io_result_T_32) @[Mux.scala 101:16]
    node _io_result_T_34 = mux(_io_result_T_10, _io_result_T_13, _io_result_T_33) @[Mux.scala 101:16]
    node _io_result_T_35 = mux(_io_result_T_7, _io_result_T_9, _io_result_T_34) @[Mux.scala 101:16]
    node _io_result_T_36 = mux(_io_result_T_4, _io_result_T_6, _io_result_T_35) @[Mux.scala 101:16]
    node _io_result_T_37 = mux(_io_result_T_2, _io_result_T_3, _io_result_T_36) @[Mux.scala 101:16]
    node _io_result_T_38 = mux(_io_result_T, _io_result_T_1, _io_result_T_37) @[Mux.scala 101:16]
    io.result <= _io_result_T_38 @[ALU.scala 14:13]
    io.zero is invalid @[ALU.scala 29:11]

  module AluControl :
    input clock : Clock
    input reset : Reset
    output io : { flip aluOp : UInt<2>, flip f7 : UInt<1>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, out : UInt<4>}

    io.out <= UInt<4>("hf") @[AluControl.scala 30:10]
    node _T = eq(io.aluOp, UInt<1>("h0")) @[AluControl.scala 32:17]
    when _T : @[AluControl.scala 32:26]
      io.out <= UInt<2>("h2") @[AluControl.scala 33:12]
    else :
      node _T_1 = eq(io.aluOp, UInt<1>("h1")) @[AluControl.scala 34:23]
      when _T_1 : @[AluControl.scala 34:32]
        io.out <= UInt<4>("hf") @[AluControl.scala 35:12]
      else :
        node _T_2 = eq(UInt<1>("h0"), io.f3) @[AluControl.scala 37:19]
        when _T_2 : @[AluControl.scala 37:19]
          node _T_3 = eq(io.aluSrc, UInt<1>("h0")) @[AluControl.scala 39:14]
          node _T_4 = eq(io.f7, UInt<1>("h0")) @[AluControl.scala 39:34]
          node _T_5 = or(_T_3, _T_4) @[AluControl.scala 39:25]
          when _T_5 : @[AluControl.scala 39:43]
            io.out <= UInt<2>("h2") @[AluControl.scala 40:18]
          else :
            io.out <= UInt<2>("h3") @[AluControl.scala 43:20]
        else :
          node _T_6 = eq(UInt<1>("h1"), io.f3) @[AluControl.scala 37:19]
          when _T_6 : @[AluControl.scala 37:19]
            io.out <= UInt<3>("h6") @[AluControl.scala 47:16]
          else :
            node _T_7 = eq(UInt<2>("h2"), io.f3) @[AluControl.scala 37:19]
            when _T_7 : @[AluControl.scala 37:19]
              io.out <= UInt<3>("h4") @[AluControl.scala 50:16]
            else :
              node _T_8 = eq(UInt<2>("h3"), io.f3) @[AluControl.scala 37:19]
              when _T_8 : @[AluControl.scala 37:19]
                io.out <= UInt<3>("h5") @[AluControl.scala 53:16]
              else :
                node _T_9 = eq(UInt<3>("h5"), io.f3) @[AluControl.scala 37:19]
                when _T_9 : @[AluControl.scala 37:19]
                  node _T_10 = eq(io.f7, UInt<1>("h0")) @[AluControl.scala 56:20]
                  when _T_10 : @[AluControl.scala 56:29]
                    io.out <= UInt<3>("h7") @[AluControl.scala 57:18]
                  else :
                    io.out <= UInt<4>("h8") @[AluControl.scala 59:18]
                else :
                  node _T_11 = eq(UInt<3>("h7"), io.f3) @[AluControl.scala 37:19]
                  when _T_11 : @[AluControl.scala 37:19]
                    io.out <= UInt<1>("h0") @[AluControl.scala 63:16]
                  else :
                    node _T_12 = eq(UInt<3>("h6"), io.f3) @[AluControl.scala 37:19]
                    when _T_12 : @[AluControl.scala 37:19]
                      io.out <= UInt<1>("h1") @[AluControl.scala 66:16]
                    else :
                      node _T_13 = eq(UInt<3>("h4"), io.f3) @[AluControl.scala 37:19]
                      when _T_13 : @[AluControl.scala 37:19]
                        io.out <= UInt<4>("h9") @[AluControl.scala 69:16]


  module ForwardingUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip ex_reg_rd : UInt<5>, flip mem_reg_rd : UInt<5>, flip reg_rs1 : UInt<5>, flip reg_rs2 : UInt<5>, flip ex_regWrite : UInt<1>[2], flip mem_regWrite : UInt<1>[2], forwardA : UInt<2>, forwardB : UInt<2>, flip f_read : UInt<1>[3], flip reg_rs3 : UInt<5>, forwardC : UInt<2>}

    io.forwardA is invalid @[ForwardingUnit.scala 23:15]
    io.forwardB is invalid @[ForwardingUnit.scala 24:15]
    node _T = eq(io.reg_rs1, io.ex_reg_rd) @[ForwardingUnit.scala 27:17]
    node _T_1 = neq(io.ex_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 28:44]
    node _T_2 = mux(io.ex_regWrite[0], _T_1, UInt<1>("h1")) @[ForwardingUnit.scala 28:11]
    node _T_3 = and(_T, _T_2) @[ForwardingUnit.scala 28:5]
    node _T_4 = eq(io.f_read[0], UInt<1>("h0")) @[ForwardingUnit.scala 30:15]
    node _T_5 = and(_T_4, io.ex_regWrite[0]) @[ForwardingUnit.scala 30:33]
    node _T_6 = and(io.f_read[0], io.ex_regWrite[1]) @[ForwardingUnit.scala 30:76]
    node _T_7 = or(_T_5, _T_6) @[ForwardingUnit.scala 30:55]
    node _T_8 = and(_T_3, _T_7) @[ForwardingUnit.scala 29:5]
    when _T_8 : @[ForwardingUnit.scala 33:5]
      io.forwardA <= UInt<1>("h1") @[ForwardingUnit.scala 34:17]
    else :
      node _T_9 = eq(io.reg_rs1, io.mem_reg_rd) @[ForwardingUnit.scala 36:17]
      node _T_10 = neq(io.mem_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 37:46]
      node _T_11 = mux(io.mem_regWrite[0], _T_10, UInt<1>("h1")) @[ForwardingUnit.scala 37:11]
      node _T_12 = and(_T_9, _T_11) @[ForwardingUnit.scala 37:5]
      node _T_13 = eq(io.f_read[0], UInt<1>("h0")) @[ForwardingUnit.scala 39:15]
      node _T_14 = and(_T_13, io.mem_regWrite[0]) @[ForwardingUnit.scala 39:33]
      node _T_15 = and(io.f_read[0], io.mem_regWrite[1]) @[ForwardingUnit.scala 39:77]
      node _T_16 = or(_T_14, _T_15) @[ForwardingUnit.scala 39:56]
      node _T_17 = and(_T_12, _T_16) @[ForwardingUnit.scala 38:5]
      when _T_17 : @[ForwardingUnit.scala 42:5]
        io.forwardA <= UInt<2>("h2") @[ForwardingUnit.scala 43:17]
      else :
        io.forwardA <= UInt<1>("h0") @[ForwardingUnit.scala 45:17]
    node _T_18 = eq(io.reg_rs2, io.ex_reg_rd) @[ForwardingUnit.scala 49:17]
    node _T_19 = neq(io.ex_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 50:44]
    node _T_20 = mux(io.ex_regWrite[0], _T_19, UInt<1>("h1")) @[ForwardingUnit.scala 50:11]
    node _T_21 = and(_T_18, _T_20) @[ForwardingUnit.scala 50:5]
    node _T_22 = eq(io.f_read[1], UInt<1>("h0")) @[ForwardingUnit.scala 52:15]
    node _T_23 = and(_T_22, io.ex_regWrite[0]) @[ForwardingUnit.scala 52:33]
    node _T_24 = and(io.f_read[1], io.ex_regWrite[1]) @[ForwardingUnit.scala 52:76]
    node _T_25 = or(_T_23, _T_24) @[ForwardingUnit.scala 52:55]
    node _T_26 = and(_T_21, _T_25) @[ForwardingUnit.scala 51:5]
    when _T_26 : @[ForwardingUnit.scala 55:5]
      io.forwardB <= UInt<1>("h1") @[ForwardingUnit.scala 56:17]
    else :
      node _T_27 = eq(io.reg_rs2, io.mem_reg_rd) @[ForwardingUnit.scala 58:17]
      node _T_28 = neq(io.mem_reg_rd, UInt<1>("h0")) @[ForwardingUnit.scala 59:46]
      node _T_29 = mux(io.mem_regWrite[0], _T_28, UInt<1>("h1")) @[ForwardingUnit.scala 59:11]
      node _T_30 = and(_T_27, _T_29) @[ForwardingUnit.scala 59:5]
      node _T_31 = eq(io.f_read[1], UInt<1>("h0")) @[ForwardingUnit.scala 61:15]
      node _T_32 = and(_T_31, io.mem_regWrite[0]) @[ForwardingUnit.scala 61:33]
      node _T_33 = and(io.f_read[1], io.mem_regWrite[1]) @[ForwardingUnit.scala 61:77]
      node _T_34 = or(_T_32, _T_33) @[ForwardingUnit.scala 61:56]
      node _T_35 = and(_T_30, _T_34) @[ForwardingUnit.scala 60:5]
      when _T_35 : @[ForwardingUnit.scala 64:5]
        io.forwardB <= UInt<2>("h2") @[ForwardingUnit.scala 65:17]
      else :
        io.forwardB <= UInt<1>("h0") @[ForwardingUnit.scala 67:17]
    node _T_36 = eq(io.reg_rs3, io.ex_reg_rd) @[ForwardingUnit.scala 72:23]
    node _T_37 = and(io.f_read[2], io.ex_regWrite[1]) @[ForwardingUnit.scala 73:28]
    node _T_38 = and(_T_36, _T_37) @[ForwardingUnit.scala 73:7]
    when _T_38 : @[ForwardingUnit.scala 74:7]
      io.forwardC <= UInt<1>("h1") @[ForwardingUnit.scala 75:23]
    else :
      node _T_39 = eq(io.reg_rs3, io.mem_reg_rd) @[ForwardingUnit.scala 77:23]
      node _T_40 = and(io.f_read[2], io.mem_regWrite[1]) @[ForwardingUnit.scala 78:28]
      node _T_41 = and(_T_39, _T_40) @[ForwardingUnit.scala 78:7]
      when _T_41 : @[ForwardingUnit.scala 79:7]
        io.forwardC <= UInt<2>("h2") @[ForwardingUnit.scala 80:23]
      else :
        io.forwardC <= UInt<1>("h0") @[ForwardingUnit.scala 82:23]


  module MDU :
    input clock : Clock
    input reset : Reset
    output io : { flip src_a : UInt<32>, flip src_b : UInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : { valid : UInt<1>, bits : UInt<32>}}

    wire result : UInt<64> @[MDU.scala 32:22]
    node _result_T = eq(io.op, UInt<1>("h0")) @[MDU.scala 34:16]
    node _result_T_1 = eq(io.op, UInt<2>("h3")) @[MDU.scala 34:33]
    node _result_T_2 = or(_result_T, _result_T_1) @[MDU.scala 34:24]
    node _result_T_3 = mul(io.src_a, io.src_b) @[MDU.scala 34:58]
    node _result_T_4 = eq(io.op, UInt<2>("h2")) @[MDU.scala 35:16]
    node _result_T_5 = asSInt(io.src_a) @[MDU.scala 35:59]
    node _result_T_6 = cvt(io.src_b) @[MDU.scala 35:66]
    node _result_T_7 = mul(_result_T_5, _result_T_6) @[MDU.scala 35:66]
    node _result_T_8 = tail(_result_T_7, 1) @[MDU.scala 35:66]
    node _result_T_9 = asSInt(_result_T_8) @[MDU.scala 35:66]
    node _result_T_10 = asUInt(_result_T_9) @[MDU.scala 35:78]
    node _result_T_11 = eq(io.op, UInt<1>("h1")) @[MDU.scala 36:16]
    node _result_T_12 = asSInt(io.src_a) @[MDU.scala 36:59]
    node _result_T_13 = asSInt(io.src_b) @[MDU.scala 36:77]
    node _result_T_14 = mul(_result_T_12, _result_T_13) @[MDU.scala 36:66]
    node _result_T_15 = asUInt(_result_T_14) @[MDU.scala 36:85]
    node _result_T_16 = mux(_result_T_11, _result_T_15, UInt<1>("h0")) @[Mux.scala 101:16]
    node _result_T_17 = mux(_result_T_4, _result_T_10, _result_T_16) @[Mux.scala 101:16]
    node _result_T_18 = mux(_result_T_2, _result_T_3, _result_T_17) @[Mux.scala 101:16]
    result <= _result_T_18 @[MDU.scala 33:12]
    reg r_ready : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[MDU.scala 41:29]
    reg r_counter : UInt<6>, clock with :
      reset => (reset, UInt<6>("h20")) @[MDU.scala 42:29]
    reg r_dividend : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MDU.scala 43:29]
    reg r_quotient : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MDU.scala 44:29]
    io.output.valid <= UInt<1>("h0") @[MDU.scala 46:21]
    node _is_div_rem_u_T = eq(io.op, UInt<3>("h5")) @[MDU.scala 48:39]
    node _is_div_rem_u_T_1 = eq(io.op, UInt<3>("h7")) @[MDU.scala 48:57]
    node _is_div_rem_u_T_2 = or(_is_div_rem_u_T, _is_div_rem_u_T_1) @[MDU.scala 48:48]
    wire is_div_rem_u : UInt<1> @[MDU.scala 48:32]
    is_div_rem_u <= _is_div_rem_u_T_2 @[MDU.scala 48:32]
    node _is_div_rem_s_T = eq(io.op, UInt<3>("h4")) @[MDU.scala 49:39]
    node _is_div_rem_s_T_1 = eq(io.op, UInt<3>("h6")) @[MDU.scala 49:56]
    node _is_div_rem_s_T_2 = or(_is_div_rem_s_T, _is_div_rem_s_T_1) @[MDU.scala 49:47]
    wire is_div_rem_s : UInt<1> @[MDU.scala 49:32]
    is_div_rem_s <= _is_div_rem_s_T_2 @[MDU.scala 49:32]
    node _T = or(is_div_rem_s, is_div_rem_u) @[MDU.scala 50:23]
    when _T : @[MDU.scala 50:39]
      node _dividend_T = bits(io.src_a, 31, 31) @[MDU.scala 51:53]
      node _dividend_T_1 = and(is_div_rem_s, _dividend_T) @[MDU.scala 51:42]
      node _dividend_T_2 = sub(UInt<1>("h0"), io.src_a) @[MDU.scala 51:59]
      node _dividend_T_3 = tail(_dividend_T_2, 1) @[MDU.scala 51:59]
      node dividend = mux(_dividend_T_1, _dividend_T_3, io.src_a) @[MDU.scala 51:28]
      node _divisor_T = bits(io.src_b, 31, 31) @[MDU.scala 52:53]
      node _divisor_T_1 = and(is_div_rem_s, _divisor_T) @[MDU.scala 52:42]
      node _divisor_T_2 = sub(UInt<1>("h0"), io.src_b) @[MDU.scala 52:59]
      node _divisor_T_3 = tail(_divisor_T_2, 1) @[MDU.scala 52:59]
      node divisor = mux(_divisor_T_1, _divisor_T_3, io.src_b) @[MDU.scala 52:28]
      node _T_1 = eq(io.valid, UInt<1>("h1")) @[MDU.scala 53:23]
      when _T_1 : @[MDU.scala 53:32]
        r_ready <= UInt<1>("h0") @[MDU.scala 54:24]
        r_counter <= UInt<6>("h20") @[MDU.scala 55:24]
        r_dividend <= dividend @[MDU.scala 56:24]
        r_quotient <= UInt<1>("h0") @[MDU.scala 57:24]
      else :
        node _T_2 = neq(r_counter, UInt<1>("h0")) @[MDU.scala 58:30]
        when _T_2 : @[MDU.scala 58:38]
          node _T_3 = sub(r_counter, UInt<1>("h1")) @[MDU.scala 59:52]
          node _T_4 = tail(_T_3, 1) @[MDU.scala 59:52]
          node _T_5 = dshl(divisor, _T_4) @[MDU.scala 59:40]
          node _T_6 = geq(r_dividend, _T_5) @[MDU.scala 59:29]
          when _T_6 : @[MDU.scala 59:59]
            node _r_dividend_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 60:67]
            node _r_dividend_T_1 = tail(_r_dividend_T, 1) @[MDU.scala 60:67]
            node _r_dividend_T_2 = dshl(divisor, _r_dividend_T_1) @[MDU.scala 60:55]
            node _r_dividend_T_3 = sub(r_dividend, _r_dividend_T_2) @[MDU.scala 60:45]
            node _r_dividend_T_4 = tail(_r_dividend_T_3, 1) @[MDU.scala 60:45]
            r_dividend <= _r_dividend_T_4 @[MDU.scala 60:31]
            node _r_quotient_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 61:63]
            node _r_quotient_T_1 = tail(_r_quotient_T, 1) @[MDU.scala 61:63]
            node _r_quotient_T_2 = dshl(UInt<1>("h1"), _r_quotient_T_1) @[MDU.scala 61:51]
            node _r_quotient_T_3 = add(r_quotient, _r_quotient_T_2) @[MDU.scala 61:45]
            node _r_quotient_T_4 = tail(_r_quotient_T_3, 1) @[MDU.scala 61:45]
            r_quotient <= _r_quotient_T_4 @[MDU.scala 61:31]
          else :
            r_ready <= UInt<1>("h1") @[MDU.scala 63:25]
          node _r_counter_T = sub(r_counter, UInt<1>("h1")) @[MDU.scala 65:37]
          node _r_counter_T_1 = tail(_r_counter_T, 1) @[MDU.scala 65:37]
          r_counter <= _r_counter_T_1 @[MDU.scala 65:24]
          node _r_ready_T = eq(r_counter, UInt<1>("h1")) @[MDU.scala 66:38]
          r_ready <= _r_ready_T @[MDU.scala 66:24]
        else :
          io.output.valid <= UInt<1>("h1") @[MDU.scala 68:29]
    io.ready <= r_ready @[MDU.scala 72:18]
    node _T_7 = eq(io.op, UInt<1>("h0")) @[MDU.scala 73:16]
    when _T_7 : @[MDU.scala 73:24]
      node _io_output_bits_T = bits(result, 31, 0) @[MDU.scala 74:33]
      io.output.bits <= _io_output_bits_T @[MDU.scala 74:24]
      io.output.valid <= UInt<1>("h1") @[MDU.scala 75:25]
    else :
      node _T_8 = eq(io.op, UInt<1>("h1")) @[MDU.scala 76:22]
      node _T_9 = eq(io.op, UInt<2>("h3")) @[MDU.scala 76:40]
      node _T_10 = or(_T_8, _T_9) @[MDU.scala 76:31]
      node _T_11 = eq(io.op, UInt<2>("h2")) @[MDU.scala 76:59]
      node _T_12 = or(_T_10, _T_11) @[MDU.scala 76:50]
      when _T_12 : @[MDU.scala 76:70]
        node _io_output_bits_T_1 = bits(result, 63, 32) @[MDU.scala 77:33]
        io.output.bits <= _io_output_bits_T_1 @[MDU.scala 77:24]
        io.output.valid <= UInt<1>("h1") @[MDU.scala 78:25]
      else :
        node _T_13 = eq(io.op, UInt<3>("h4")) @[MDU.scala 79:22]
        when _T_13 : @[MDU.scala 79:30]
          node _io_output_bits_T_2 = bits(io.src_a, 31, 31) @[MDU.scala 80:39]
          node _io_output_bits_T_3 = bits(io.src_b, 31, 31) @[MDU.scala 80:56]
          node _io_output_bits_T_4 = neq(_io_output_bits_T_2, _io_output_bits_T_3) @[MDU.scala 80:44]
          node _io_output_bits_T_5 = orr(io.src_b) @[MDU.scala 80:72]
          node _io_output_bits_T_6 = and(_io_output_bits_T_4, _io_output_bits_T_5) @[MDU.scala 80:61]
          node _io_output_bits_T_7 = sub(UInt<1>("h0"), r_quotient) @[MDU.scala 80:76]
          node _io_output_bits_T_8 = tail(_io_output_bits_T_7, 1) @[MDU.scala 80:76]
          node _io_output_bits_T_9 = mux(_io_output_bits_T_6, _io_output_bits_T_8, r_quotient) @[MDU.scala 80:30]
          io.output.bits <= _io_output_bits_T_9 @[MDU.scala 80:24]
        else :
          node _T_14 = eq(io.op, UInt<3>("h5")) @[MDU.scala 81:22]
          when _T_14 : @[MDU.scala 81:31]
            io.output.bits <= r_quotient @[MDU.scala 82:24]
          else :
            node _T_15 = eq(io.op, UInt<3>("h6")) @[MDU.scala 83:22]
            when _T_15 : @[MDU.scala 83:30]
              node _io_output_bits_T_10 = bits(io.src_a, 31, 31) @[MDU.scala 84:39]
              node _io_output_bits_T_11 = sub(UInt<1>("h0"), r_dividend) @[MDU.scala 84:44]
              node _io_output_bits_T_12 = tail(_io_output_bits_T_11, 1) @[MDU.scala 84:44]
              node _io_output_bits_T_13 = mux(_io_output_bits_T_10, _io_output_bits_T_12, r_dividend) @[MDU.scala 84:30]
              io.output.bits <= _io_output_bits_T_13 @[MDU.scala 84:24]
            else :
              node _T_16 = eq(io.op, UInt<3>("h7")) @[MDU.scala 85:22]
              when _T_16 : @[MDU.scala 85:31]
                io.output.bits <= r_dividend @[MDU.scala 86:24]
              else :
                io.output.bits <= UInt<1>("h0") @[MDU.scala 88:24]


  module MulAddRecFNToRaw_preMul_e8_s24 :
    output io : { flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, mulAddA : UInt<24>, mulAddB : UInt<24>, mulAddC : UInt<48>, toPostMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<5>, highAlignedSigC : UInt<26>, bit0AlignedSigC : UInt<1>}}

    node rawA_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawA_isZero_T = bits(rawA_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawA_isZero = eq(_rawA_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawA_isSpecial_T = bits(rawA_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawA_isSpecial = eq(_rawA_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawA : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawA_out_isNaN_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawA_out_isNaN_T_1 = and(rawA_isSpecial, _rawA_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawA.isNaN <= _rawA_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawA_out_isInf_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawA_out_isInf_T_1 = eq(_rawA_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawA_out_isInf_T_2 = and(rawA_isSpecial, _rawA_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawA.isInf <= _rawA_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawA.isZero <= rawA_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawA_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawA.sign <= _rawA_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawA_out_sExp_T = cvt(rawA_exp) @[rawFloatFromRecFN.scala 60:27]
    rawA.sExp <= _rawA_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawA_out_sig_T = eq(rawA_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawA_out_sig_T_1 = cat(UInt<1>("h0"), _rawA_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawA_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawA_out_sig_T_3 = cat(_rawA_out_sig_T_1, _rawA_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawA.sig <= _rawA_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node rawB_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawB_isZero_T = bits(rawB_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawB_isZero = eq(_rawB_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawB_isSpecial_T = bits(rawB_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawB_isSpecial = eq(_rawB_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawB : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawB_out_isNaN_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawB_out_isNaN_T_1 = and(rawB_isSpecial, _rawB_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawB.isNaN <= _rawB_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawB_out_isInf_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawB_out_isInf_T_1 = eq(_rawB_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawB_out_isInf_T_2 = and(rawB_isSpecial, _rawB_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawB.isInf <= _rawB_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawB.isZero <= rawB_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawB_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawB.sign <= _rawB_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawB_out_sExp_T = cvt(rawB_exp) @[rawFloatFromRecFN.scala 60:27]
    rawB.sExp <= _rawB_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawB_out_sig_T = eq(rawB_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawB_out_sig_T_1 = cat(UInt<1>("h0"), _rawB_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawB_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawB_out_sig_T_3 = cat(_rawB_out_sig_T_1, _rawB_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawB.sig <= _rawB_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node rawC_exp = bits(io.c, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawC_isZero_T = bits(rawC_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawC_isZero = eq(_rawC_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawC_isSpecial_T = bits(rawC_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawC_isSpecial = eq(_rawC_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawC : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawC_out_isNaN_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawC_out_isNaN_T_1 = and(rawC_isSpecial, _rawC_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawC.isNaN <= _rawC_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawC_out_isInf_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawC_out_isInf_T_1 = eq(_rawC_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawC_out_isInf_T_2 = and(rawC_isSpecial, _rawC_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawC.isInf <= _rawC_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawC.isZero <= rawC_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawC_out_sign_T = bits(io.c, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawC.sign <= _rawC_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawC_out_sExp_T = cvt(rawC_exp) @[rawFloatFromRecFN.scala 60:27]
    rawC.sExp <= _rawC_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawC_out_sig_T = eq(rawC_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawC_out_sig_T_1 = cat(UInt<1>("h0"), _rawC_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawC_out_sig_T_2 = bits(io.c, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawC_out_sig_T_3 = cat(_rawC_out_sig_T_1, _rawC_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawC.sig <= _rawC_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node _signProd_T = xor(rawA.sign, rawB.sign) @[MulAddRecFN.scala 97:30]
    node _signProd_T_1 = bits(io.op, 1, 1) @[MulAddRecFN.scala 97:49]
    node signProd = xor(_signProd_T, _signProd_T_1) @[MulAddRecFN.scala 97:42]
    node _sExpAlignedProd_T = add(rawA.sExp, rawB.sExp) @[MulAddRecFN.scala 100:19]
    node _sExpAlignedProd_T_1 = add(_sExpAlignedProd_T, asSInt(UInt<9>("h11b"))) @[MulAddRecFN.scala 100:32]
    node _sExpAlignedProd_T_2 = tail(_sExpAlignedProd_T_1, 1) @[MulAddRecFN.scala 100:32]
    node sExpAlignedProd = asSInt(_sExpAlignedProd_T_2) @[MulAddRecFN.scala 100:32]
    node _doSubMags_T = xor(signProd, rawC.sign) @[MulAddRecFN.scala 102:30]
    node _doSubMags_T_1 = bits(io.op, 0, 0) @[MulAddRecFN.scala 102:49]
    node doSubMags = xor(_doSubMags_T, _doSubMags_T_1) @[MulAddRecFN.scala 102:42]
    node _sNatCAlignDist_T = sub(sExpAlignedProd, rawC.sExp) @[MulAddRecFN.scala 106:42]
    node _sNatCAlignDist_T_1 = tail(_sNatCAlignDist_T, 1) @[MulAddRecFN.scala 106:42]
    node sNatCAlignDist = asSInt(_sNatCAlignDist_T_1) @[MulAddRecFN.scala 106:42]
    node posNatCAlignDist = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 107:42]
    node _isMinCAlign_T = or(rawA.isZero, rawB.isZero) @[MulAddRecFN.scala 108:35]
    node _isMinCAlign_T_1 = lt(sNatCAlignDist, asSInt(UInt<1>("h0"))) @[MulAddRecFN.scala 108:69]
    node isMinCAlign = or(_isMinCAlign_T, _isMinCAlign_T_1) @[MulAddRecFN.scala 108:50]
    node _CIsDominant_T = eq(rawC.isZero, UInt<1>("h0")) @[MulAddRecFN.scala 110:9]
    node _CIsDominant_T_1 = leq(posNatCAlignDist, UInt<5>("h18")) @[MulAddRecFN.scala 110:60]
    node _CIsDominant_T_2 = or(isMinCAlign, _CIsDominant_T_1) @[MulAddRecFN.scala 110:39]
    node CIsDominant = and(_CIsDominant_T, _CIsDominant_T_2) @[MulAddRecFN.scala 110:23]
    node _CAlignDist_T = lt(posNatCAlignDist, UInt<7>("h4a")) @[MulAddRecFN.scala 114:34]
    node _CAlignDist_T_1 = bits(posNatCAlignDist, 6, 0) @[MulAddRecFN.scala 115:33]
    node _CAlignDist_T_2 = mux(_CAlignDist_T, _CAlignDist_T_1, UInt<7>("h4a")) @[MulAddRecFN.scala 114:16]
    node CAlignDist = mux(isMinCAlign, UInt<1>("h0"), _CAlignDist_T_2) @[MulAddRecFN.scala 112:12]
    node _mainAlignedSigC_T = not(rawC.sig) @[MulAddRecFN.scala 120:25]
    node _mainAlignedSigC_T_1 = mux(doSubMags, _mainAlignedSigC_T, rawC.sig) @[MulAddRecFN.scala 120:13]
    node _mainAlignedSigC_T_2 = bits(doSubMags, 0, 0) @[Bitwise.scala 77:15]
    node _mainAlignedSigC_T_3 = mux(_mainAlignedSigC_T_2, UInt<53>("h1fffffffffffff"), UInt<53>("h0")) @[Bitwise.scala 77:12]
    node _mainAlignedSigC_T_4 = cat(_mainAlignedSigC_T_1, _mainAlignedSigC_T_3) @[MulAddRecFN.scala 120:46]
    node _mainAlignedSigC_T_5 = asSInt(_mainAlignedSigC_T_4) @[MulAddRecFN.scala 120:94]
    node mainAlignedSigC = dshr(_mainAlignedSigC_T_5, CAlignDist) @[MulAddRecFN.scala 120:100]
    node _reduced4CExtra_T = shl(rawC.sig, 2) @[MulAddRecFN.scala 122:30]
    wire reduced4CExtra_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _reduced4CExtra_reducedVec_0_T = bits(_reduced4CExtra_T, 3, 0) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_0_T_1 = orr(_reduced4CExtra_reducedVec_0_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[0] <= _reduced4CExtra_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_1_T = bits(_reduced4CExtra_T, 7, 4) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_1_T_1 = orr(_reduced4CExtra_reducedVec_1_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[1] <= _reduced4CExtra_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_2_T = bits(_reduced4CExtra_T, 11, 8) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_2_T_1 = orr(_reduced4CExtra_reducedVec_2_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[2] <= _reduced4CExtra_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_3_T = bits(_reduced4CExtra_T, 15, 12) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_3_T_1 = orr(_reduced4CExtra_reducedVec_3_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[3] <= _reduced4CExtra_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_4_T = bits(_reduced4CExtra_T, 19, 16) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_4_T_1 = orr(_reduced4CExtra_reducedVec_4_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[4] <= _reduced4CExtra_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_5_T = bits(_reduced4CExtra_T, 23, 20) @[primitives.scala 120:33]
    node _reduced4CExtra_reducedVec_5_T_1 = orr(_reduced4CExtra_reducedVec_5_T) @[primitives.scala 120:54]
    reduced4CExtra_reducedVec[5] <= _reduced4CExtra_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _reduced4CExtra_reducedVec_6_T = bits(_reduced4CExtra_T, 26, 24) @[primitives.scala 123:15]
    node _reduced4CExtra_reducedVec_6_T_1 = orr(_reduced4CExtra_reducedVec_6_T) @[primitives.scala 123:57]
    reduced4CExtra_reducedVec[6] <= _reduced4CExtra_reducedVec_6_T_1 @[primitives.scala 122:38]
    node reduced4CExtra_lo_hi = cat(reduced4CExtra_reducedVec[2], reduced4CExtra_reducedVec[1]) @[primitives.scala 124:20]
    node reduced4CExtra_lo = cat(reduced4CExtra_lo_hi, reduced4CExtra_reducedVec[0]) @[primitives.scala 124:20]
    node reduced4CExtra_hi_lo = cat(reduced4CExtra_reducedVec[4], reduced4CExtra_reducedVec[3]) @[primitives.scala 124:20]
    node reduced4CExtra_hi_hi = cat(reduced4CExtra_reducedVec[6], reduced4CExtra_reducedVec[5]) @[primitives.scala 124:20]
    node reduced4CExtra_hi = cat(reduced4CExtra_hi_hi, reduced4CExtra_hi_lo) @[primitives.scala 124:20]
    node _reduced4CExtra_T_1 = cat(reduced4CExtra_hi, reduced4CExtra_lo) @[primitives.scala 124:20]
    node _reduced4CExtra_T_2 = shr(CAlignDist, 2) @[MulAddRecFN.scala 124:28]
    node reduced4CExtra_shift = dshr(asSInt(UInt<33>("h100000000")), _reduced4CExtra_T_2) @[primitives.scala 76:56]
    node _reduced4CExtra_T_3 = bits(reduced4CExtra_shift, 19, 14) @[primitives.scala 78:22]
    node _reduced4CExtra_T_4 = bits(_reduced4CExtra_T_3, 3, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_5 = bits(_reduced4CExtra_T_4, 1, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_6 = bits(_reduced4CExtra_T_5, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_7 = bits(_reduced4CExtra_T_5, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_8 = cat(_reduced4CExtra_T_6, _reduced4CExtra_T_7) @[Cat.scala 33:92]
    node _reduced4CExtra_T_9 = bits(_reduced4CExtra_T_4, 3, 2) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_10 = bits(_reduced4CExtra_T_9, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_11 = bits(_reduced4CExtra_T_9, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_12 = cat(_reduced4CExtra_T_10, _reduced4CExtra_T_11) @[Cat.scala 33:92]
    node _reduced4CExtra_T_13 = cat(_reduced4CExtra_T_8, _reduced4CExtra_T_12) @[Cat.scala 33:92]
    node _reduced4CExtra_T_14 = bits(_reduced4CExtra_T_3, 5, 4) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_15 = bits(_reduced4CExtra_T_14, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_16 = bits(_reduced4CExtra_T_14, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_17 = cat(_reduced4CExtra_T_15, _reduced4CExtra_T_16) @[Cat.scala 33:92]
    node _reduced4CExtra_T_18 = cat(_reduced4CExtra_T_13, _reduced4CExtra_T_17) @[Cat.scala 33:92]
    node _reduced4CExtra_T_19 = and(_reduced4CExtra_T_1, _reduced4CExtra_T_18) @[MulAddRecFN.scala 122:68]
    node reduced4CExtra = orr(_reduced4CExtra_T_19) @[MulAddRecFN.scala 130:11]
    node _alignedSigC_T = shr(mainAlignedSigC, 3) @[MulAddRecFN.scala 132:28]
    node _alignedSigC_T_1 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 134:32]
    node _alignedSigC_T_2 = andr(_alignedSigC_T_1) @[MulAddRecFN.scala 134:39]
    node _alignedSigC_T_3 = eq(reduced4CExtra, UInt<1>("h0")) @[MulAddRecFN.scala 134:47]
    node _alignedSigC_T_4 = and(_alignedSigC_T_2, _alignedSigC_T_3) @[MulAddRecFN.scala 134:44]
    node _alignedSigC_T_5 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 135:32]
    node _alignedSigC_T_6 = orr(_alignedSigC_T_5) @[MulAddRecFN.scala 135:39]
    node _alignedSigC_T_7 = or(_alignedSigC_T_6, reduced4CExtra) @[MulAddRecFN.scala 135:44]
    node _alignedSigC_T_8 = mux(doSubMags, _alignedSigC_T_4, _alignedSigC_T_7) @[MulAddRecFN.scala 133:16]
    node alignedSigC_hi = asUInt(_alignedSigC_T) @[Cat.scala 33:92]
    node alignedSigC = cat(alignedSigC_hi, _alignedSigC_T_8) @[Cat.scala 33:92]
    io.mulAddA <= rawA.sig @[MulAddRecFN.scala 141:16]
    io.mulAddB <= rawB.sig @[MulAddRecFN.scala 142:16]
    node _io_mulAddC_T = bits(alignedSigC, 48, 1) @[MulAddRecFN.scala 143:30]
    io.mulAddC <= _io_mulAddC_T @[MulAddRecFN.scala 143:16]
    node _io_toPostMul_isSigNaNAny_T = bits(rawA.sig, 22, 22) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_1 = eq(_io_toPostMul_isSigNaNAny_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_2 = and(rawA.isNaN, _io_toPostMul_isSigNaNAny_T_1) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_3 = bits(rawB.sig, 22, 22) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_4 = eq(_io_toPostMul_isSigNaNAny_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_5 = and(rawB.isNaN, _io_toPostMul_isSigNaNAny_T_4) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_6 = or(_io_toPostMul_isSigNaNAny_T_2, _io_toPostMul_isSigNaNAny_T_5) @[MulAddRecFN.scala 146:32]
    node _io_toPostMul_isSigNaNAny_T_7 = bits(rawC.sig, 22, 22) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_8 = eq(_io_toPostMul_isSigNaNAny_T_7, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_9 = and(rawC.isNaN, _io_toPostMul_isSigNaNAny_T_8) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_10 = or(_io_toPostMul_isSigNaNAny_T_6, _io_toPostMul_isSigNaNAny_T_9) @[MulAddRecFN.scala 146:58]
    io.toPostMul.isSigNaNAny <= _io_toPostMul_isSigNaNAny_T_10 @[MulAddRecFN.scala 145:30]
    node _io_toPostMul_isNaNAOrB_T = or(rawA.isNaN, rawB.isNaN) @[MulAddRecFN.scala 148:42]
    io.toPostMul.isNaNAOrB <= _io_toPostMul_isNaNAOrB_T @[MulAddRecFN.scala 148:28]
    io.toPostMul.isInfA <= rawA.isInf @[MulAddRecFN.scala 149:28]
    io.toPostMul.isZeroA <= rawA.isZero @[MulAddRecFN.scala 150:28]
    io.toPostMul.isInfB <= rawB.isInf @[MulAddRecFN.scala 151:28]
    io.toPostMul.isZeroB <= rawB.isZero @[MulAddRecFN.scala 152:28]
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 153:28]
    io.toPostMul.isNaNC <= rawC.isNaN @[MulAddRecFN.scala 154:28]
    io.toPostMul.isInfC <= rawC.isInf @[MulAddRecFN.scala 155:28]
    io.toPostMul.isZeroC <= rawC.isZero @[MulAddRecFN.scala 156:28]
    node _io_toPostMul_sExpSum_T = sub(sExpAlignedProd, asSInt(UInt<6>("h18"))) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_1 = tail(_io_toPostMul_sExpSum_T, 1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_2 = asSInt(_io_toPostMul_sExpSum_T_1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_3 = mux(CIsDominant, rawC.sExp, _io_toPostMul_sExpSum_T_2) @[MulAddRecFN.scala 158:12]
    io.toPostMul.sExpSum <= _io_toPostMul_sExpSum_T_3 @[MulAddRecFN.scala 157:28]
    io.toPostMul.doSubMags <= doSubMags @[MulAddRecFN.scala 159:28]
    io.toPostMul.CIsDominant <= CIsDominant @[MulAddRecFN.scala 160:30]
    node _io_toPostMul_CDom_CAlignDist_T = bits(CAlignDist, 4, 0) @[MulAddRecFN.scala 161:47]
    io.toPostMul.CDom_CAlignDist <= _io_toPostMul_CDom_CAlignDist_T @[MulAddRecFN.scala 161:34]
    node _io_toPostMul_highAlignedSigC_T = bits(alignedSigC, 74, 49) @[MulAddRecFN.scala 163:20]
    io.toPostMul.highAlignedSigC <= _io_toPostMul_highAlignedSigC_T @[MulAddRecFN.scala 162:34]
    node _io_toPostMul_bit0AlignedSigC_T = bits(alignedSigC, 0, 0) @[MulAddRecFN.scala 164:48]
    io.toPostMul.bit0AlignedSigC <= _io_toPostMul_bit0AlignedSigC_T @[MulAddRecFN.scala 164:34]

  module MulAddRecFNToRaw_postMul_e8_s24 :
    output io : { flip fromPreMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<5>, highAlignedSigC : UInt<26>, bit0AlignedSigC : UInt<1>}, flip mulAddResult : UInt<49>, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[MulAddRecFN.scala 186:45]
    node CDom_sign = xor(io.fromPreMul.signProd, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 190:42]
    node _sigSum_T = bits(io.mulAddResult, 48, 48) @[MulAddRecFN.scala 192:32]
    node _sigSum_T_1 = add(io.fromPreMul.highAlignedSigC, UInt<1>("h1")) @[MulAddRecFN.scala 193:47]
    node _sigSum_T_2 = tail(_sigSum_T_1, 1) @[MulAddRecFN.scala 193:47]
    node _sigSum_T_3 = mux(_sigSum_T, _sigSum_T_2, io.fromPreMul.highAlignedSigC) @[MulAddRecFN.scala 192:16]
    node _sigSum_T_4 = bits(io.mulAddResult, 47, 0) @[MulAddRecFN.scala 196:28]
    node sigSum_hi = cat(_sigSum_T_3, _sigSum_T_4) @[Cat.scala 33:92]
    node sigSum = cat(sigSum_hi, io.fromPreMul.bit0AlignedSigC) @[Cat.scala 33:92]
    node _CDom_sExp_T = cvt(io.fromPreMul.doSubMags) @[MulAddRecFN.scala 203:69]
    node _CDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _CDom_sExp_T) @[MulAddRecFN.scala 203:43]
    node _CDom_sExp_T_2 = tail(_CDom_sExp_T_1, 1) @[MulAddRecFN.scala 203:43]
    node CDom_sExp = asSInt(_CDom_sExp_T_2) @[MulAddRecFN.scala 203:43]
    node _CDom_absSigSum_T = bits(sigSum, 74, 25) @[MulAddRecFN.scala 206:20]
    node _CDom_absSigSum_T_1 = not(_CDom_absSigSum_T) @[MulAddRecFN.scala 206:13]
    node _CDom_absSigSum_T_2 = bits(io.fromPreMul.highAlignedSigC, 25, 24) @[MulAddRecFN.scala 209:46]
    node _CDom_absSigSum_T_3 = cat(UInt<1>("h0"), _CDom_absSigSum_T_2) @[MulAddRecFN.scala 207:22]
    node _CDom_absSigSum_T_4 = bits(sigSum, 72, 26) @[MulAddRecFN.scala 210:23]
    node _CDom_absSigSum_T_5 = cat(_CDom_absSigSum_T_3, _CDom_absSigSum_T_4) @[MulAddRecFN.scala 209:71]
    node CDom_absSigSum = mux(io.fromPreMul.doSubMags, _CDom_absSigSum_T_1, _CDom_absSigSum_T_5) @[MulAddRecFN.scala 205:12]
    node _CDom_absSigSumExtra_T = bits(sigSum, 24, 1) @[MulAddRecFN.scala 215:21]
    node _CDom_absSigSumExtra_T_1 = not(_CDom_absSigSumExtra_T) @[MulAddRecFN.scala 215:14]
    node _CDom_absSigSumExtra_T_2 = orr(_CDom_absSigSumExtra_T_1) @[MulAddRecFN.scala 215:36]
    node _CDom_absSigSumExtra_T_3 = bits(sigSum, 25, 1) @[MulAddRecFN.scala 216:19]
    node _CDom_absSigSumExtra_T_4 = orr(_CDom_absSigSumExtra_T_3) @[MulAddRecFN.scala 216:37]
    node CDom_absSigSumExtra = mux(io.fromPreMul.doSubMags, _CDom_absSigSumExtra_T_2, _CDom_absSigSumExtra_T_4) @[MulAddRecFN.scala 214:12]
    node _CDom_mainSig_T = dshl(CDom_absSigSum, io.fromPreMul.CDom_CAlignDist) @[MulAddRecFN.scala 219:24]
    node CDom_mainSig = bits(_CDom_mainSig_T, 49, 21) @[MulAddRecFN.scala 219:56]
    node _CDom_reduced4SigExtra_T = bits(CDom_absSigSum, 23, 0) @[MulAddRecFN.scala 222:36]
    node _CDom_reduced4SigExtra_T_1 = shl(_CDom_reduced4SigExtra_T, 3) @[MulAddRecFN.scala 222:53]
    wire CDom_reduced4SigExtra_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _CDom_reduced4SigExtra_reducedVec_0_T = bits(_CDom_reduced4SigExtra_T_1, 3, 0) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[0] <= _CDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_1_T = bits(_CDom_reduced4SigExtra_T_1, 7, 4) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[1] <= _CDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_2_T = bits(_CDom_reduced4SigExtra_T_1, 11, 8) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[2] <= _CDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_3_T = bits(_CDom_reduced4SigExtra_T_1, 15, 12) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_3_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_3_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[3] <= _CDom_reduced4SigExtra_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_4_T = bits(_CDom_reduced4SigExtra_T_1, 19, 16) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_4_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_4_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[4] <= _CDom_reduced4SigExtra_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_5_T = bits(_CDom_reduced4SigExtra_T_1, 23, 20) @[primitives.scala 120:33]
    node _CDom_reduced4SigExtra_reducedVec_5_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_5_T) @[primitives.scala 120:54]
    CDom_reduced4SigExtra_reducedVec[5] <= _CDom_reduced4SigExtra_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _CDom_reduced4SigExtra_reducedVec_6_T = bits(_CDom_reduced4SigExtra_T_1, 26, 24) @[primitives.scala 123:15]
    node _CDom_reduced4SigExtra_reducedVec_6_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_6_T) @[primitives.scala 123:57]
    CDom_reduced4SigExtra_reducedVec[6] <= _CDom_reduced4SigExtra_reducedVec_6_T_1 @[primitives.scala 122:38]
    node CDom_reduced4SigExtra_lo_hi = cat(CDom_reduced4SigExtra_reducedVec[2], CDom_reduced4SigExtra_reducedVec[1]) @[primitives.scala 124:20]
    node CDom_reduced4SigExtra_lo = cat(CDom_reduced4SigExtra_lo_hi, CDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 124:20]
    node CDom_reduced4SigExtra_hi_lo = cat(CDom_reduced4SigExtra_reducedVec[4], CDom_reduced4SigExtra_reducedVec[3]) @[primitives.scala 124:20]
    node CDom_reduced4SigExtra_hi_hi = cat(CDom_reduced4SigExtra_reducedVec[6], CDom_reduced4SigExtra_reducedVec[5]) @[primitives.scala 124:20]
    node CDom_reduced4SigExtra_hi = cat(CDom_reduced4SigExtra_hi_hi, CDom_reduced4SigExtra_hi_lo) @[primitives.scala 124:20]
    node _CDom_reduced4SigExtra_T_2 = cat(CDom_reduced4SigExtra_hi, CDom_reduced4SigExtra_lo) @[primitives.scala 124:20]
    node _CDom_reduced4SigExtra_T_3 = shr(io.fromPreMul.CDom_CAlignDist, 2) @[MulAddRecFN.scala 223:51]
    node _CDom_reduced4SigExtra_T_4 = not(_CDom_reduced4SigExtra_T_3) @[primitives.scala 52:21]
    node CDom_reduced4SigExtra_shift = dshr(asSInt(UInt<9>("h100")), _CDom_reduced4SigExtra_T_4) @[primitives.scala 76:56]
    node _CDom_reduced4SigExtra_T_5 = bits(CDom_reduced4SigExtra_shift, 6, 1) @[primitives.scala 78:22]
    node _CDom_reduced4SigExtra_T_6 = bits(_CDom_reduced4SigExtra_T_5, 3, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_7 = bits(_CDom_reduced4SigExtra_T_6, 1, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_8 = bits(_CDom_reduced4SigExtra_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_9 = bits(_CDom_reduced4SigExtra_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_10 = cat(_CDom_reduced4SigExtra_T_8, _CDom_reduced4SigExtra_T_9) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_11 = bits(_CDom_reduced4SigExtra_T_6, 3, 2) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_12 = bits(_CDom_reduced4SigExtra_T_11, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_13 = bits(_CDom_reduced4SigExtra_T_11, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_14 = cat(_CDom_reduced4SigExtra_T_12, _CDom_reduced4SigExtra_T_13) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_15 = cat(_CDom_reduced4SigExtra_T_10, _CDom_reduced4SigExtra_T_14) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_16 = bits(_CDom_reduced4SigExtra_T_5, 5, 4) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_17 = bits(_CDom_reduced4SigExtra_T_16, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_18 = bits(_CDom_reduced4SigExtra_T_16, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_19 = cat(_CDom_reduced4SigExtra_T_17, _CDom_reduced4SigExtra_T_18) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_20 = cat(_CDom_reduced4SigExtra_T_15, _CDom_reduced4SigExtra_T_19) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_21 = and(_CDom_reduced4SigExtra_T_2, _CDom_reduced4SigExtra_T_20) @[MulAddRecFN.scala 222:72]
    node CDom_reduced4SigExtra = orr(_CDom_reduced4SigExtra_T_21) @[MulAddRecFN.scala 223:73]
    node _CDom_sig_T = shr(CDom_mainSig, 3) @[MulAddRecFN.scala 225:25]
    node _CDom_sig_T_1 = bits(CDom_mainSig, 2, 0) @[MulAddRecFN.scala 226:25]
    node _CDom_sig_T_2 = orr(_CDom_sig_T_1) @[MulAddRecFN.scala 226:32]
    node _CDom_sig_T_3 = or(_CDom_sig_T_2, CDom_reduced4SigExtra) @[MulAddRecFN.scala 226:36]
    node _CDom_sig_T_4 = or(_CDom_sig_T_3, CDom_absSigSumExtra) @[MulAddRecFN.scala 226:61]
    node CDom_sig = cat(_CDom_sig_T, _CDom_sig_T_4) @[Cat.scala 33:92]
    node notCDom_signSigSum = bits(sigSum, 51, 51) @[MulAddRecFN.scala 232:36]
    node _notCDom_absSigSum_T = bits(sigSum, 50, 0) @[MulAddRecFN.scala 235:20]
    node _notCDom_absSigSum_T_1 = not(_notCDom_absSigSum_T) @[MulAddRecFN.scala 235:13]
    node _notCDom_absSigSum_T_2 = bits(sigSum, 50, 0) @[MulAddRecFN.scala 236:19]
    node _notCDom_absSigSum_T_3 = add(_notCDom_absSigSum_T_2, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 236:41]
    node _notCDom_absSigSum_T_4 = tail(_notCDom_absSigSum_T_3, 1) @[MulAddRecFN.scala 236:41]
    node notCDom_absSigSum = mux(notCDom_signSigSum, _notCDom_absSigSum_T_1, _notCDom_absSigSum_T_4) @[MulAddRecFN.scala 234:12]
    wire notCDom_reduced2AbsSigSum_reducedVec : UInt<1>[26] @[primitives.scala 101:30]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T = bits(notCDom_absSigSum, 1, 0) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_0_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[0] <= _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T = bits(notCDom_absSigSum, 3, 2) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_1_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[1] <= _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T = bits(notCDom_absSigSum, 5, 4) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_2_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[2] <= _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T = bits(notCDom_absSigSum, 7, 6) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_3_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[3] <= _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T = bits(notCDom_absSigSum, 9, 8) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_4_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[4] <= _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T = bits(notCDom_absSigSum, 11, 10) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_5_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[5] <= _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T = bits(notCDom_absSigSum, 13, 12) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_6_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[6] <= _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T = bits(notCDom_absSigSum, 15, 14) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_7_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[7] <= _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T = bits(notCDom_absSigSum, 17, 16) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_8_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[8] <= _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T = bits(notCDom_absSigSum, 19, 18) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_9_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[9] <= _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_10_T = bits(notCDom_absSigSum, 21, 20) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_10_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_10_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[10] <= _notCDom_reduced2AbsSigSum_reducedVec_10_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_11_T = bits(notCDom_absSigSum, 23, 22) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_11_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_11_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[11] <= _notCDom_reduced2AbsSigSum_reducedVec_11_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_12_T = bits(notCDom_absSigSum, 25, 24) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_12_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_12_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[12] <= _notCDom_reduced2AbsSigSum_reducedVec_12_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_13_T = bits(notCDom_absSigSum, 27, 26) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_13_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_13_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[13] <= _notCDom_reduced2AbsSigSum_reducedVec_13_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_14_T = bits(notCDom_absSigSum, 29, 28) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_14_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_14_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[14] <= _notCDom_reduced2AbsSigSum_reducedVec_14_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_15_T = bits(notCDom_absSigSum, 31, 30) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_15_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_15_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[15] <= _notCDom_reduced2AbsSigSum_reducedVec_15_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_16_T = bits(notCDom_absSigSum, 33, 32) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_16_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_16_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[16] <= _notCDom_reduced2AbsSigSum_reducedVec_16_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_17_T = bits(notCDom_absSigSum, 35, 34) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_17_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_17_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[17] <= _notCDom_reduced2AbsSigSum_reducedVec_17_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_18_T = bits(notCDom_absSigSum, 37, 36) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_18_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_18_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[18] <= _notCDom_reduced2AbsSigSum_reducedVec_18_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_19_T = bits(notCDom_absSigSum, 39, 38) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_19_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_19_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[19] <= _notCDom_reduced2AbsSigSum_reducedVec_19_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_20_T = bits(notCDom_absSigSum, 41, 40) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_20_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_20_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[20] <= _notCDom_reduced2AbsSigSum_reducedVec_20_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_21_T = bits(notCDom_absSigSum, 43, 42) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_21_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_21_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[21] <= _notCDom_reduced2AbsSigSum_reducedVec_21_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_22_T = bits(notCDom_absSigSum, 45, 44) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_22_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_22_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[22] <= _notCDom_reduced2AbsSigSum_reducedVec_22_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_23_T = bits(notCDom_absSigSum, 47, 46) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_23_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_23_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[23] <= _notCDom_reduced2AbsSigSum_reducedVec_23_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_24_T = bits(notCDom_absSigSum, 49, 48) @[primitives.scala 103:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_24_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_24_T) @[primitives.scala 103:54]
    notCDom_reduced2AbsSigSum_reducedVec[24] <= _notCDom_reduced2AbsSigSum_reducedVec_24_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_25_T = bits(notCDom_absSigSum, 50, 50) @[primitives.scala 106:15]
    node _notCDom_reduced2AbsSigSum_reducedVec_25_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_25_T) @[primitives.scala 106:57]
    notCDom_reduced2AbsSigSum_reducedVec[25] <= _notCDom_reduced2AbsSigSum_reducedVec_25_T_1 @[primitives.scala 105:38]
    node notCDom_reduced2AbsSigSum_lo_lo_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[2], notCDom_reduced2AbsSigSum_reducedVec[1]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_lo_lo = cat(notCDom_reduced2AbsSigSum_lo_lo_lo_hi, notCDom_reduced2AbsSigSum_reducedVec[0]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_lo_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[5], notCDom_reduced2AbsSigSum_reducedVec[4]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_lo_hi = cat(notCDom_reduced2AbsSigSum_lo_lo_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[3]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_lo = cat(notCDom_reduced2AbsSigSum_lo_lo_hi, notCDom_reduced2AbsSigSum_lo_lo_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[8], notCDom_reduced2AbsSigSum_reducedVec[7]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi_lo = cat(notCDom_reduced2AbsSigSum_lo_hi_lo_hi, notCDom_reduced2AbsSigSum_reducedVec[6]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[10], notCDom_reduced2AbsSigSum_reducedVec[9]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[12], notCDom_reduced2AbsSigSum_reducedVec[11]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi = cat(notCDom_reduced2AbsSigSum_lo_hi_hi_hi, notCDom_reduced2AbsSigSum_lo_hi_hi_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo_hi = cat(notCDom_reduced2AbsSigSum_lo_hi_hi, notCDom_reduced2AbsSigSum_lo_hi_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_lo = cat(notCDom_reduced2AbsSigSum_lo_hi, notCDom_reduced2AbsSigSum_lo_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_lo_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[15], notCDom_reduced2AbsSigSum_reducedVec[14]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_lo_lo = cat(notCDom_reduced2AbsSigSum_hi_lo_lo_hi, notCDom_reduced2AbsSigSum_reducedVec[13]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_lo_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[18], notCDom_reduced2AbsSigSum_reducedVec[17]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_lo_hi = cat(notCDom_reduced2AbsSigSum_hi_lo_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[16]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_lo = cat(notCDom_reduced2AbsSigSum_hi_lo_hi, notCDom_reduced2AbsSigSum_hi_lo_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[21], notCDom_reduced2AbsSigSum_reducedVec[20]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi_lo = cat(notCDom_reduced2AbsSigSum_hi_hi_lo_hi, notCDom_reduced2AbsSigSum_reducedVec[19]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[23], notCDom_reduced2AbsSigSum_reducedVec[22]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[25], notCDom_reduced2AbsSigSum_reducedVec[24]) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_hi_hi_hi_hi, notCDom_reduced2AbsSigSum_hi_hi_hi_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi_hi = cat(notCDom_reduced2AbsSigSum_hi_hi_hi, notCDom_reduced2AbsSigSum_hi_hi_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum_hi = cat(notCDom_reduced2AbsSigSum_hi_hi, notCDom_reduced2AbsSigSum_hi_lo) @[primitives.scala 107:20]
    node notCDom_reduced2AbsSigSum = cat(notCDom_reduced2AbsSigSum_hi, notCDom_reduced2AbsSigSum_lo) @[primitives.scala 107:20]
    node _notCDom_normDistReduced2_T = bits(notCDom_reduced2AbsSigSum, 0, 0) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_1 = bits(notCDom_reduced2AbsSigSum, 1, 1) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_2 = bits(notCDom_reduced2AbsSigSum, 2, 2) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_3 = bits(notCDom_reduced2AbsSigSum, 3, 3) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_4 = bits(notCDom_reduced2AbsSigSum, 4, 4) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_5 = bits(notCDom_reduced2AbsSigSum, 5, 5) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_6 = bits(notCDom_reduced2AbsSigSum, 6, 6) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_7 = bits(notCDom_reduced2AbsSigSum, 7, 7) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_8 = bits(notCDom_reduced2AbsSigSum, 8, 8) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_9 = bits(notCDom_reduced2AbsSigSum, 9, 9) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_10 = bits(notCDom_reduced2AbsSigSum, 10, 10) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_11 = bits(notCDom_reduced2AbsSigSum, 11, 11) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_12 = bits(notCDom_reduced2AbsSigSum, 12, 12) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_13 = bits(notCDom_reduced2AbsSigSum, 13, 13) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_14 = bits(notCDom_reduced2AbsSigSum, 14, 14) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_15 = bits(notCDom_reduced2AbsSigSum, 15, 15) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_16 = bits(notCDom_reduced2AbsSigSum, 16, 16) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_17 = bits(notCDom_reduced2AbsSigSum, 17, 17) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_18 = bits(notCDom_reduced2AbsSigSum, 18, 18) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_19 = bits(notCDom_reduced2AbsSigSum, 19, 19) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_20 = bits(notCDom_reduced2AbsSigSum, 20, 20) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_21 = bits(notCDom_reduced2AbsSigSum, 21, 21) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_22 = bits(notCDom_reduced2AbsSigSum, 22, 22) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_23 = bits(notCDom_reduced2AbsSigSum, 23, 23) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_24 = bits(notCDom_reduced2AbsSigSum, 24, 24) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_25 = bits(notCDom_reduced2AbsSigSum, 25, 25) @[primitives.scala 91:52]
    node _notCDom_normDistReduced2_T_26 = mux(_notCDom_normDistReduced2_T_1, UInt<5>("h18"), UInt<5>("h19")) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_27 = mux(_notCDom_normDistReduced2_T_2, UInt<5>("h17"), _notCDom_normDistReduced2_T_26) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_28 = mux(_notCDom_normDistReduced2_T_3, UInt<5>("h16"), _notCDom_normDistReduced2_T_27) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_29 = mux(_notCDom_normDistReduced2_T_4, UInt<5>("h15"), _notCDom_normDistReduced2_T_28) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_30 = mux(_notCDom_normDistReduced2_T_5, UInt<5>("h14"), _notCDom_normDistReduced2_T_29) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_31 = mux(_notCDom_normDistReduced2_T_6, UInt<5>("h13"), _notCDom_normDistReduced2_T_30) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_32 = mux(_notCDom_normDistReduced2_T_7, UInt<5>("h12"), _notCDom_normDistReduced2_T_31) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_33 = mux(_notCDom_normDistReduced2_T_8, UInt<5>("h11"), _notCDom_normDistReduced2_T_32) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_34 = mux(_notCDom_normDistReduced2_T_9, UInt<5>("h10"), _notCDom_normDistReduced2_T_33) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_35 = mux(_notCDom_normDistReduced2_T_10, UInt<4>("hf"), _notCDom_normDistReduced2_T_34) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_36 = mux(_notCDom_normDistReduced2_T_11, UInt<4>("he"), _notCDom_normDistReduced2_T_35) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_37 = mux(_notCDom_normDistReduced2_T_12, UInt<4>("hd"), _notCDom_normDistReduced2_T_36) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_38 = mux(_notCDom_normDistReduced2_T_13, UInt<4>("hc"), _notCDom_normDistReduced2_T_37) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_39 = mux(_notCDom_normDistReduced2_T_14, UInt<4>("hb"), _notCDom_normDistReduced2_T_38) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_40 = mux(_notCDom_normDistReduced2_T_15, UInt<4>("ha"), _notCDom_normDistReduced2_T_39) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_41 = mux(_notCDom_normDistReduced2_T_16, UInt<4>("h9"), _notCDom_normDistReduced2_T_40) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_42 = mux(_notCDom_normDistReduced2_T_17, UInt<4>("h8"), _notCDom_normDistReduced2_T_41) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_43 = mux(_notCDom_normDistReduced2_T_18, UInt<3>("h7"), _notCDom_normDistReduced2_T_42) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_44 = mux(_notCDom_normDistReduced2_T_19, UInt<3>("h6"), _notCDom_normDistReduced2_T_43) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_45 = mux(_notCDom_normDistReduced2_T_20, UInt<3>("h5"), _notCDom_normDistReduced2_T_44) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_46 = mux(_notCDom_normDistReduced2_T_21, UInt<3>("h4"), _notCDom_normDistReduced2_T_45) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_47 = mux(_notCDom_normDistReduced2_T_22, UInt<2>("h3"), _notCDom_normDistReduced2_T_46) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_48 = mux(_notCDom_normDistReduced2_T_23, UInt<2>("h2"), _notCDom_normDistReduced2_T_47) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_49 = mux(_notCDom_normDistReduced2_T_24, UInt<1>("h1"), _notCDom_normDistReduced2_T_48) @[Mux.scala 47:70]
    node notCDom_normDistReduced2 = mux(_notCDom_normDistReduced2_T_25, UInt<1>("h0"), _notCDom_normDistReduced2_T_49) @[Mux.scala 47:70]
    node notCDom_nearNormDist = shl(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 240:56]
    node _notCDom_sExp_T = cvt(notCDom_nearNormDist) @[MulAddRecFN.scala 241:76]
    node _notCDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _notCDom_sExp_T) @[MulAddRecFN.scala 241:46]
    node _notCDom_sExp_T_2 = tail(_notCDom_sExp_T_1, 1) @[MulAddRecFN.scala 241:46]
    node notCDom_sExp = asSInt(_notCDom_sExp_T_2) @[MulAddRecFN.scala 241:46]
    node _notCDom_mainSig_T = dshl(notCDom_absSigSum, notCDom_nearNormDist) @[MulAddRecFN.scala 243:27]
    node notCDom_mainSig = bits(_notCDom_mainSig_T, 51, 23) @[MulAddRecFN.scala 243:50]
    node _notCDom_reduced4SigExtra_T = bits(notCDom_reduced2AbsSigSum, 12, 0) @[MulAddRecFN.scala 247:39]
    node _notCDom_reduced4SigExtra_T_1 = shl(_notCDom_reduced4SigExtra_T, 0) @[MulAddRecFN.scala 247:55]
    wire notCDom_reduced4SigExtra_reducedVec : UInt<1>[7] @[primitives.scala 101:30]
    node _notCDom_reduced4SigExtra_reducedVec_0_T = bits(_notCDom_reduced4SigExtra_T_1, 1, 0) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[0] <= _notCDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_1_T = bits(_notCDom_reduced4SigExtra_T_1, 3, 2) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[1] <= _notCDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_2_T = bits(_notCDom_reduced4SigExtra_T_1, 5, 4) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[2] <= _notCDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_3_T = bits(_notCDom_reduced4SigExtra_T_1, 7, 6) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_3_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_3_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[3] <= _notCDom_reduced4SigExtra_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_4_T = bits(_notCDom_reduced4SigExtra_T_1, 9, 8) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_4_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_4_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[4] <= _notCDom_reduced4SigExtra_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_5_T = bits(_notCDom_reduced4SigExtra_T_1, 11, 10) @[primitives.scala 103:33]
    node _notCDom_reduced4SigExtra_reducedVec_5_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_5_T) @[primitives.scala 103:54]
    notCDom_reduced4SigExtra_reducedVec[5] <= _notCDom_reduced4SigExtra_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _notCDom_reduced4SigExtra_reducedVec_6_T = bits(_notCDom_reduced4SigExtra_T_1, 12, 12) @[primitives.scala 106:15]
    node _notCDom_reduced4SigExtra_reducedVec_6_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_6_T) @[primitives.scala 106:57]
    notCDom_reduced4SigExtra_reducedVec[6] <= _notCDom_reduced4SigExtra_reducedVec_6_T_1 @[primitives.scala 105:38]
    node notCDom_reduced4SigExtra_lo_hi = cat(notCDom_reduced4SigExtra_reducedVec[2], notCDom_reduced4SigExtra_reducedVec[1]) @[primitives.scala 107:20]
    node notCDom_reduced4SigExtra_lo = cat(notCDom_reduced4SigExtra_lo_hi, notCDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 107:20]
    node notCDom_reduced4SigExtra_hi_lo = cat(notCDom_reduced4SigExtra_reducedVec[4], notCDom_reduced4SigExtra_reducedVec[3]) @[primitives.scala 107:20]
    node notCDom_reduced4SigExtra_hi_hi = cat(notCDom_reduced4SigExtra_reducedVec[6], notCDom_reduced4SigExtra_reducedVec[5]) @[primitives.scala 107:20]
    node notCDom_reduced4SigExtra_hi = cat(notCDom_reduced4SigExtra_hi_hi, notCDom_reduced4SigExtra_hi_lo) @[primitives.scala 107:20]
    node _notCDom_reduced4SigExtra_T_2 = cat(notCDom_reduced4SigExtra_hi, notCDom_reduced4SigExtra_lo) @[primitives.scala 107:20]
    node _notCDom_reduced4SigExtra_T_3 = shr(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 248:46]
    node _notCDom_reduced4SigExtra_T_4 = not(_notCDom_reduced4SigExtra_T_3) @[primitives.scala 52:21]
    node notCDom_reduced4SigExtra_shift = dshr(asSInt(UInt<17>("h10000")), _notCDom_reduced4SigExtra_T_4) @[primitives.scala 76:56]
    node _notCDom_reduced4SigExtra_T_5 = bits(notCDom_reduced4SigExtra_shift, 6, 1) @[primitives.scala 78:22]
    node _notCDom_reduced4SigExtra_T_6 = bits(_notCDom_reduced4SigExtra_T_5, 3, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_7 = bits(_notCDom_reduced4SigExtra_T_6, 1, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_8 = bits(_notCDom_reduced4SigExtra_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_9 = bits(_notCDom_reduced4SigExtra_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_10 = cat(_notCDom_reduced4SigExtra_T_8, _notCDom_reduced4SigExtra_T_9) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_11 = bits(_notCDom_reduced4SigExtra_T_6, 3, 2) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_12 = bits(_notCDom_reduced4SigExtra_T_11, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_13 = bits(_notCDom_reduced4SigExtra_T_11, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_14 = cat(_notCDom_reduced4SigExtra_T_12, _notCDom_reduced4SigExtra_T_13) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_15 = cat(_notCDom_reduced4SigExtra_T_10, _notCDom_reduced4SigExtra_T_14) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_16 = bits(_notCDom_reduced4SigExtra_T_5, 5, 4) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_17 = bits(_notCDom_reduced4SigExtra_T_16, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_18 = bits(_notCDom_reduced4SigExtra_T_16, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_19 = cat(_notCDom_reduced4SigExtra_T_17, _notCDom_reduced4SigExtra_T_18) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_20 = cat(_notCDom_reduced4SigExtra_T_15, _notCDom_reduced4SigExtra_T_19) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_21 = and(_notCDom_reduced4SigExtra_T_2, _notCDom_reduced4SigExtra_T_20) @[MulAddRecFN.scala 247:78]
    node notCDom_reduced4SigExtra = orr(_notCDom_reduced4SigExtra_T_21) @[MulAddRecFN.scala 249:11]
    node _notCDom_sig_T = shr(notCDom_mainSig, 3) @[MulAddRecFN.scala 251:28]
    node _notCDom_sig_T_1 = bits(notCDom_mainSig, 2, 0) @[MulAddRecFN.scala 252:28]
    node _notCDom_sig_T_2 = orr(_notCDom_sig_T_1) @[MulAddRecFN.scala 252:35]
    node _notCDom_sig_T_3 = or(_notCDom_sig_T_2, notCDom_reduced4SigExtra) @[MulAddRecFN.scala 252:39]
    node notCDom_sig = cat(_notCDom_sig_T, _notCDom_sig_T_3) @[Cat.scala 33:92]
    node _notCDom_completeCancellation_T = bits(notCDom_sig, 26, 25) @[MulAddRecFN.scala 255:21]
    node notCDom_completeCancellation = eq(_notCDom_completeCancellation_T, UInt<1>("h0")) @[MulAddRecFN.scala 255:50]
    node _notCDom_sign_T = xor(io.fromPreMul.signProd, notCDom_signSigSum) @[MulAddRecFN.scala 259:36]
    node notCDom_sign = mux(notCDom_completeCancellation, roundingMode_min, _notCDom_sign_T) @[MulAddRecFN.scala 257:12]
    node notNaN_isInfProd = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 264:49]
    node notNaN_isInfOut = or(notNaN_isInfProd, io.fromPreMul.isInfC) @[MulAddRecFN.scala 265:44]
    node _notNaN_addZeros_T = or(io.fromPreMul.isZeroA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 267:32]
    node notNaN_addZeros = and(_notNaN_addZeros_T, io.fromPreMul.isZeroC) @[MulAddRecFN.scala 267:58]
    node _io_invalidExc_T = and(io.fromPreMul.isInfA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 272:31]
    node _io_invalidExc_T_1 = or(io.fromPreMul.isSigNaNAny, _io_invalidExc_T) @[MulAddRecFN.scala 271:35]
    node _io_invalidExc_T_2 = and(io.fromPreMul.isZeroA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 273:32]
    node _io_invalidExc_T_3 = or(_io_invalidExc_T_1, _io_invalidExc_T_2) @[MulAddRecFN.scala 272:57]
    node _io_invalidExc_T_4 = eq(io.fromPreMul.isNaNAOrB, UInt<1>("h0")) @[MulAddRecFN.scala 274:10]
    node _io_invalidExc_T_5 = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 275:36]
    node _io_invalidExc_T_6 = and(_io_invalidExc_T_4, _io_invalidExc_T_5) @[MulAddRecFN.scala 274:36]
    node _io_invalidExc_T_7 = and(_io_invalidExc_T_6, io.fromPreMul.isInfC) @[MulAddRecFN.scala 275:61]
    node _io_invalidExc_T_8 = and(_io_invalidExc_T_7, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 276:35]
    node _io_invalidExc_T_9 = or(_io_invalidExc_T_3, _io_invalidExc_T_8) @[MulAddRecFN.scala 273:57]
    io.invalidExc <= _io_invalidExc_T_9 @[MulAddRecFN.scala 270:19]
    node _io_rawOut_isNaN_T = or(io.fromPreMul.isNaNAOrB, io.fromPreMul.isNaNC) @[MulAddRecFN.scala 278:48]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulAddRecFN.scala 278:21]
    io.rawOut.isInf <= notNaN_isInfOut @[MulAddRecFN.scala 279:21]
    node _io_rawOut_isZero_T = eq(io.fromPreMul.CIsDominant, UInt<1>("h0")) @[MulAddRecFN.scala 283:14]
    node _io_rawOut_isZero_T_1 = and(_io_rawOut_isZero_T, notCDom_completeCancellation) @[MulAddRecFN.scala 283:42]
    node _io_rawOut_isZero_T_2 = or(notNaN_addZeros, _io_rawOut_isZero_T_1) @[MulAddRecFN.scala 282:25]
    io.rawOut.isZero <= _io_rawOut_isZero_T_2 @[MulAddRecFN.scala 281:22]
    node _io_rawOut_sign_T = and(notNaN_isInfProd, io.fromPreMul.signProd) @[MulAddRecFN.scala 285:27]
    node _io_rawOut_sign_T_1 = and(io.fromPreMul.isInfC, CDom_sign) @[MulAddRecFN.scala 286:31]
    node _io_rawOut_sign_T_2 = or(_io_rawOut_sign_T, _io_rawOut_sign_T_1) @[MulAddRecFN.scala 285:54]
    node _io_rawOut_sign_T_3 = eq(roundingMode_min, UInt<1>("h0")) @[MulAddRecFN.scala 287:29]
    node _io_rawOut_sign_T_4 = and(notNaN_addZeros, _io_rawOut_sign_T_3) @[MulAddRecFN.scala 287:26]
    node _io_rawOut_sign_T_5 = and(_io_rawOut_sign_T_4, io.fromPreMul.signProd) @[MulAddRecFN.scala 287:48]
    node _io_rawOut_sign_T_6 = and(_io_rawOut_sign_T_5, CDom_sign) @[MulAddRecFN.scala 288:36]
    node _io_rawOut_sign_T_7 = or(_io_rawOut_sign_T_2, _io_rawOut_sign_T_6) @[MulAddRecFN.scala 286:43]
    node _io_rawOut_sign_T_8 = and(notNaN_addZeros, roundingMode_min) @[MulAddRecFN.scala 289:26]
    node _io_rawOut_sign_T_9 = or(io.fromPreMul.signProd, CDom_sign) @[MulAddRecFN.scala 290:37]
    node _io_rawOut_sign_T_10 = and(_io_rawOut_sign_T_8, _io_rawOut_sign_T_9) @[MulAddRecFN.scala 289:46]
    node _io_rawOut_sign_T_11 = or(_io_rawOut_sign_T_7, _io_rawOut_sign_T_10) @[MulAddRecFN.scala 288:48]
    node _io_rawOut_sign_T_12 = eq(notNaN_isInfOut, UInt<1>("h0")) @[MulAddRecFN.scala 291:10]
    node _io_rawOut_sign_T_13 = eq(notNaN_addZeros, UInt<1>("h0")) @[MulAddRecFN.scala 291:31]
    node _io_rawOut_sign_T_14 = and(_io_rawOut_sign_T_12, _io_rawOut_sign_T_13) @[MulAddRecFN.scala 291:28]
    node _io_rawOut_sign_T_15 = mux(io.fromPreMul.CIsDominant, CDom_sign, notCDom_sign) @[MulAddRecFN.scala 292:17]
    node _io_rawOut_sign_T_16 = and(_io_rawOut_sign_T_14, _io_rawOut_sign_T_15) @[MulAddRecFN.scala 291:49]
    node _io_rawOut_sign_T_17 = or(_io_rawOut_sign_T_11, _io_rawOut_sign_T_16) @[MulAddRecFN.scala 290:50]
    io.rawOut.sign <= _io_rawOut_sign_T_17 @[MulAddRecFN.scala 284:20]
    node _io_rawOut_sExp_T = mux(io.fromPreMul.CIsDominant, CDom_sExp, notCDom_sExp) @[MulAddRecFN.scala 293:26]
    io.rawOut.sExp <= _io_rawOut_sExp_T @[MulAddRecFN.scala 293:20]
    node _io_rawOut_sig_T = mux(io.fromPreMul.CIsDominant, CDom_sig, notCDom_sig) @[MulAddRecFN.scala 294:25]
    io.rawOut.sig <= _io_rawOut_sig_T @[MulAddRecFN.scala 294:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulAddRecFN_e8_s24 :
    output io : { flip op : UInt<2>, flip a : UInt<33>, flip b : UInt<33>, flip c : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulAddRecFNToRaw_preMul of MulAddRecFNToRaw_preMul_e8_s24 @[MulAddRecFN.scala 317:15]
    inst mulAddRecFNToRaw_postMul of MulAddRecFNToRaw_postMul_e8_s24 @[MulAddRecFN.scala 319:15]
    mulAddRecFNToRaw_preMul.io.op <= io.op @[MulAddRecFN.scala 321:35]
    mulAddRecFNToRaw_preMul.io.a <= io.a @[MulAddRecFN.scala 322:35]
    mulAddRecFNToRaw_preMul.io.b <= io.b @[MulAddRecFN.scala 323:35]
    mulAddRecFNToRaw_preMul.io.c <= io.c @[MulAddRecFN.scala 324:35]
    node _mulAddResult_T = mul(mulAddRecFNToRaw_preMul.io.mulAddA, mulAddRecFNToRaw_preMul.io.mulAddB) @[MulAddRecFN.scala 327:45]
    node mulAddResult = add(_mulAddResult_T, mulAddRecFNToRaw_preMul.io.mulAddC) @[MulAddRecFN.scala 328:50]
    mulAddRecFNToRaw_postMul.io.fromPreMul.bit0AlignedSigC <= mulAddRecFNToRaw_preMul.io.toPostMul.bit0AlignedSigC @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.highAlignedSigC <= mulAddRecFNToRaw_preMul.io.toPostMul.highAlignedSigC @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.CDom_CAlignDist <= mulAddRecFNToRaw_preMul.io.toPostMul.CDom_CAlignDist @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.CIsDominant <= mulAddRecFNToRaw_preMul.io.toPostMul.CIsDominant @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.doSubMags <= mulAddRecFNToRaw_preMul.io.toPostMul.doSubMags @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.sExpSum <= mulAddRecFNToRaw_preMul.io.toPostMul.sExpSum @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isZeroC <= mulAddRecFNToRaw_preMul.io.toPostMul.isZeroC @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isInfC <= mulAddRecFNToRaw_preMul.io.toPostMul.isInfC @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isNaNC <= mulAddRecFNToRaw_preMul.io.toPostMul.isNaNC @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.signProd <= mulAddRecFNToRaw_preMul.io.toPostMul.signProd @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isZeroB <= mulAddRecFNToRaw_preMul.io.toPostMul.isZeroB @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isInfB <= mulAddRecFNToRaw_preMul.io.toPostMul.isInfB @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isZeroA <= mulAddRecFNToRaw_preMul.io.toPostMul.isZeroA @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isInfA <= mulAddRecFNToRaw_preMul.io.toPostMul.isInfA @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isNaNAOrB <= mulAddRecFNToRaw_preMul.io.toPostMul.isNaNAOrB @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.fromPreMul.isSigNaNAny <= mulAddRecFNToRaw_preMul.io.toPostMul.isSigNaNAny @[MulAddRecFN.scala 331:44]
    mulAddRecFNToRaw_postMul.io.mulAddResult <= mulAddResult @[MulAddRecFN.scala 333:46]
    mulAddRecFNToRaw_postMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 334:46]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24 @[MulAddRecFN.scala 339:15]
    roundRawFNToRecFN.io.invalidExc <= mulAddRecFNToRaw_postMul.io.invalidExc @[MulAddRecFN.scala 340:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulAddRecFN.scala 341:39]
    roundRawFNToRecFN.io.in.sig <= mulAddRecFNToRaw_postMul.io.rawOut.sig @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.in.sExp <= mulAddRecFNToRaw_postMul.io.rawOut.sExp @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.in.sign <= mulAddRecFNToRaw_postMul.io.rawOut.sign @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.in.isZero <= mulAddRecFNToRaw_postMul.io.rawOut.isZero @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.in.isInf <= mulAddRecFNToRaw_postMul.io.rawOut.isInf @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.in.isNaN <= mulAddRecFNToRaw_postMul.io.rawOut.isNaN @[MulAddRecFN.scala 342:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 343:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulAddRecFN.scala 344:41]
    io.out <= roundRawFNToRecFN.io.out @[MulAddRecFN.scala 345:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulAddRecFN.scala 346:23]

  module AddRawFN :
    output io : { flip subOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    node effSignB = xor(io.b.sign, io.subOp) @[AddRecFN.scala 60:30]
    node eqSigns = eq(io.a.sign, effSignB) @[AddRecFN.scala 61:29]
    node notEqSigns_signZero = eq(io.roundingMode, UInt<3>("h2")) @[AddRecFN.scala 62:47]
    node _sDiffExps_T = sub(io.a.sExp, io.b.sExp) @[AddRecFN.scala 63:31]
    node _sDiffExps_T_1 = tail(_sDiffExps_T, 1) @[AddRecFN.scala 63:31]
    node sDiffExps = asSInt(_sDiffExps_T_1) @[AddRecFN.scala 63:31]
    node _modNatAlignDist_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 64:41]
    node _modNatAlignDist_T_1 = sub(io.b.sExp, io.a.sExp) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_2 = tail(_modNatAlignDist_T_1, 1) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_3 = asSInt(_modNatAlignDist_T_2) @[AddRecFN.scala 64:58]
    node _modNatAlignDist_T_4 = mux(_modNatAlignDist_T, _modNatAlignDist_T_3, sDiffExps) @[AddRecFN.scala 64:30]
    node modNatAlignDist = bits(_modNatAlignDist_T_4, 4, 0) @[AddRecFN.scala 64:81]
    node _isMaxAlign_T = shr(sDiffExps, 5) @[AddRecFN.scala 66:19]
    node _isMaxAlign_T_1 = neq(_isMaxAlign_T, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 66:37]
    node _isMaxAlign_T_2 = shr(sDiffExps, 5) @[AddRecFN.scala 67:24]
    node _isMaxAlign_T_3 = neq(_isMaxAlign_T_2, asSInt(UInt<1>("h1"))) @[AddRecFN.scala 67:42]
    node _isMaxAlign_T_4 = bits(sDiffExps, 4, 0) @[AddRecFN.scala 67:63]
    node _isMaxAlign_T_5 = eq(_isMaxAlign_T_4, UInt<1>("h0")) @[AddRecFN.scala 67:87]
    node _isMaxAlign_T_6 = or(_isMaxAlign_T_3, _isMaxAlign_T_5) @[AddRecFN.scala 67:51]
    node isMaxAlign = and(_isMaxAlign_T_1, _isMaxAlign_T_6) @[AddRecFN.scala 66:45]
    node alignDist = mux(isMaxAlign, UInt<5>("h1f"), modNatAlignDist) @[AddRecFN.scala 68:24]
    node _closeSubMags_T = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 69:24]
    node _closeSubMags_T_1 = eq(isMaxAlign, UInt<1>("h0")) @[AddRecFN.scala 69:36]
    node _closeSubMags_T_2 = and(_closeSubMags_T, _closeSubMags_T_1) @[AddRecFN.scala 69:33]
    node _closeSubMags_T_3 = leq(modNatAlignDist, UInt<1>("h1")) @[AddRecFN.scala 69:68]
    node closeSubMags = and(_closeSubMags_T_2, _closeSubMags_T_3) @[AddRecFN.scala 69:48]
    node _close_alignedSigA_T = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 73:18]
    node _close_alignedSigA_T_1 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 73:45]
    node _close_alignedSigA_T_2 = and(_close_alignedSigA_T, _close_alignedSigA_T_1) @[AddRecFN.scala 73:32]
    node _close_alignedSigA_T_3 = shl(io.a.sig, 2) @[AddRecFN.scala 73:58]
    node _close_alignedSigA_T_4 = mux(_close_alignedSigA_T_2, _close_alignedSigA_T_3, UInt<1>("h0")) @[AddRecFN.scala 73:12]
    node _close_alignedSigA_T_5 = leq(asSInt(UInt<1>("h0")), sDiffExps) @[AddRecFN.scala 74:18]
    node _close_alignedSigA_T_6 = bits(sDiffExps, 0, 0) @[AddRecFN.scala 74:45]
    node _close_alignedSigA_T_7 = eq(_close_alignedSigA_T_6, UInt<1>("h0")) @[AddRecFN.scala 74:35]
    node _close_alignedSigA_T_8 = and(_close_alignedSigA_T_5, _close_alignedSigA_T_7) @[AddRecFN.scala 74:32]
    node _close_alignedSigA_T_9 = shl(io.a.sig, 1) @[AddRecFN.scala 74:58]
    node _close_alignedSigA_T_10 = mux(_close_alignedSigA_T_8, _close_alignedSigA_T_9, UInt<1>("h0")) @[AddRecFN.scala 74:12]
    node _close_alignedSigA_T_11 = or(_close_alignedSigA_T_4, _close_alignedSigA_T_10) @[AddRecFN.scala 73:68]
    node _close_alignedSigA_T_12 = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 75:24]
    node _close_alignedSigA_T_13 = mux(_close_alignedSigA_T_12, io.a.sig, UInt<1>("h0")) @[AddRecFN.scala 75:12]
    node close_alignedSigA = or(_close_alignedSigA_T_11, _close_alignedSigA_T_13) @[AddRecFN.scala 74:68]
    node _close_sSigSum_T = asSInt(close_alignedSigA) @[AddRecFN.scala 76:43]
    node _close_sSigSum_T_1 = shl(io.b.sig, 1) @[AddRecFN.scala 76:61]
    node _close_sSigSum_T_2 = asSInt(_close_sSigSum_T_1) @[AddRecFN.scala 76:66]
    node _close_sSigSum_T_3 = sub(_close_sSigSum_T, _close_sSigSum_T_2) @[AddRecFN.scala 76:50]
    node _close_sSigSum_T_4 = tail(_close_sSigSum_T_3, 1) @[AddRecFN.scala 76:50]
    node close_sSigSum = asSInt(_close_sSigSum_T_4) @[AddRecFN.scala 76:50]
    node _close_sigSum_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 77:42]
    node _close_sigSum_T_1 = sub(asSInt(UInt<1>("h0")), close_sSigSum) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_2 = tail(_close_sigSum_T_1, 1) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_3 = asSInt(_close_sigSum_T_2) @[AddRecFN.scala 77:49]
    node _close_sigSum_T_4 = mux(_close_sigSum_T, _close_sigSum_T_3, close_sSigSum) @[AddRecFN.scala 77:27]
    node close_sigSum = bits(_close_sigSum_T_4, 25, 0) @[AddRecFN.scala 77:79]
    node close_adjustedSigSum = shl(close_sigSum, 0) @[AddRecFN.scala 78:44]
    wire close_reduced2SigSum_reducedVec : UInt<1>[13] @[primitives.scala 101:30]
    node _close_reduced2SigSum_reducedVec_0_T = bits(close_adjustedSigSum, 1, 0) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_0_T_1 = orr(_close_reduced2SigSum_reducedVec_0_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[0] <= _close_reduced2SigSum_reducedVec_0_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_1_T = bits(close_adjustedSigSum, 3, 2) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_1_T_1 = orr(_close_reduced2SigSum_reducedVec_1_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[1] <= _close_reduced2SigSum_reducedVec_1_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_2_T = bits(close_adjustedSigSum, 5, 4) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_2_T_1 = orr(_close_reduced2SigSum_reducedVec_2_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[2] <= _close_reduced2SigSum_reducedVec_2_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_3_T = bits(close_adjustedSigSum, 7, 6) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_3_T_1 = orr(_close_reduced2SigSum_reducedVec_3_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[3] <= _close_reduced2SigSum_reducedVec_3_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_4_T = bits(close_adjustedSigSum, 9, 8) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_4_T_1 = orr(_close_reduced2SigSum_reducedVec_4_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[4] <= _close_reduced2SigSum_reducedVec_4_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_5_T = bits(close_adjustedSigSum, 11, 10) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_5_T_1 = orr(_close_reduced2SigSum_reducedVec_5_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[5] <= _close_reduced2SigSum_reducedVec_5_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_6_T = bits(close_adjustedSigSum, 13, 12) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_6_T_1 = orr(_close_reduced2SigSum_reducedVec_6_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[6] <= _close_reduced2SigSum_reducedVec_6_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_7_T = bits(close_adjustedSigSum, 15, 14) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_7_T_1 = orr(_close_reduced2SigSum_reducedVec_7_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[7] <= _close_reduced2SigSum_reducedVec_7_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_8_T = bits(close_adjustedSigSum, 17, 16) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_8_T_1 = orr(_close_reduced2SigSum_reducedVec_8_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[8] <= _close_reduced2SigSum_reducedVec_8_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_9_T = bits(close_adjustedSigSum, 19, 18) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_9_T_1 = orr(_close_reduced2SigSum_reducedVec_9_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[9] <= _close_reduced2SigSum_reducedVec_9_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_10_T = bits(close_adjustedSigSum, 21, 20) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_10_T_1 = orr(_close_reduced2SigSum_reducedVec_10_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[10] <= _close_reduced2SigSum_reducedVec_10_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_11_T = bits(close_adjustedSigSum, 23, 22) @[primitives.scala 103:33]
    node _close_reduced2SigSum_reducedVec_11_T_1 = orr(_close_reduced2SigSum_reducedVec_11_T) @[primitives.scala 103:54]
    close_reduced2SigSum_reducedVec[11] <= _close_reduced2SigSum_reducedVec_11_T_1 @[primitives.scala 103:28]
    node _close_reduced2SigSum_reducedVec_12_T = bits(close_adjustedSigSum, 25, 24) @[primitives.scala 106:15]
    node _close_reduced2SigSum_reducedVec_12_T_1 = orr(_close_reduced2SigSum_reducedVec_12_T) @[primitives.scala 106:57]
    close_reduced2SigSum_reducedVec[12] <= _close_reduced2SigSum_reducedVec_12_T_1 @[primitives.scala 105:38]
    node close_reduced2SigSum_lo_lo_hi = cat(close_reduced2SigSum_reducedVec[2], close_reduced2SigSum_reducedVec[1]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_lo = cat(close_reduced2SigSum_lo_lo_hi, close_reduced2SigSum_reducedVec[0]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi_hi = cat(close_reduced2SigSum_reducedVec[5], close_reduced2SigSum_reducedVec[4]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo_hi = cat(close_reduced2SigSum_lo_hi_hi, close_reduced2SigSum_reducedVec[3]) @[primitives.scala 107:20]
    node close_reduced2SigSum_lo = cat(close_reduced2SigSum_lo_hi, close_reduced2SigSum_lo_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo_hi = cat(close_reduced2SigSum_reducedVec[8], close_reduced2SigSum_reducedVec[7]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_lo = cat(close_reduced2SigSum_hi_lo_hi, close_reduced2SigSum_reducedVec[6]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_lo = cat(close_reduced2SigSum_reducedVec[10], close_reduced2SigSum_reducedVec[9]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi_hi = cat(close_reduced2SigSum_reducedVec[12], close_reduced2SigSum_reducedVec[11]) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi_hi = cat(close_reduced2SigSum_hi_hi_hi, close_reduced2SigSum_hi_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum_hi = cat(close_reduced2SigSum_hi_hi, close_reduced2SigSum_hi_lo) @[primitives.scala 107:20]
    node close_reduced2SigSum = cat(close_reduced2SigSum_hi, close_reduced2SigSum_lo) @[primitives.scala 107:20]
    node _close_normDistReduced2_T = bits(close_reduced2SigSum, 0, 0) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_1 = bits(close_reduced2SigSum, 1, 1) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_2 = bits(close_reduced2SigSum, 2, 2) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_3 = bits(close_reduced2SigSum, 3, 3) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_4 = bits(close_reduced2SigSum, 4, 4) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_5 = bits(close_reduced2SigSum, 5, 5) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_6 = bits(close_reduced2SigSum, 6, 6) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_7 = bits(close_reduced2SigSum, 7, 7) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_8 = bits(close_reduced2SigSum, 8, 8) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_9 = bits(close_reduced2SigSum, 9, 9) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_10 = bits(close_reduced2SigSum, 10, 10) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_11 = bits(close_reduced2SigSum, 11, 11) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_12 = bits(close_reduced2SigSum, 12, 12) @[primitives.scala 91:52]
    node _close_normDistReduced2_T_13 = mux(_close_normDistReduced2_T_1, UInt<4>("hb"), UInt<4>("hc")) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_14 = mux(_close_normDistReduced2_T_2, UInt<4>("ha"), _close_normDistReduced2_T_13) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_15 = mux(_close_normDistReduced2_T_3, UInt<4>("h9"), _close_normDistReduced2_T_14) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_16 = mux(_close_normDistReduced2_T_4, UInt<4>("h8"), _close_normDistReduced2_T_15) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_17 = mux(_close_normDistReduced2_T_5, UInt<3>("h7"), _close_normDistReduced2_T_16) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_18 = mux(_close_normDistReduced2_T_6, UInt<3>("h6"), _close_normDistReduced2_T_17) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_19 = mux(_close_normDistReduced2_T_7, UInt<3>("h5"), _close_normDistReduced2_T_18) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_20 = mux(_close_normDistReduced2_T_8, UInt<3>("h4"), _close_normDistReduced2_T_19) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_21 = mux(_close_normDistReduced2_T_9, UInt<2>("h3"), _close_normDistReduced2_T_20) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_22 = mux(_close_normDistReduced2_T_10, UInt<2>("h2"), _close_normDistReduced2_T_21) @[Mux.scala 47:70]
    node _close_normDistReduced2_T_23 = mux(_close_normDistReduced2_T_11, UInt<1>("h1"), _close_normDistReduced2_T_22) @[Mux.scala 47:70]
    node close_normDistReduced2 = mux(_close_normDistReduced2_T_12, UInt<1>("h0"), _close_normDistReduced2_T_23) @[Mux.scala 47:70]
    node _close_nearNormDist_T = shl(close_normDistReduced2, 1) @[AddRecFN.scala 81:53]
    node close_nearNormDist = bits(_close_nearNormDist_T, 4, 0) @[AddRecFN.scala 81:57]
    node _close_sigOut_T = dshl(close_sigSum, close_nearNormDist) @[AddRecFN.scala 82:38]
    node _close_sigOut_T_1 = shl(_close_sigOut_T, 1) @[AddRecFN.scala 82:59]
    node close_sigOut = bits(_close_sigOut_T_1, 26, 0) @[AddRecFN.scala 82:63]
    node _close_totalCancellation_T = bits(close_sigOut, 26, 25) @[AddRecFN.scala 83:49]
    node _close_totalCancellation_T_1 = orr(_close_totalCancellation_T) @[AddRecFN.scala 83:82]
    node close_totalCancellation = eq(_close_totalCancellation_T_1, UInt<1>("h0")) @[AddRecFN.scala 83:35]
    node _close_notTotalCancellation_signOut_T = lt(close_sSigSum, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 84:73]
    node close_notTotalCancellation_signOut = xor(io.a.sign, _close_notTotalCancellation_signOut_T) @[AddRecFN.scala 84:56]
    node _far_signOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 87:37]
    node far_signOut = mux(_far_signOut_T, effSignB, io.a.sign) @[AddRecFN.scala 87:26]
    node _far_sigLarger_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 88:40]
    node _far_sigLarger_T_1 = mux(_far_sigLarger_T, io.b.sig, io.a.sig) @[AddRecFN.scala 88:29]
    node far_sigLarger = bits(_far_sigLarger_T_1, 23, 0) @[AddRecFN.scala 88:66]
    node _far_sigSmaller_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 89:40]
    node _far_sigSmaller_T_1 = mux(_far_sigSmaller_T, io.a.sig, io.b.sig) @[AddRecFN.scala 89:29]
    node far_sigSmaller = bits(_far_sigSmaller_T_1, 23, 0) @[AddRecFN.scala 89:66]
    node _far_mainAlignedSigSmaller_T = shl(far_sigSmaller, 5) @[AddRecFN.scala 90:52]
    node far_mainAlignedSigSmaller = dshr(_far_mainAlignedSigSmaller_T, alignDist) @[AddRecFN.scala 90:56]
    node _far_reduced4SigSmaller_T = shl(far_sigSmaller, 2) @[AddRecFN.scala 91:60]
    wire far_reduced4SigSmaller_reducedVec : UInt<1>[7] @[primitives.scala 118:30]
    node _far_reduced4SigSmaller_reducedVec_0_T = bits(_far_reduced4SigSmaller_T, 3, 0) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_0_T_1 = orr(_far_reduced4SigSmaller_reducedVec_0_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[0] <= _far_reduced4SigSmaller_reducedVec_0_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_1_T = bits(_far_reduced4SigSmaller_T, 7, 4) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_1_T_1 = orr(_far_reduced4SigSmaller_reducedVec_1_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[1] <= _far_reduced4SigSmaller_reducedVec_1_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_2_T = bits(_far_reduced4SigSmaller_T, 11, 8) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_2_T_1 = orr(_far_reduced4SigSmaller_reducedVec_2_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[2] <= _far_reduced4SigSmaller_reducedVec_2_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_3_T = bits(_far_reduced4SigSmaller_T, 15, 12) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_3_T_1 = orr(_far_reduced4SigSmaller_reducedVec_3_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[3] <= _far_reduced4SigSmaller_reducedVec_3_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_4_T = bits(_far_reduced4SigSmaller_T, 19, 16) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_4_T_1 = orr(_far_reduced4SigSmaller_reducedVec_4_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[4] <= _far_reduced4SigSmaller_reducedVec_4_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_5_T = bits(_far_reduced4SigSmaller_T, 23, 20) @[primitives.scala 120:33]
    node _far_reduced4SigSmaller_reducedVec_5_T_1 = orr(_far_reduced4SigSmaller_reducedVec_5_T) @[primitives.scala 120:54]
    far_reduced4SigSmaller_reducedVec[5] <= _far_reduced4SigSmaller_reducedVec_5_T_1 @[primitives.scala 120:28]
    node _far_reduced4SigSmaller_reducedVec_6_T = bits(_far_reduced4SigSmaller_T, 25, 24) @[primitives.scala 123:15]
    node _far_reduced4SigSmaller_reducedVec_6_T_1 = orr(_far_reduced4SigSmaller_reducedVec_6_T) @[primitives.scala 123:57]
    far_reduced4SigSmaller_reducedVec[6] <= _far_reduced4SigSmaller_reducedVec_6_T_1 @[primitives.scala 122:38]
    node far_reduced4SigSmaller_lo_hi = cat(far_reduced4SigSmaller_reducedVec[2], far_reduced4SigSmaller_reducedVec[1]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_lo = cat(far_reduced4SigSmaller_lo_hi, far_reduced4SigSmaller_reducedVec[0]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_lo = cat(far_reduced4SigSmaller_reducedVec[4], far_reduced4SigSmaller_reducedVec[3]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi_hi = cat(far_reduced4SigSmaller_reducedVec[6], far_reduced4SigSmaller_reducedVec[5]) @[primitives.scala 124:20]
    node far_reduced4SigSmaller_hi = cat(far_reduced4SigSmaller_hi_hi, far_reduced4SigSmaller_hi_lo) @[primitives.scala 124:20]
    node far_reduced4SigSmaller = cat(far_reduced4SigSmaller_hi, far_reduced4SigSmaller_lo) @[primitives.scala 124:20]
    node _far_roundExtraMask_T = bits(alignDist, 4, 2) @[AddRecFN.scala 92:47]
    node far_roundExtraMask_shift = dshr(asSInt(UInt<9>("h100")), _far_roundExtraMask_T) @[primitives.scala 76:56]
    node _far_roundExtraMask_T_1 = bits(far_roundExtraMask_shift, 7, 1) @[primitives.scala 78:22]
    node _far_roundExtraMask_T_2 = bits(_far_roundExtraMask_T_1, 3, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_3 = bits(_far_roundExtraMask_T_2, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_4 = bits(_far_roundExtraMask_T_3, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_5 = bits(_far_roundExtraMask_T_3, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_6 = cat(_far_roundExtraMask_T_4, _far_roundExtraMask_T_5) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_7 = bits(_far_roundExtraMask_T_2, 3, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_8 = bits(_far_roundExtraMask_T_7, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_9 = bits(_far_roundExtraMask_T_7, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_10 = cat(_far_roundExtraMask_T_8, _far_roundExtraMask_T_9) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_11 = cat(_far_roundExtraMask_T_6, _far_roundExtraMask_T_10) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_12 = bits(_far_roundExtraMask_T_1, 6, 4) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_13 = bits(_far_roundExtraMask_T_12, 1, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_14 = bits(_far_roundExtraMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _far_roundExtraMask_T_15 = bits(_far_roundExtraMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_16 = cat(_far_roundExtraMask_T_14, _far_roundExtraMask_T_15) @[Cat.scala 33:92]
    node _far_roundExtraMask_T_17 = bits(_far_roundExtraMask_T_12, 2, 2) @[Bitwise.scala 114:47]
    node _far_roundExtraMask_T_18 = cat(_far_roundExtraMask_T_16, _far_roundExtraMask_T_17) @[Cat.scala 33:92]
    node far_roundExtraMask = cat(_far_roundExtraMask_T_11, _far_roundExtraMask_T_18) @[Cat.scala 33:92]
    node _far_alignedSigSmaller_T = shr(far_mainAlignedSigSmaller, 3) @[AddRecFN.scala 94:38]
    node _far_alignedSigSmaller_T_1 = bits(far_mainAlignedSigSmaller, 2, 0) @[AddRecFN.scala 95:38]
    node _far_alignedSigSmaller_T_2 = orr(_far_alignedSigSmaller_T_1) @[AddRecFN.scala 95:45]
    node _far_alignedSigSmaller_T_3 = and(far_reduced4SigSmaller, far_roundExtraMask) @[AddRecFN.scala 95:76]
    node _far_alignedSigSmaller_T_4 = orr(_far_alignedSigSmaller_T_3) @[AddRecFN.scala 95:98]
    node _far_alignedSigSmaller_T_5 = or(_far_alignedSigSmaller_T_2, _far_alignedSigSmaller_T_4) @[AddRecFN.scala 95:49]
    node far_alignedSigSmaller = cat(_far_alignedSigSmaller_T, _far_alignedSigSmaller_T_5) @[Cat.scala 33:92]
    node far_subMags = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 96:23]
    node _far_negAlignedSigSmaller_T = not(far_alignedSigSmaller) @[AddRecFN.scala 97:62]
    node _far_negAlignedSigSmaller_T_1 = cat(UInt<1>("h1"), _far_negAlignedSigSmaller_T) @[Cat.scala 33:92]
    node far_negAlignedSigSmaller = mux(far_subMags, _far_negAlignedSigSmaller_T_1, far_alignedSigSmaller) @[AddRecFN.scala 97:39]
    node _far_sigSum_T = shl(far_sigLarger, 3) @[AddRecFN.scala 98:36]
    node _far_sigSum_T_1 = add(_far_sigSum_T, far_negAlignedSigSmaller) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_2 = tail(_far_sigSum_T_1, 1) @[AddRecFN.scala 98:41]
    node _far_sigSum_T_3 = add(_far_sigSum_T_2, far_subMags) @[AddRecFN.scala 98:68]
    node far_sigSum = tail(_far_sigSum_T_3, 1) @[AddRecFN.scala 98:68]
    node _far_sigOut_T = shr(far_sigSum, 1) @[AddRecFN.scala 99:62]
    node _far_sigOut_T_1 = bits(far_sigSum, 0, 0) @[AddRecFN.scala 99:79]
    node _far_sigOut_T_2 = or(_far_sigOut_T, _far_sigOut_T_1) @[AddRecFN.scala 99:67]
    node _far_sigOut_T_3 = mux(far_subMags, far_sigSum, _far_sigOut_T_2) @[AddRecFN.scala 99:25]
    node far_sigOut = bits(_far_sigOut_T_3, 26, 0) @[AddRecFN.scala 99:83]
    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isInf) @[AddRecFN.scala 102:43]
    node _notSigNaN_invalidExc_T_1 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 102:60]
    node notSigNaN_invalidExc = and(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[AddRecFN.scala 102:57]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[AddRecFN.scala 103:38]
    node addZeros = and(io.a.isZero, io.b.isZero) @[AddRecFN.scala 104:32]
    node notNaN_specialCase = or(notNaN_isInfOut, addZeros) @[AddRecFN.scala 105:46]
    node _notNaN_isZeroOut_T = eq(notNaN_isInfOut, UInt<1>("h0")) @[AddRecFN.scala 106:41]
    node _notNaN_isZeroOut_T_1 = and(_notNaN_isZeroOut_T, closeSubMags) @[AddRecFN.scala 106:58]
    node _notNaN_isZeroOut_T_2 = and(_notNaN_isZeroOut_T_1, close_totalCancellation) @[AddRecFN.scala 106:74]
    node notNaN_isZeroOut = or(addZeros, _notNaN_isZeroOut_T_2) @[AddRecFN.scala 106:37]
    node _notNaN_signOut_T = and(eqSigns, io.a.sign) @[AddRecFN.scala 108:39]
    node _notNaN_signOut_T_1 = and(io.a.isInf, io.a.sign) @[AddRecFN.scala 109:39]
    node _notNaN_signOut_T_2 = or(_notNaN_signOut_T, _notNaN_signOut_T_1) @[AddRecFN.scala 108:63]
    node _notNaN_signOut_T_3 = and(io.b.isInf, effSignB) @[AddRecFN.scala 110:39]
    node _notNaN_signOut_T_4 = or(_notNaN_signOut_T_2, _notNaN_signOut_T_3) @[AddRecFN.scala 109:63]
    node _notNaN_signOut_T_5 = eq(eqSigns, UInt<1>("h0")) @[AddRecFN.scala 111:30]
    node _notNaN_signOut_T_6 = and(notNaN_isZeroOut, _notNaN_signOut_T_5) @[AddRecFN.scala 111:27]
    node _notNaN_signOut_T_7 = and(_notNaN_signOut_T_6, notEqSigns_signZero) @[AddRecFN.scala 111:39]
    node _notNaN_signOut_T_8 = or(_notNaN_signOut_T_4, _notNaN_signOut_T_7) @[AddRecFN.scala 110:63]
    node _notNaN_signOut_T_9 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 112:10]
    node _notNaN_signOut_T_10 = and(_notNaN_signOut_T_9, closeSubMags) @[AddRecFN.scala 112:30]
    node _notNaN_signOut_T_11 = eq(close_totalCancellation, UInt<1>("h0")) @[AddRecFN.scala 112:49]
    node _notNaN_signOut_T_12 = and(_notNaN_signOut_T_10, _notNaN_signOut_T_11) @[AddRecFN.scala 112:46]
    node _notNaN_signOut_T_13 = and(_notNaN_signOut_T_12, close_notTotalCancellation_signOut) @[AddRecFN.scala 113:38]
    node _notNaN_signOut_T_14 = or(_notNaN_signOut_T_8, _notNaN_signOut_T_13) @[AddRecFN.scala 111:63]
    node _notNaN_signOut_T_15 = eq(notNaN_specialCase, UInt<1>("h0")) @[AddRecFN.scala 114:10]
    node _notNaN_signOut_T_16 = eq(closeSubMags, UInt<1>("h0")) @[AddRecFN.scala 114:33]
    node _notNaN_signOut_T_17 = and(_notNaN_signOut_T_15, _notNaN_signOut_T_16) @[AddRecFN.scala 114:30]
    node _notNaN_signOut_T_18 = and(_notNaN_signOut_T_17, far_signOut) @[AddRecFN.scala 114:47]
    node notNaN_signOut = or(_notNaN_signOut_T_14, _notNaN_signOut_T_18) @[AddRecFN.scala 113:77]
    node _common_sExpOut_T = lt(sDiffExps, asSInt(UInt<1>("h0"))) @[AddRecFN.scala 116:41]
    node _common_sExpOut_T_1 = or(closeSubMags, _common_sExpOut_T) @[AddRecFN.scala 116:27]
    node _common_sExpOut_T_2 = mux(_common_sExpOut_T_1, io.b.sExp, io.a.sExp) @[AddRecFN.scala 116:13]
    node _common_sExpOut_T_3 = mux(closeSubMags, close_nearNormDist, far_subMags) @[AddRecFN.scala 117:18]
    node _common_sExpOut_T_4 = cvt(_common_sExpOut_T_3) @[AddRecFN.scala 117:66]
    node _common_sExpOut_T_5 = sub(_common_sExpOut_T_2, _common_sExpOut_T_4) @[AddRecFN.scala 117:13]
    node _common_sExpOut_T_6 = tail(_common_sExpOut_T_5, 1) @[AddRecFN.scala 117:13]
    node common_sExpOut = asSInt(_common_sExpOut_T_6) @[AddRecFN.scala 117:13]
    node common_sigOut = mux(closeSubMags, close_sigOut, far_sigOut) @[AddRecFN.scala 118:28]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[AddRecFN.scala 121:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[AddRecFN.scala 121:71]
    io.invalidExc <= _io_invalidExc_T_7 @[AddRecFN.scala 121:19]
    io.rawOut.isInf <= notNaN_isInfOut @[AddRecFN.scala 122:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[AddRecFN.scala 123:22]
    io.rawOut.sExp <= common_sExpOut @[AddRecFN.scala 124:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[AddRecFN.scala 125:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[AddRecFN.scala 125:21]
    io.rawOut.sign <= notNaN_signOut @[AddRecFN.scala 126:20]
    io.rawOut.sig <= common_sigOut @[AddRecFN.scala 127:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_1 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_1 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_1 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module AddRecFN :
    output io : { flip subOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst addRawFN of AddRawFN @[AddRecFN.scala 147:26]
    addRawFN.io.subOp <= io.subOp @[AddRecFN.scala 149:30]
    node addRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_a_isZero_T = bits(addRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_a_isZero = eq(_addRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_a_isSpecial_T = bits(addRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_a_isSpecial = eq(_addRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_a_out_isNaN_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_a_out_isNaN_T_1 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_a_out.isNaN <= _addRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_a_out_isInf_T = bits(addRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_a_out_isInf_T_1 = eq(_addRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_a_out_isInf_T_2 = and(addRawFN_io_a_isSpecial, _addRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_a_out.isInf <= _addRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_a_out.isZero <= addRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_a_out.sign <= _addRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_a_out_sExp_T = cvt(addRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_a_out.sExp <= _addRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_a_out_sig_T = eq(addRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_a_out_sig_T_3 = cat(_addRawFN_io_a_out_sig_T_1, _addRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_a_out.sig <= _addRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.a.sig <= addRawFN_io_a_out.sig @[AddRecFN.scala 150:30]
    addRawFN.io.a.sExp <= addRawFN_io_a_out.sExp @[AddRecFN.scala 150:30]
    addRawFN.io.a.sign <= addRawFN_io_a_out.sign @[AddRecFN.scala 150:30]
    addRawFN.io.a.isZero <= addRawFN_io_a_out.isZero @[AddRecFN.scala 150:30]
    addRawFN.io.a.isInf <= addRawFN_io_a_out.isInf @[AddRecFN.scala 150:30]
    addRawFN.io.a.isNaN <= addRawFN_io_a_out.isNaN @[AddRecFN.scala 150:30]
    node addRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _addRawFN_io_b_isZero_T = bits(addRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node addRawFN_io_b_isZero = eq(_addRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _addRawFN_io_b_isSpecial_T = bits(addRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node addRawFN_io_b_isSpecial = eq(_addRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire addRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _addRawFN_io_b_out_isNaN_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _addRawFN_io_b_out_isNaN_T_1 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    addRawFN_io_b_out.isNaN <= _addRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _addRawFN_io_b_out_isInf_T = bits(addRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _addRawFN_io_b_out_isInf_T_1 = eq(_addRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _addRawFN_io_b_out_isInf_T_2 = and(addRawFN_io_b_isSpecial, _addRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    addRawFN_io_b_out.isInf <= _addRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    addRawFN_io_b_out.isZero <= addRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _addRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    addRawFN_io_b_out.sign <= _addRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _addRawFN_io_b_out_sExp_T = cvt(addRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    addRawFN_io_b_out.sExp <= _addRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _addRawFN_io_b_out_sig_T = eq(addRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _addRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _addRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _addRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _addRawFN_io_b_out_sig_T_3 = cat(_addRawFN_io_b_out_sig_T_1, _addRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    addRawFN_io_b_out.sig <= _addRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    addRawFN.io.b.sig <= addRawFN_io_b_out.sig @[AddRecFN.scala 151:30]
    addRawFN.io.b.sExp <= addRawFN_io_b_out.sExp @[AddRecFN.scala 151:30]
    addRawFN.io.b.sign <= addRawFN_io_b_out.sign @[AddRecFN.scala 151:30]
    addRawFN.io.b.isZero <= addRawFN_io_b_out.isZero @[AddRecFN.scala 151:30]
    addRawFN.io.b.isInf <= addRawFN_io_b_out.isInf @[AddRecFN.scala 151:30]
    addRawFN.io.b.isNaN <= addRawFN_io_b_out.isNaN @[AddRecFN.scala 151:30]
    addRawFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 152:30]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_1 @[AddRecFN.scala 157:15]
    roundRawFNToRecFN.io.invalidExc <= addRawFN.io.invalidExc @[AddRecFN.scala 158:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[AddRecFN.scala 159:39]
    roundRawFNToRecFN.io.in.sig <= addRawFN.io.rawOut.sig @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sExp <= addRawFN.io.rawOut.sExp @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.sign <= addRawFN.io.rawOut.sign @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isZero <= addRawFN.io.rawOut.isZero @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isInf <= addRawFN.io.rawOut.isInf @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.in.isNaN <= addRawFN.io.rawOut.isNaN @[AddRecFN.scala 160:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[AddRecFN.scala 161:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[AddRecFN.scala 162:41]
    io.out <= roundRawFNToRecFN.io.out @[AddRecFN.scala 163:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[AddRecFN.scala 164:23]

  module MulFullRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<48>}}

    node _notSigNaN_invalidExc_T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _notSigNaN_invalidExc_T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_notSigNaN_invalidExc_T, _notSigNaN_invalidExc_T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _common_sExpOut_T = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_1 = tail(_common_sExpOut_T, 1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_2 = asSInt(_common_sExpOut_T_1) @[MulRecFN.scala 62:36]
    node _common_sExpOut_T_3 = sub(_common_sExpOut_T_2, asSInt(UInt<10>("h100"))) @[MulRecFN.scala 62:48]
    node _common_sExpOut_T_4 = tail(_common_sExpOut_T_3, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_common_sExpOut_T_4) @[MulRecFN.scala 62:48]
    node _common_sigOut_T = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_common_sigOut_T, 47, 0) @[MulRecFN.scala 63:46]
    node _io_invalidExc_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_1 = eq(_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_2 = and(io.a.isNaN, _io_invalidExc_T_1) @[common.scala 82:46]
    node _io_invalidExc_T_3 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _io_invalidExc_T_4 = eq(_io_invalidExc_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_invalidExc_T_5 = and(io.b.isNaN, _io_invalidExc_T_4) @[common.scala 82:46]
    node _io_invalidExc_T_6 = or(_io_invalidExc_T_2, _io_invalidExc_T_5) @[MulRecFN.scala 66:45]
    node _io_invalidExc_T_7 = or(_io_invalidExc_T_6, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _io_invalidExc_T_7 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _io_rawOut_isNaN_T = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst mulFullRaw of MulFullRawFN @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut <= mulFullRaw.io.rawOut @[MulRecFN.scala 90:15]
    node _io_rawOut_sig_T = shr(mulFullRaw.io.rawOut.sig, 22) @[MulRecFN.scala 93:15]
    node _io_rawOut_sig_T_1 = bits(mulFullRaw.io.rawOut.sig, 21, 0) @[MulRecFN.scala 93:37]
    node _io_rawOut_sig_T_2 = orr(_io_rawOut_sig_T_1) @[MulRecFN.scala 93:55]
    node _io_rawOut_sig_T_3 = cat(_io_rawOut_sig_T, _io_rawOut_sig_T_2) @[Cat.scala 33:92]
    io.rawOut.sig <= _io_rawOut_sig_T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_2 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_2 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_2 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module MulRecFN :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst mulRawFN of MulRawFN @[MulRecFN.scala 113:26]
    node mulRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_a_isZero_T = bits(mulRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_a_isZero = eq(_mulRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_a_isSpecial_T = bits(mulRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_a_isSpecial = eq(_mulRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_a_out_isNaN_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_a_out_isNaN_T_1 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_a_out.isNaN <= _mulRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_a_out_isInf_T = bits(mulRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_a_out_isInf_T_1 = eq(_mulRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_a_out_isInf_T_2 = and(mulRawFN_io_a_isSpecial, _mulRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_a_out.isInf <= _mulRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_a_out.isZero <= mulRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_a_out.sign <= _mulRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_a_out_sExp_T = cvt(mulRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_a_out.sExp <= _mulRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_a_out_sig_T = eq(mulRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_a_out_sig_T_3 = cat(_mulRawFN_io_a_out_sig_T_1, _mulRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_a_out.sig <= _mulRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.a.sig <= mulRawFN_io_a_out.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= mulRawFN_io_a_out.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= mulRawFN_io_a_out.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= mulRawFN_io_a_out.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= mulRawFN_io_a_out.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= mulRawFN_io_a_out.isNaN @[MulRecFN.scala 115:19]
    node mulRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _mulRawFN_io_b_isZero_T = bits(mulRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node mulRawFN_io_b_isZero = eq(_mulRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _mulRawFN_io_b_isSpecial_T = bits(mulRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node mulRawFN_io_b_isSpecial = eq(_mulRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire mulRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _mulRawFN_io_b_out_isNaN_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mulRawFN_io_b_out_isNaN_T_1 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    mulRawFN_io_b_out.isNaN <= _mulRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _mulRawFN_io_b_out_isInf_T = bits(mulRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _mulRawFN_io_b_out_isInf_T_1 = eq(_mulRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _mulRawFN_io_b_out_isInf_T_2 = and(mulRawFN_io_b_isSpecial, _mulRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    mulRawFN_io_b_out.isInf <= _mulRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    mulRawFN_io_b_out.isZero <= mulRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _mulRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    mulRawFN_io_b_out.sign <= _mulRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _mulRawFN_io_b_out_sExp_T = cvt(mulRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    mulRawFN_io_b_out.sExp <= _mulRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _mulRawFN_io_b_out_sig_T = eq(mulRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _mulRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _mulRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _mulRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _mulRawFN_io_b_out_sig_T_3 = cat(_mulRawFN_io_b_out_sig_T_1, _mulRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    mulRawFN_io_b_out.sig <= _mulRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    mulRawFN.io.b.sig <= mulRawFN_io_b_out.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= mulRawFN_io_b_out.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= mulRawFN_io_b_out.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= mulRawFN_io_b_out.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= mulRawFN_io_b_out.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= mulRawFN_io_b_out.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_2 @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module DivSqrtRawFN_small_e8_s24 :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    reg cycleNum : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[DivSqrtRecFN_small.scala 224:33]
    reg inReady : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 225:33]
    reg rawOutValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 226:33]
    reg sqrtOp_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sqrtOp_Z) @[DivSqrtRecFN_small.scala 228:29]
    reg majorExc_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), majorExc_Z) @[DivSqrtRecFN_small.scala 229:29]
    reg isNaN_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isNaN_Z) @[DivSqrtRecFN_small.scala 231:29]
    reg isInf_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isInf_Z) @[DivSqrtRecFN_small.scala 232:29]
    reg isZero_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isZero_Z) @[DivSqrtRecFN_small.scala 233:29]
    reg sign_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sign_Z) @[DivSqrtRecFN_small.scala 234:29]
    reg sExp_Z : SInt<10>, clock with :
      reset => (UInt<1>("h0"), sExp_Z) @[DivSqrtRecFN_small.scala 235:29]
    reg fractB_Z : UInt<24>, clock with :
      reset => (UInt<1>("h0"), fractB_Z) @[DivSqrtRecFN_small.scala 236:29]
    reg roundingMode_Z : UInt<3>, clock with :
      reset => (UInt<1>("h0"), roundingMode_Z) @[DivSqrtRecFN_small.scala 237:29]
    reg rem_Z : UInt<26>, clock with :
      reset => (UInt<1>("h0"), rem_Z) @[DivSqrtRecFN_small.scala 243:29]
    reg notZeroRem_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), notZeroRem_Z) @[DivSqrtRecFN_small.scala 244:29]
    reg sigX_Z : UInt<26>, clock with :
      reset => (UInt<1>("h0"), sigX_Z) @[DivSqrtRecFN_small.scala 245:29]
    node _notSigNaNIn_invalidExc_S_div_T = and(io.a.isZero, io.b.isZero) @[DivSqrtRecFN_small.scala 254:24]
    node _notSigNaNIn_invalidExc_S_div_T_1 = and(io.a.isInf, io.b.isInf) @[DivSqrtRecFN_small.scala 254:59]
    node notSigNaNIn_invalidExc_S_div = or(_notSigNaNIn_invalidExc_S_div_T, _notSigNaNIn_invalidExc_S_div_T_1) @[DivSqrtRecFN_small.scala 254:42]
    node _notSigNaNIn_invalidExc_S_sqrt_T = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 256:9]
    node _notSigNaNIn_invalidExc_S_sqrt_T_1 = eq(io.a.isZero, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 256:27]
    node _notSigNaNIn_invalidExc_S_sqrt_T_2 = and(_notSigNaNIn_invalidExc_S_sqrt_T, _notSigNaNIn_invalidExc_S_sqrt_T_1) @[DivSqrtRecFN_small.scala 256:24]
    node notSigNaNIn_invalidExc_S_sqrt = and(_notSigNaNIn_invalidExc_S_sqrt_T_2, io.a.sign) @[DivSqrtRecFN_small.scala 256:43]
    node _majorExc_S_T = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _majorExc_S_T_1 = eq(_majorExc_S_T, UInt<1>("h0")) @[common.scala 82:49]
    node _majorExc_S_T_2 = and(io.a.isNaN, _majorExc_S_T_1) @[common.scala 82:46]
    node _majorExc_S_T_3 = or(_majorExc_S_T_2, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 259:38]
    node _majorExc_S_T_4 = bits(io.a.sig, 22, 22) @[common.scala 82:56]
    node _majorExc_S_T_5 = eq(_majorExc_S_T_4, UInt<1>("h0")) @[common.scala 82:49]
    node _majorExc_S_T_6 = and(io.a.isNaN, _majorExc_S_T_5) @[common.scala 82:46]
    node _majorExc_S_T_7 = bits(io.b.sig, 22, 22) @[common.scala 82:56]
    node _majorExc_S_T_8 = eq(_majorExc_S_T_7, UInt<1>("h0")) @[common.scala 82:49]
    node _majorExc_S_T_9 = and(io.b.isNaN, _majorExc_S_T_8) @[common.scala 82:46]
    node _majorExc_S_T_10 = or(_majorExc_S_T_6, _majorExc_S_T_9) @[DivSqrtRecFN_small.scala 260:38]
    node _majorExc_S_T_11 = or(_majorExc_S_T_10, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 260:66]
    node _majorExc_S_T_12 = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 262:18]
    node _majorExc_S_T_13 = eq(io.a.isInf, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 262:36]
    node _majorExc_S_T_14 = and(_majorExc_S_T_12, _majorExc_S_T_13) @[DivSqrtRecFN_small.scala 262:33]
    node _majorExc_S_T_15 = and(_majorExc_S_T_14, io.b.isZero) @[DivSqrtRecFN_small.scala 262:51]
    node _majorExc_S_T_16 = or(_majorExc_S_T_11, _majorExc_S_T_15) @[DivSqrtRecFN_small.scala 261:46]
    node majorExc_S = mux(io.sqrtOp, _majorExc_S_T_3, _majorExc_S_T_16) @[DivSqrtRecFN_small.scala 258:12]
    node _isNaN_S_T = or(io.a.isNaN, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 266:26]
    node _isNaN_S_T_1 = or(io.a.isNaN, io.b.isNaN) @[DivSqrtRecFN_small.scala 267:26]
    node _isNaN_S_T_2 = or(_isNaN_S_T_1, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 267:42]
    node isNaN_S = mux(io.sqrtOp, _isNaN_S_T, _isNaN_S_T_2) @[DivSqrtRecFN_small.scala 265:12]
    node _isInf_S_T = or(io.a.isInf, io.b.isZero) @[DivSqrtRecFN_small.scala 269:63]
    node isInf_S = mux(io.sqrtOp, io.a.isInf, _isInf_S_T) @[DivSqrtRecFN_small.scala 269:23]
    node _isZero_S_T = or(io.a.isZero, io.b.isInf) @[DivSqrtRecFN_small.scala 270:64]
    node isZero_S = mux(io.sqrtOp, io.a.isZero, _isZero_S_T) @[DivSqrtRecFN_small.scala 270:23]
    node _sign_S_T = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 271:33]
    node _sign_S_T_1 = and(_sign_S_T, io.b.sign) @[DivSqrtRecFN_small.scala 271:45]
    node sign_S = xor(io.a.sign, _sign_S_T_1) @[DivSqrtRecFN_small.scala 271:30]
    node _specialCaseA_S_T = or(io.a.isNaN, io.a.isInf) @[DivSqrtRecFN_small.scala 273:39]
    node specialCaseA_S = or(_specialCaseA_S_T, io.a.isZero) @[DivSqrtRecFN_small.scala 273:55]
    node _specialCaseB_S_T = or(io.b.isNaN, io.b.isInf) @[DivSqrtRecFN_small.scala 274:39]
    node specialCaseB_S = or(_specialCaseB_S_T, io.b.isZero) @[DivSqrtRecFN_small.scala 274:55]
    node _normalCase_S_div_T = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 275:28]
    node _normalCase_S_div_T_1 = eq(specialCaseB_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 275:48]
    node normalCase_S_div = and(_normalCase_S_div_T, _normalCase_S_div_T_1) @[DivSqrtRecFN_small.scala 275:45]
    node _normalCase_S_sqrt_T = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 276:29]
    node _normalCase_S_sqrt_T_1 = eq(io.a.sign, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 276:49]
    node normalCase_S_sqrt = and(_normalCase_S_sqrt_T, _normalCase_S_sqrt_T_1) @[DivSqrtRecFN_small.scala 276:46]
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecFN_small.scala 277:27]
    node _sExpQuot_S_div_T = bits(io.b.sExp, 8, 8) @[DivSqrtRecFN_small.scala 281:28]
    node _sExpQuot_S_div_T_1 = bits(io.b.sExp, 7, 0) @[DivSqrtRecFN_small.scala 281:52]
    node _sExpQuot_S_div_T_2 = not(_sExpQuot_S_div_T_1) @[DivSqrtRecFN_small.scala 281:40]
    node _sExpQuot_S_div_T_3 = cat(_sExpQuot_S_div_T, _sExpQuot_S_div_T_2) @[Cat.scala 33:92]
    node _sExpQuot_S_div_T_4 = asSInt(_sExpQuot_S_div_T_3) @[DivSqrtRecFN_small.scala 281:71]
    node sExpQuot_S_div = add(io.a.sExp, _sExpQuot_S_div_T_4) @[DivSqrtRecFN_small.scala 280:21]
    node _sSatExpQuot_S_div_T = leq(asSInt(UInt<10>("h1c0")), sExpQuot_S_div) @[DivSqrtRecFN_small.scala 284:48]
    node _sSatExpQuot_S_div_T_1 = bits(sExpQuot_S_div, 9, 6) @[DivSqrtRecFN_small.scala 286:31]
    node _sSatExpQuot_S_div_T_2 = mux(_sSatExpQuot_S_div_T, UInt<3>("h6"), _sSatExpQuot_S_div_T_1) @[DivSqrtRecFN_small.scala 284:16]
    node _sSatExpQuot_S_div_T_3 = bits(sExpQuot_S_div, 5, 0) @[DivSqrtRecFN_small.scala 288:27]
    node _sSatExpQuot_S_div_T_4 = cat(_sSatExpQuot_S_div_T_2, _sSatExpQuot_S_div_T_3) @[Cat.scala 33:92]
    node sSatExpQuot_S_div = asSInt(_sSatExpQuot_S_div_T_4) @[DivSqrtRecFN_small.scala 289:11]
    node _evenSqrt_S_T = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 291:48]
    node _evenSqrt_S_T_1 = eq(_evenSqrt_S_T, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 291:35]
    node evenSqrt_S = and(io.sqrtOp, _evenSqrt_S_T_1) @[DivSqrtRecFN_small.scala 291:32]
    node _oddSqrt_S_T = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 292:48]
    node oddSqrt_S = and(io.sqrtOp, _oddSqrt_S_T) @[DivSqrtRecFN_small.scala 292:32]
    node idle = eq(cycleNum, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 296:25]
    node entering = and(inReady, io.inValid) @[DivSqrtRecFN_small.scala 297:28]
    node entering_normalCase = and(entering, normalCase_S) @[DivSqrtRecFN_small.scala 298:40]
    node _processTwoBits_T = geq(cycleNum, UInt<2>("h3")) @[DivSqrtRecFN_small.scala 300:35]
    node processTwoBits = and(_processTwoBits_T, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 300:42]
    node _skipCycle2_T = eq(cycleNum, UInt<2>("h3")) @[DivSqrtRecFN_small.scala 301:31]
    node _skipCycle2_T_1 = bits(sigX_Z, 25, 25) @[DivSqrtRecFN_small.scala 301:48]
    node _skipCycle2_T_2 = and(_skipCycle2_T, _skipCycle2_T_1) @[DivSqrtRecFN_small.scala 301:39]
    node skipCycle2 = and(_skipCycle2_T_2, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 301:63]
    node _T = eq(idle, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 303:11]
    node _T_1 = or(_T, entering) @[DivSqrtRecFN_small.scala 303:18]
    when _T_1 : @[DivSqrtRecFN_small.scala 303:31]
      node _inReady_T = eq(normalCase_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:28]
      node _inReady_T_1 = and(entering, _inReady_T) @[DivSqrtRecFN_small.scala 305:26]
      node _inReady_T_2 = leq(UInt<1>("h1"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_3 = mux(_inReady_T_1, _inReady_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:16]
      node _inReady_T_4 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 308:36]
      node _inReady_T_5 = leq(UInt<5>("h18"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_6 = leq(UInt<5>("h19"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_7 = mux(_inReady_T_4, _inReady_T_5, _inReady_T_6) @[DivSqrtRecFN_small.scala 308:24]
      node _inReady_T_8 = leq(UInt<5>("h1a"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_9 = mux(io.sqrtOp, _inReady_T_7, _inReady_T_8) @[DivSqrtRecFN_small.scala 307:20]
      node _inReady_T_10 = mux(entering_normalCase, _inReady_T_9, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 306:16]
      node _inReady_T_11 = or(_inReady_T_3, _inReady_T_10) @[DivSqrtRecFN_small.scala 305:57]
      node _inReady_T_12 = eq(entering, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:17]
      node _inReady_T_13 = eq(skipCycle2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:31]
      node _inReady_T_14 = and(_inReady_T_12, _inReady_T_13) @[DivSqrtRecFN_small.scala 313:28]
      node _inReady_T_15 = mux(processTwoBits, UInt<2>("h2"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 313:61]
      node _inReady_T_16 = sub(cycleNum, _inReady_T_15) @[DivSqrtRecFN_small.scala 313:56]
      node _inReady_T_17 = tail(_inReady_T_16, 1) @[DivSqrtRecFN_small.scala 313:56]
      node _inReady_T_18 = leq(_inReady_T_17, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_19 = mux(_inReady_T_14, _inReady_T_18, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:16]
      node _inReady_T_20 = or(_inReady_T_11, _inReady_T_19) @[DivSqrtRecFN_small.scala 312:15]
      node _inReady_T_21 = leq(UInt<1>("h1"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 317:38]
      node _inReady_T_22 = mux(skipCycle2, _inReady_T_21, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 314:16]
      node _inReady_T_23 = or(_inReady_T_20, _inReady_T_22) @[DivSqrtRecFN_small.scala 313:95]
      node _inReady_T_24 = bits(_inReady_T_23, 0, 0) @[DivSqrtRecFN_small.scala 317:46]
      inReady <= _inReady_T_24 @[DivSqrtRecFN_small.scala 317:17]
      node _rawOutValid_T = eq(normalCase_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:28]
      node _rawOutValid_T_1 = and(entering, _rawOutValid_T) @[DivSqrtRecFN_small.scala 305:26]
      node _rawOutValid_T_2 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_3 = mux(_rawOutValid_T_1, _rawOutValid_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:16]
      node _rawOutValid_T_4 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 308:36]
      node _rawOutValid_T_5 = eq(UInt<5>("h18"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_6 = eq(UInt<5>("h19"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_7 = mux(_rawOutValid_T_4, _rawOutValid_T_5, _rawOutValid_T_6) @[DivSqrtRecFN_small.scala 308:24]
      node _rawOutValid_T_8 = eq(UInt<5>("h1a"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_9 = mux(io.sqrtOp, _rawOutValid_T_7, _rawOutValid_T_8) @[DivSqrtRecFN_small.scala 307:20]
      node _rawOutValid_T_10 = mux(entering_normalCase, _rawOutValid_T_9, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 306:16]
      node _rawOutValid_T_11 = or(_rawOutValid_T_3, _rawOutValid_T_10) @[DivSqrtRecFN_small.scala 305:57]
      node _rawOutValid_T_12 = eq(entering, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:17]
      node _rawOutValid_T_13 = eq(skipCycle2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:31]
      node _rawOutValid_T_14 = and(_rawOutValid_T_12, _rawOutValid_T_13) @[DivSqrtRecFN_small.scala 313:28]
      node _rawOutValid_T_15 = mux(processTwoBits, UInt<2>("h2"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 313:61]
      node _rawOutValid_T_16 = sub(cycleNum, _rawOutValid_T_15) @[DivSqrtRecFN_small.scala 313:56]
      node _rawOutValid_T_17 = tail(_rawOutValid_T_16, 1) @[DivSqrtRecFN_small.scala 313:56]
      node _rawOutValid_T_18 = eq(_rawOutValid_T_17, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_19 = mux(_rawOutValid_T_14, _rawOutValid_T_18, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:16]
      node _rawOutValid_T_20 = or(_rawOutValid_T_11, _rawOutValid_T_19) @[DivSqrtRecFN_small.scala 312:15]
      node _rawOutValid_T_21 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 318:42]
      node _rawOutValid_T_22 = mux(skipCycle2, _rawOutValid_T_21, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 314:16]
      node _rawOutValid_T_23 = or(_rawOutValid_T_20, _rawOutValid_T_22) @[DivSqrtRecFN_small.scala 313:95]
      node _rawOutValid_T_24 = bits(_rawOutValid_T_23, 0, 0) @[DivSqrtRecFN_small.scala 318:51]
      rawOutValid <= _rawOutValid_T_24 @[DivSqrtRecFN_small.scala 318:21]
      node _cycleNum_T = eq(normalCase_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:28]
      node _cycleNum_T_1 = and(entering, _cycleNum_T) @[DivSqrtRecFN_small.scala 305:26]
      node _cycleNum_T_2 = mux(_cycleNum_T_1, UInt<1>("h1"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 305:16]
      node _cycleNum_T_3 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 308:36]
      node _cycleNum_T_4 = mux(_cycleNum_T_3, UInt<5>("h18"), UInt<5>("h19")) @[DivSqrtRecFN_small.scala 308:24]
      node _cycleNum_T_5 = mux(io.sqrtOp, _cycleNum_T_4, UInt<5>("h1a")) @[DivSqrtRecFN_small.scala 307:20]
      node _cycleNum_T_6 = mux(entering_normalCase, _cycleNum_T_5, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 306:16]
      node _cycleNum_T_7 = or(_cycleNum_T_2, _cycleNum_T_6) @[DivSqrtRecFN_small.scala 305:57]
      node _cycleNum_T_8 = eq(entering, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:17]
      node _cycleNum_T_9 = eq(skipCycle2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:31]
      node _cycleNum_T_10 = and(_cycleNum_T_8, _cycleNum_T_9) @[DivSqrtRecFN_small.scala 313:28]
      node _cycleNum_T_11 = mux(processTwoBits, UInt<2>("h2"), UInt<1>("h1")) @[DivSqrtRecFN_small.scala 313:61]
      node _cycleNum_T_12 = sub(cycleNum, _cycleNum_T_11) @[DivSqrtRecFN_small.scala 313:56]
      node _cycleNum_T_13 = tail(_cycleNum_T_12, 1) @[DivSqrtRecFN_small.scala 313:56]
      node _cycleNum_T_14 = mux(_cycleNum_T_10, _cycleNum_T_13, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 313:16]
      node _cycleNum_T_15 = or(_cycleNum_T_7, _cycleNum_T_14) @[DivSqrtRecFN_small.scala 312:15]
      node _cycleNum_T_16 = mux(skipCycle2, UInt<1>("h1"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 314:16]
      node _cycleNum_T_17 = or(_cycleNum_T_15, _cycleNum_T_16) @[DivSqrtRecFN_small.scala 313:95]
      cycleNum <= _cycleNum_T_17 @[DivSqrtRecFN_small.scala 319:18]
    io.inReady <= inReady @[DivSqrtRecFN_small.scala 322:16]
    when entering : @[DivSqrtRecFN_small.scala 326:21]
      sqrtOp_Z <= io.sqrtOp @[DivSqrtRecFN_small.scala 327:20]
      majorExc_Z <= majorExc_S @[DivSqrtRecFN_small.scala 328:20]
      isNaN_Z <= isNaN_S @[DivSqrtRecFN_small.scala 329:20]
      isInf_Z <= isInf_S @[DivSqrtRecFN_small.scala 330:20]
      isZero_Z <= isZero_S @[DivSqrtRecFN_small.scala 331:20]
      sign_Z <= sign_S @[DivSqrtRecFN_small.scala 332:20]
      node _sExp_Z_T = shr(io.a.sExp, 1) @[DivSqrtRecFN_small.scala 335:29]
      node _sExp_Z_T_1 = add(_sExp_Z_T, asSInt(UInt<9>("h80"))) @[DivSqrtRecFN_small.scala 335:34]
      node _sExp_Z_T_2 = mux(io.sqrtOp, _sExp_Z_T_1, sSatExpQuot_S_div) @[DivSqrtRecFN_small.scala 334:16]
      sExp_Z <= _sExp_Z_T_2 @[DivSqrtRecFN_small.scala 333:16]
      roundingMode_Z <= io.roundingMode @[DivSqrtRecFN_small.scala 338:24]
    node _T_2 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 340:23]
    node _T_3 = and(_T_2, sqrtOp_Z) @[DivSqrtRecFN_small.scala 340:33]
    node _T_4 = or(entering, _T_3) @[DivSqrtRecFN_small.scala 340:20]
    when _T_4 : @[DivSqrtRecFN_small.scala 340:46]
      node _fractB_Z_T = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 342:28]
      node _fractB_Z_T_1 = and(inReady, _fractB_Z_T) @[DivSqrtRecFN_small.scala 342:25]
      node _fractB_Z_T_2 = bits(io.b.sig, 22, 0) @[DivSqrtRecFN_small.scala 342:73]
      node _fractB_Z_T_3 = shl(_fractB_Z_T_2, 1) @[DivSqrtRecFN_small.scala 342:90]
      node _fractB_Z_T_4 = mux(_fractB_Z_T_1, _fractB_Z_T_3, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 342:16]
      node _fractB_Z_T_5 = and(inReady, io.sqrtOp) @[DivSqrtRecFN_small.scala 343:25]
      node _fractB_Z_T_6 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 343:52]
      node _fractB_Z_T_7 = and(_fractB_Z_T_5, _fractB_Z_T_6) @[DivSqrtRecFN_small.scala 343:38]
      node _fractB_Z_T_8 = mux(_fractB_Z_T_7, UInt<23>("h400000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 343:16]
      node _fractB_Z_T_9 = or(_fractB_Z_T_4, _fractB_Z_T_8) @[DivSqrtRecFN_small.scala 342:100]
      node _fractB_Z_T_10 = and(inReady, io.sqrtOp) @[DivSqrtRecFN_small.scala 344:25]
      node _fractB_Z_T_11 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 344:54]
      node _fractB_Z_T_12 = eq(_fractB_Z_T_11, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 344:41]
      node _fractB_Z_T_13 = and(_fractB_Z_T_10, _fractB_Z_T_12) @[DivSqrtRecFN_small.scala 344:38]
      node _fractB_Z_T_14 = mux(_fractB_Z_T_13, UInt<24>("h800000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 344:16]
      node _fractB_Z_T_15 = or(_fractB_Z_T_9, _fractB_Z_T_14) @[DivSqrtRecFN_small.scala 343:100]
      node _fractB_Z_T_16 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 345:17]
      node _fractB_Z_T_17 = and(_fractB_Z_T_16, processTwoBits) @[DivSqrtRecFN_small.scala 345:42]
      node _fractB_Z_T_18 = shr(fractB_Z, 2) @[DivSqrtRecFN_small.scala 345:71]
      node _fractB_Z_T_19 = mux(_fractB_Z_T_17, _fractB_Z_T_18, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 345:16]
      node _fractB_Z_T_20 = or(_fractB_Z_T_15, _fractB_Z_T_19) @[DivSqrtRecFN_small.scala 344:100]
      node _fractB_Z_T_21 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:17]
      node _fractB_Z_T_22 = eq(processTwoBits, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:45]
      node _fractB_Z_T_23 = and(_fractB_Z_T_21, _fractB_Z_T_22) @[DivSqrtRecFN_small.scala 346:42]
      node _fractB_Z_T_24 = shr(fractB_Z, 1) @[DivSqrtRecFN_small.scala 346:71]
      node _fractB_Z_T_25 = mux(_fractB_Z_T_23, _fractB_Z_T_24, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:16]
      node _fractB_Z_T_26 = or(_fractB_Z_T_20, _fractB_Z_T_25) @[DivSqrtRecFN_small.scala 345:100]
      fractB_Z <= _fractB_Z_T_26 @[DivSqrtRecFN_small.scala 341:18]
    node _rem_T = eq(oddSqrt_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:24]
    node _rem_T_1 = and(inReady, _rem_T) @[DivSqrtRecFN_small.scala 352:21]
    node _rem_T_2 = shl(io.a.sig, 1) @[DivSqrtRecFN_small.scala 352:47]
    node _rem_T_3 = mux(_rem_T_1, _rem_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:12]
    node _rem_T_4 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 353:21]
    node _rem_T_5 = bits(io.a.sig, 23, 22) @[DivSqrtRecFN_small.scala 354:27]
    node _rem_T_6 = sub(_rem_T_5, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 354:56]
    node _rem_T_7 = tail(_rem_T_6, 1) @[DivSqrtRecFN_small.scala 354:56]
    node _rem_T_8 = bits(io.a.sig, 21, 0) @[DivSqrtRecFN_small.scala 355:27]
    node _rem_T_9 = shl(_rem_T_8, 3) @[DivSqrtRecFN_small.scala 355:44]
    node _rem_T_10 = cat(_rem_T_7, _rem_T_9) @[Cat.scala 33:92]
    node _rem_T_11 = mux(_rem_T_4, _rem_T_10, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 353:12]
    node _rem_T_12 = or(_rem_T_3, _rem_T_11) @[DivSqrtRecFN_small.scala 352:57]
    node _rem_T_13 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 359:13]
    node _rem_T_14 = shl(rem_Z, 1) @[DivSqrtRecFN_small.scala 359:29]
    node _rem_T_15 = mux(_rem_T_13, _rem_T_14, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 359:12]
    node rem = or(_rem_T_12, _rem_T_15) @[DivSqrtRecFN_small.scala 358:11]
    node _bitMask_T = dshl(UInt<1>("h1"), cycleNum) @[DivSqrtRecFN_small.scala 360:23]
    node bitMask = shr(_bitMask_T, 2) @[DivSqrtRecFN_small.scala 360:34]
    node _trialTerm_T = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 362:24]
    node _trialTerm_T_1 = and(inReady, _trialTerm_T) @[DivSqrtRecFN_small.scala 362:21]
    node _trialTerm_T_2 = shl(io.b.sig, 1) @[DivSqrtRecFN_small.scala 362:48]
    node _trialTerm_T_3 = mux(_trialTerm_T_1, _trialTerm_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 362:12]
    node _trialTerm_T_4 = and(inReady, evenSqrt_S) @[DivSqrtRecFN_small.scala 363:21]
    node _trialTerm_T_5 = mux(_trialTerm_T_4, UInt<25>("h1000000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 363:12]
    node _trialTerm_T_6 = or(_trialTerm_T_3, _trialTerm_T_5) @[DivSqrtRecFN_small.scala 362:74]
    node _trialTerm_T_7 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 364:21]
    node _trialTerm_T_8 = mux(_trialTerm_T_7, UInt<26>("h2800000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 364:12]
    node _trialTerm_T_9 = or(_trialTerm_T_6, _trialTerm_T_8) @[DivSqrtRecFN_small.scala 363:74]
    node _trialTerm_T_10 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 365:13]
    node _trialTerm_T_11 = mux(_trialTerm_T_10, fractB_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 365:12]
    node _trialTerm_T_12 = or(_trialTerm_T_9, _trialTerm_T_11) @[DivSqrtRecFN_small.scala 364:74]
    node _trialTerm_T_13 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:13]
    node _trialTerm_T_14 = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:26]
    node _trialTerm_T_15 = and(_trialTerm_T_13, _trialTerm_T_14) @[DivSqrtRecFN_small.scala 366:23]
    node _trialTerm_T_16 = shl(UInt<1>("h1"), 24) @[DivSqrtRecFN_small.scala 366:42]
    node _trialTerm_T_17 = mux(_trialTerm_T_15, _trialTerm_T_16, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:12]
    node _trialTerm_T_18 = or(_trialTerm_T_12, _trialTerm_T_17) @[DivSqrtRecFN_small.scala 365:74]
    node _trialTerm_T_19 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 367:13]
    node _trialTerm_T_20 = and(_trialTerm_T_19, sqrtOp_Z) @[DivSqrtRecFN_small.scala 367:23]
    node _trialTerm_T_21 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 367:44]
    node _trialTerm_T_22 = mux(_trialTerm_T_20, _trialTerm_T_21, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 367:12]
    node trialTerm = or(_trialTerm_T_18, _trialTerm_T_22) @[DivSqrtRecFN_small.scala 366:74]
    node _trialRem_T = cvt(rem) @[DivSqrtRecFN_small.scala 368:24]
    node _trialRem_T_1 = cvt(trialTerm) @[DivSqrtRecFN_small.scala 368:42]
    node trialRem = sub(_trialRem_T, _trialRem_T_1) @[DivSqrtRecFN_small.scala 368:29]
    node newBit = leq(asSInt(UInt<1>("h0")), trialRem) @[DivSqrtRecFN_small.scala 369:23]
    node _nextRem_Z_T = asUInt(trialRem) @[DivSqrtRecFN_small.scala 371:42]
    node _nextRem_Z_T_1 = mux(newBit, _nextRem_Z_T, rem) @[DivSqrtRecFN_small.scala 371:24]
    node nextRem_Z = bits(_nextRem_Z_T_1, 25, 0) @[DivSqrtRecFN_small.scala 371:54]
    node rem2 = shl(nextRem_Z, 1) @[DivSqrtRecFN_small.scala 372:25]
    node _trialTerm2_newBit0_T = shr(fractB_Z, 1) @[DivSqrtRecFN_small.scala 373:52]
    node _trialTerm2_newBit0_T_1 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 373:64]
    node _trialTerm2_newBit0_T_2 = or(_trialTerm2_newBit0_T, _trialTerm2_newBit0_T_1) @[DivSqrtRecFN_small.scala 373:56]
    node _trialTerm2_newBit0_T_3 = shl(UInt<1>("h1"), 24) @[DivSqrtRecFN_small.scala 373:85]
    node _trialTerm2_newBit0_T_4 = or(fractB_Z, _trialTerm2_newBit0_T_3) @[DivSqrtRecFN_small.scala 373:78]
    node trialTerm2_newBit0 = mux(sqrtOp_Z, _trialTerm2_newBit0_T_2, _trialTerm2_newBit0_T_4) @[DivSqrtRecFN_small.scala 373:33]
    node _trialTerm2_newBit1_T = shl(fractB_Z, 1) @[DivSqrtRecFN_small.scala 374:73]
    node _trialTerm2_newBit1_T_1 = mux(sqrtOp_Z, _trialTerm2_newBit1_T, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 374:54]
    node trialTerm2_newBit1 = or(trialTerm2_newBit0, _trialTerm2_newBit1_T_1) @[DivSqrtRecFN_small.scala 374:49]
    node _trialRem2_T = shl(trialRem, 1) @[DivSqrtRecFN_small.scala 377:22]
    node _trialRem2_T_1 = cvt(trialTerm2_newBit1) @[DivSqrtRecFN_small.scala 377:48]
    node _trialRem2_T_2 = sub(_trialRem2_T, _trialRem2_T_1) @[DivSqrtRecFN_small.scala 377:27]
    node _trialRem2_T_3 = tail(_trialRem2_T_2, 1) @[DivSqrtRecFN_small.scala 377:27]
    node _trialRem2_T_4 = asSInt(_trialRem2_T_3) @[DivSqrtRecFN_small.scala 377:27]
    node _trialRem2_T_5 = shl(rem_Z, 2) @[DivSqrtRecFN_small.scala 378:19]
    node _trialRem2_T_6 = bits(_trialRem2_T_5, 26, 0) @[DivSqrtRecFN_small.scala 378:23]
    node _trialRem2_T_7 = cvt(_trialRem2_T_6) @[DivSqrtRecFN_small.scala 378:39]
    node _trialRem2_T_8 = cvt(trialTerm2_newBit0) @[DivSqrtRecFN_small.scala 378:65]
    node _trialRem2_T_9 = sub(_trialRem2_T_7, _trialRem2_T_8) @[DivSqrtRecFN_small.scala 378:44]
    node _trialRem2_T_10 = tail(_trialRem2_T_9, 1) @[DivSqrtRecFN_small.scala 378:44]
    node _trialRem2_T_11 = asSInt(_trialRem2_T_10) @[DivSqrtRecFN_small.scala 378:44]
    node trialRem2 = mux(newBit, _trialRem2_T_4, _trialRem2_T_11) @[DivSqrtRecFN_small.scala 376:12]
    node newBit2 = leq(asSInt(UInt<1>("h0")), trialRem2) @[DivSqrtRecFN_small.scala 379:24]
    node _nextNotZeroRem_Z_T = or(inReady, newBit) @[DivSqrtRecFN_small.scala 380:40]
    node _nextNotZeroRem_Z_T_1 = neq(trialRem, asSInt(UInt<1>("h0"))) @[DivSqrtRecFN_small.scala 380:60]
    node nextNotZeroRem_Z = mux(_nextNotZeroRem_Z_T, _nextNotZeroRem_Z_T_1, notZeroRem_Z) @[DivSqrtRecFN_small.scala 380:31]
    node _nextNotZeroRem_Z_2_T = and(processTwoBits, newBit) @[DivSqrtRecFN_small.scala 382:24]
    node _nextNotZeroRem_Z_2_T_1 = shl(trialRem, 1) @[DivSqrtRecFN_small.scala 382:53]
    node _nextNotZeroRem_Z_2_T_2 = cvt(trialTerm2_newBit1) @[DivSqrtRecFN_small.scala 382:79]
    node _nextNotZeroRem_Z_2_T_3 = sub(_nextNotZeroRem_Z_2_T_1, _nextNotZeroRem_Z_2_T_2) @[DivSqrtRecFN_small.scala 382:58]
    node _nextNotZeroRem_Z_2_T_4 = tail(_nextNotZeroRem_Z_2_T_3, 1) @[DivSqrtRecFN_small.scala 382:58]
    node _nextNotZeroRem_Z_2_T_5 = asSInt(_nextNotZeroRem_Z_2_T_4) @[DivSqrtRecFN_small.scala 382:58]
    node _nextNotZeroRem_Z_2_T_6 = lt(asSInt(UInt<1>("h0")), _nextNotZeroRem_Z_2_T_5) @[DivSqrtRecFN_small.scala 382:42]
    node _nextNotZeroRem_Z_2_T_7 = and(_nextNotZeroRem_Z_2_T, _nextNotZeroRem_Z_2_T_6) @[DivSqrtRecFN_small.scala 382:34]
    node _nextNotZeroRem_Z_2_T_8 = eq(newBit, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 383:27]
    node _nextNotZeroRem_Z_2_T_9 = and(processTwoBits, _nextNotZeroRem_Z_2_T_8) @[DivSqrtRecFN_small.scala 383:24]
    node _nextNotZeroRem_Z_2_T_10 = shl(rem_Z, 2) @[DivSqrtRecFN_small.scala 383:51]
    node _nextNotZeroRem_Z_2_T_11 = bits(_nextNotZeroRem_Z_2_T_10, 26, 0) @[DivSqrtRecFN_small.scala 383:55]
    node _nextNotZeroRem_Z_2_T_12 = cvt(_nextNotZeroRem_Z_2_T_11) @[DivSqrtRecFN_small.scala 383:71]
    node _nextNotZeroRem_Z_2_T_13 = cvt(trialTerm2_newBit0) @[DivSqrtRecFN_small.scala 383:97]
    node _nextNotZeroRem_Z_2_T_14 = sub(_nextNotZeroRem_Z_2_T_12, _nextNotZeroRem_Z_2_T_13) @[DivSqrtRecFN_small.scala 383:76]
    node _nextNotZeroRem_Z_2_T_15 = tail(_nextNotZeroRem_Z_2_T_14, 1) @[DivSqrtRecFN_small.scala 383:76]
    node _nextNotZeroRem_Z_2_T_16 = asSInt(_nextNotZeroRem_Z_2_T_15) @[DivSqrtRecFN_small.scala 383:76]
    node _nextNotZeroRem_Z_2_T_17 = lt(asSInt(UInt<1>("h0")), _nextNotZeroRem_Z_2_T_16) @[DivSqrtRecFN_small.scala 383:43]
    node _nextNotZeroRem_Z_2_T_18 = and(_nextNotZeroRem_Z_2_T_9, _nextNotZeroRem_Z_2_T_17) @[DivSqrtRecFN_small.scala 383:35]
    node _nextNotZeroRem_Z_2_T_19 = or(_nextNotZeroRem_Z_2_T_7, _nextNotZeroRem_Z_2_T_18) @[DivSqrtRecFN_small.scala 382:85]
    node _nextNotZeroRem_Z_2_T_20 = and(processTwoBits, newBit2) @[DivSqrtRecFN_small.scala 384:26]
    node _nextNotZeroRem_Z_2_T_21 = eq(_nextNotZeroRem_Z_2_T_20, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 384:9]
    node _nextNotZeroRem_Z_2_T_22 = and(_nextNotZeroRem_Z_2_T_21, nextNotZeroRem_Z) @[DivSqrtRecFN_small.scala 384:38]
    node nextNotZeroRem_Z_2 = or(_nextNotZeroRem_Z_2_T_19, _nextNotZeroRem_Z_2_T_22) @[DivSqrtRecFN_small.scala 383:103]
    node _nextRem_Z_2_T = and(processTwoBits, newBit2) @[DivSqrtRecFN_small.scala 386:28]
    node _nextRem_Z_2_T_1 = asUInt(trialRem2) @[DivSqrtRecFN_small.scala 386:51]
    node _nextRem_Z_2_T_2 = bits(_nextRem_Z_2_T_1, 25, 0) @[DivSqrtRecFN_small.scala 386:57]
    node _nextRem_Z_2_T_3 = mux(_nextRem_Z_2_T, _nextRem_Z_2_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 386:12]
    node _nextRem_Z_2_T_4 = eq(newBit2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 387:31]
    node _nextRem_Z_2_T_5 = and(processTwoBits, _nextRem_Z_2_T_4) @[DivSqrtRecFN_small.scala 387:28]
    node _nextRem_Z_2_T_6 = bits(rem2, 25, 0) @[DivSqrtRecFN_small.scala 387:45]
    node _nextRem_Z_2_T_7 = mux(_nextRem_Z_2_T_5, _nextRem_Z_2_T_6, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 387:12]
    node _nextRem_Z_2_T_8 = or(_nextRem_Z_2_T_3, _nextRem_Z_2_T_7) @[DivSqrtRecFN_small.scala 386:81]
    node _nextRem_Z_2_T_9 = eq(processTwoBits, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 388:13]
    node _nextRem_Z_2_T_10 = mux(_nextRem_Z_2_T_9, nextRem_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 388:12]
    node nextRem_Z_2 = or(_nextRem_Z_2_T_8, _nextRem_Z_2_T_10) @[DivSqrtRecFN_small.scala 387:83]
    node _T_5 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 390:23]
    node _T_6 = or(entering, _T_5) @[DivSqrtRecFN_small.scala 390:20]
    when _T_6 : @[DivSqrtRecFN_small.scala 390:34]
      notZeroRem_Z <= nextNotZeroRem_Z_2 @[DivSqrtRecFN_small.scala 391:22]
      rem_Z <= nextRem_Z_2 @[DivSqrtRecFN_small.scala 392:15]
      node _sigX_Z_T = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 394:28]
      node _sigX_Z_T_1 = and(inReady, _sigX_Z_T) @[DivSqrtRecFN_small.scala 394:25]
      node _sigX_Z_T_2 = shl(newBit, 25) @[DivSqrtRecFN_small.scala 394:50]
      node _sigX_Z_T_3 = mux(_sigX_Z_T_1, _sigX_Z_T_2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 394:16]
      node _sigX_Z_T_4 = and(inReady, io.sqrtOp) @[DivSqrtRecFN_small.scala 395:25]
      node _sigX_Z_T_5 = mux(_sigX_Z_T_4, UInt<25>("h1000000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 395:16]
      node _sigX_Z_T_6 = or(_sigX_Z_T_3, _sigX_Z_T_5) @[DivSqrtRecFN_small.scala 394:74]
      node _sigX_Z_T_7 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 396:25]
      node _sigX_Z_T_8 = shl(newBit, 23) @[DivSqrtRecFN_small.scala 396:50]
      node _sigX_Z_T_9 = mux(_sigX_Z_T_7, _sigX_Z_T_8, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 396:16]
      node _sigX_Z_T_10 = or(_sigX_Z_T_6, _sigX_Z_T_9) @[DivSqrtRecFN_small.scala 395:74]
      node _sigX_Z_T_11 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 397:17]
      node _sigX_Z_T_12 = mux(_sigX_Z_T_11, sigX_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 397:16]
      node _sigX_Z_T_13 = or(_sigX_Z_T_10, _sigX_Z_T_12) @[DivSqrtRecFN_small.scala 396:74]
      node _sigX_Z_T_14 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 398:17]
      node _sigX_Z_T_15 = and(_sigX_Z_T_14, newBit) @[DivSqrtRecFN_small.scala 398:27]
      node _sigX_Z_T_16 = mux(_sigX_Z_T_15, bitMask, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 398:16]
      node _sigX_Z_T_17 = or(_sigX_Z_T_13, _sigX_Z_T_16) @[DivSqrtRecFN_small.scala 397:74]
      node _sigX_Z_T_18 = and(processTwoBits, newBit2) @[DivSqrtRecFN_small.scala 399:32]
      node _sigX_Z_T_19 = shr(bitMask, 1) @[DivSqrtRecFN_small.scala 399:51]
      node _sigX_Z_T_20 = mux(_sigX_Z_T_18, _sigX_Z_T_19, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 399:16]
      node _sigX_Z_T_21 = or(_sigX_Z_T_17, _sigX_Z_T_20) @[DivSqrtRecFN_small.scala 398:74]
      sigX_Z <= _sigX_Z_T_21 @[DivSqrtRecFN_small.scala 393:16]
    node _io_rawOutValid_div_T = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 404:43]
    node _io_rawOutValid_div_T_1 = and(rawOutValid, _io_rawOutValid_div_T) @[DivSqrtRecFN_small.scala 404:40]
    io.rawOutValid_div <= _io_rawOutValid_div_T_1 @[DivSqrtRecFN_small.scala 404:25]
    node _io_rawOutValid_sqrt_T = and(rawOutValid, sqrtOp_Z) @[DivSqrtRecFN_small.scala 405:40]
    io.rawOutValid_sqrt <= _io_rawOutValid_sqrt_T @[DivSqrtRecFN_small.scala 405:25]
    io.roundingModeOut <= roundingMode_Z @[DivSqrtRecFN_small.scala 406:25]
    node _io_invalidExc_T = and(majorExc_Z, isNaN_Z) @[DivSqrtRecFN_small.scala 407:36]
    io.invalidExc <= _io_invalidExc_T @[DivSqrtRecFN_small.scala 407:22]
    node _io_infiniteExc_T = eq(isNaN_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 408:39]
    node _io_infiniteExc_T_1 = and(majorExc_Z, _io_infiniteExc_T) @[DivSqrtRecFN_small.scala 408:36]
    io.infiniteExc <= _io_infiniteExc_T_1 @[DivSqrtRecFN_small.scala 408:22]
    io.rawOut.isNaN <= isNaN_Z @[DivSqrtRecFN_small.scala 409:22]
    io.rawOut.isInf <= isInf_Z @[DivSqrtRecFN_small.scala 410:22]
    io.rawOut.isZero <= isZero_Z @[DivSqrtRecFN_small.scala 411:22]
    io.rawOut.sign <= sign_Z @[DivSqrtRecFN_small.scala 412:22]
    io.rawOut.sExp <= sExp_Z @[DivSqrtRecFN_small.scala 413:22]
    node _io_rawOut_sig_T = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 414:31]
    node _io_rawOut_sig_T_1 = or(_io_rawOut_sig_T, notZeroRem_Z) @[DivSqrtRecFN_small.scala 414:35]
    io.rawOut.sig <= _io_rawOut_sig_T_1 @[DivSqrtRecFN_small.scala 414:22]

  module DivSqrtRecFMToRaw_small_e8_s24 :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}}

    inst divSqrtRawFN of DivSqrtRawFN_small_e8_s24 @[DivSqrtRecFN_small.scala 446:15]
    divSqrtRawFN.clock <= clock
    divSqrtRawFN.reset <= reset
    io.inReady <= divSqrtRawFN.io.inReady @[DivSqrtRecFN_small.scala 448:16]
    divSqrtRawFN.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 449:34]
    divSqrtRawFN.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 450:34]
    node divSqrtRawFN_io_a_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _divSqrtRawFN_io_a_isZero_T = bits(divSqrtRawFN_io_a_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node divSqrtRawFN_io_a_isZero = eq(_divSqrtRawFN_io_a_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _divSqrtRawFN_io_a_isSpecial_T = bits(divSqrtRawFN_io_a_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node divSqrtRawFN_io_a_isSpecial = eq(_divSqrtRawFN_io_a_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire divSqrtRawFN_io_a_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _divSqrtRawFN_io_a_out_isNaN_T = bits(divSqrtRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _divSqrtRawFN_io_a_out_isNaN_T_1 = and(divSqrtRawFN_io_a_isSpecial, _divSqrtRawFN_io_a_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    divSqrtRawFN_io_a_out.isNaN <= _divSqrtRawFN_io_a_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _divSqrtRawFN_io_a_out_isInf_T = bits(divSqrtRawFN_io_a_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _divSqrtRawFN_io_a_out_isInf_T_1 = eq(_divSqrtRawFN_io_a_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _divSqrtRawFN_io_a_out_isInf_T_2 = and(divSqrtRawFN_io_a_isSpecial, _divSqrtRawFN_io_a_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    divSqrtRawFN_io_a_out.isInf <= _divSqrtRawFN_io_a_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    divSqrtRawFN_io_a_out.isZero <= divSqrtRawFN_io_a_isZero @[rawFloatFromRecFN.scala 58:20]
    node _divSqrtRawFN_io_a_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    divSqrtRawFN_io_a_out.sign <= _divSqrtRawFN_io_a_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _divSqrtRawFN_io_a_out_sExp_T = cvt(divSqrtRawFN_io_a_exp) @[rawFloatFromRecFN.scala 60:27]
    divSqrtRawFN_io_a_out.sExp <= _divSqrtRawFN_io_a_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _divSqrtRawFN_io_a_out_sig_T = eq(divSqrtRawFN_io_a_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _divSqrtRawFN_io_a_out_sig_T_1 = cat(UInt<1>("h0"), _divSqrtRawFN_io_a_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _divSqrtRawFN_io_a_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _divSqrtRawFN_io_a_out_sig_T_3 = cat(_divSqrtRawFN_io_a_out_sig_T_1, _divSqrtRawFN_io_a_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    divSqrtRawFN_io_a_out.sig <= _divSqrtRawFN_io_a_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    divSqrtRawFN.io.a.sig <= divSqrtRawFN_io_a_out.sig @[DivSqrtRecFN_small.scala 451:34]
    divSqrtRawFN.io.a.sExp <= divSqrtRawFN_io_a_out.sExp @[DivSqrtRecFN_small.scala 451:34]
    divSqrtRawFN.io.a.sign <= divSqrtRawFN_io_a_out.sign @[DivSqrtRecFN_small.scala 451:34]
    divSqrtRawFN.io.a.isZero <= divSqrtRawFN_io_a_out.isZero @[DivSqrtRecFN_small.scala 451:34]
    divSqrtRawFN.io.a.isInf <= divSqrtRawFN_io_a_out.isInf @[DivSqrtRecFN_small.scala 451:34]
    divSqrtRawFN.io.a.isNaN <= divSqrtRawFN_io_a_out.isNaN @[DivSqrtRecFN_small.scala 451:34]
    node divSqrtRawFN_io_b_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _divSqrtRawFN_io_b_isZero_T = bits(divSqrtRawFN_io_b_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node divSqrtRawFN_io_b_isZero = eq(_divSqrtRawFN_io_b_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _divSqrtRawFN_io_b_isSpecial_T = bits(divSqrtRawFN_io_b_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node divSqrtRawFN_io_b_isSpecial = eq(_divSqrtRawFN_io_b_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire divSqrtRawFN_io_b_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _divSqrtRawFN_io_b_out_isNaN_T = bits(divSqrtRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _divSqrtRawFN_io_b_out_isNaN_T_1 = and(divSqrtRawFN_io_b_isSpecial, _divSqrtRawFN_io_b_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    divSqrtRawFN_io_b_out.isNaN <= _divSqrtRawFN_io_b_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _divSqrtRawFN_io_b_out_isInf_T = bits(divSqrtRawFN_io_b_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _divSqrtRawFN_io_b_out_isInf_T_1 = eq(_divSqrtRawFN_io_b_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _divSqrtRawFN_io_b_out_isInf_T_2 = and(divSqrtRawFN_io_b_isSpecial, _divSqrtRawFN_io_b_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    divSqrtRawFN_io_b_out.isInf <= _divSqrtRawFN_io_b_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    divSqrtRawFN_io_b_out.isZero <= divSqrtRawFN_io_b_isZero @[rawFloatFromRecFN.scala 58:20]
    node _divSqrtRawFN_io_b_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    divSqrtRawFN_io_b_out.sign <= _divSqrtRawFN_io_b_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _divSqrtRawFN_io_b_out_sExp_T = cvt(divSqrtRawFN_io_b_exp) @[rawFloatFromRecFN.scala 60:27]
    divSqrtRawFN_io_b_out.sExp <= _divSqrtRawFN_io_b_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _divSqrtRawFN_io_b_out_sig_T = eq(divSqrtRawFN_io_b_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _divSqrtRawFN_io_b_out_sig_T_1 = cat(UInt<1>("h0"), _divSqrtRawFN_io_b_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _divSqrtRawFN_io_b_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _divSqrtRawFN_io_b_out_sig_T_3 = cat(_divSqrtRawFN_io_b_out_sig_T_1, _divSqrtRawFN_io_b_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    divSqrtRawFN_io_b_out.sig <= _divSqrtRawFN_io_b_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    divSqrtRawFN.io.b.sig <= divSqrtRawFN_io_b_out.sig @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.b.sExp <= divSqrtRawFN_io_b_out.sExp @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.b.sign <= divSqrtRawFN_io_b_out.sign @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.b.isZero <= divSqrtRawFN_io_b_out.isZero @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.b.isInf <= divSqrtRawFN_io_b_out.isInf @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.b.isNaN <= divSqrtRawFN_io_b_out.isNaN @[DivSqrtRecFN_small.scala 452:34]
    divSqrtRawFN.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 453:34]
    io.rawOutValid_div <= divSqrtRawFN.io.rawOutValid_div @[DivSqrtRecFN_small.scala 455:25]
    io.rawOutValid_sqrt <= divSqrtRawFN.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 456:25]
    io.roundingModeOut <= divSqrtRawFN.io.roundingModeOut @[DivSqrtRecFN_small.scala 457:25]
    io.invalidExc <= divSqrtRawFN.io.invalidExc @[DivSqrtRecFN_small.scala 458:25]
    io.infiniteExc <= divSqrtRawFN.io.infiniteExc @[DivSqrtRecFN_small.scala 459:25]
    io.rawOut <= divSqrtRawFN.io.rawOut @[DivSqrtRecFN_small.scala 460:25]

  module RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_3 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 114:22]
    node doShiftSigDown1 = bits(adjustedSig, 26, 26) @[RoundAnyRawFNToRecFN.scala 120:57]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 156:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 52:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 58:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 59:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 58:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 59:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 76:56]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 42) @[primitives.scala 78:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 15, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<16>("hffff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 8) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 7, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 8) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 11, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 4) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 11, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 13, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 13, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_25, 14, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_34 = shl(_roundMask_T_33, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_35 = xor(_roundMask_T_25, _roundMask_T_34) @[Bitwise.scala 107:21]
    node _roundMask_T_36 = shr(_roundMask_T_32, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_37 = and(_roundMask_T_36, _roundMask_T_35) @[Bitwise.scala 108:31]
    node _roundMask_T_38 = bits(_roundMask_T_32, 14, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_39 = shl(_roundMask_T_38, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_40 = not(_roundMask_T_35) @[Bitwise.scala 108:82]
    node _roundMask_T_41 = and(_roundMask_T_39, _roundMask_T_40) @[Bitwise.scala 108:80]
    node _roundMask_T_42 = or(_roundMask_T_37, _roundMask_T_41) @[Bitwise.scala 108:39]
    node _roundMask_T_43 = bits(_roundMask_T_2, 21, 16) @[Bitwise.scala 114:47]
    node _roundMask_T_44 = bits(_roundMask_T_43, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_45 = bits(_roundMask_T_44, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_45, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_47 = bits(_roundMask_T_45, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_48 = cat(_roundMask_T_46, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = bits(_roundMask_T_44, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_50 = bits(_roundMask_T_49, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_51 = bits(_roundMask_T_49, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_52 = cat(_roundMask_T_50, _roundMask_T_51) @[Cat.scala 33:92]
    node _roundMask_T_53 = cat(_roundMask_T_48, _roundMask_T_52) @[Cat.scala 33:92]
    node _roundMask_T_54 = bits(_roundMask_T_43, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_55 = bits(_roundMask_T_54, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_54, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_57 = cat(_roundMask_T_55, _roundMask_T_56) @[Cat.scala 33:92]
    node _roundMask_T_58 = cat(_roundMask_T_53, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = cat(_roundMask_T_42, _roundMask_T_58) @[Cat.scala 33:92]
    node _roundMask_T_60 = not(_roundMask_T_59) @[primitives.scala 73:32]
    node _roundMask_T_61 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_60) @[primitives.scala 73:21]
    node _roundMask_T_62 = not(_roundMask_T_61) @[primitives.scala 73:17]
    node _roundMask_T_63 = cat(_roundMask_T_62, UInt<3>("h7")) @[primitives.scala 68:58]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 58:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 59:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 76:56]
    node _roundMask_T_64 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 78:22]
    node _roundMask_T_65 = bits(_roundMask_T_64, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_66 = bits(_roundMask_T_65, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_67 = bits(_roundMask_T_65, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_68 = cat(_roundMask_T_66, _roundMask_T_67) @[Cat.scala 33:92]
    node _roundMask_T_69 = bits(_roundMask_T_64, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_70 = cat(_roundMask_T_68, _roundMask_T_69) @[Cat.scala 33:92]
    node _roundMask_T_71 = mux(roundMask_msb_3, _roundMask_T_70, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_72 = mux(roundMask_msb_1, _roundMask_T_63, _roundMask_T_71) @[primitives.scala 67:24]
    node _roundMask_T_73 = mux(roundMask_msb, _roundMask_T_72, UInt<1>("h0")) @[primitives.scala 62:24]
    node _roundMask_T_74 = or(_roundMask_T_73, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 159:23]
    node roundMask = cat(_roundMask_T_74, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 159:42]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 196:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 196:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 193:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h6b"))) @[RoundAnyRawFNToRecFN.scala 200:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 220:64]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 220:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 221:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 221:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 221:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 220:72]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 224:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 225:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 223:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 223:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 222:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 226:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 227:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 227:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 222:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 221:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 217:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module RoundRawFNToRecFN_e8_s24_3 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<27>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie8_is26_oe8_os24_3 @[RoundAnyRawFNToRecFN.scala 310:15]
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 314:44]
    roundAnyRawFNToRecFN.io.in.sig <= io.in.sig @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sExp <= io.in.sExp @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.sign <= io.in.sign @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isZero <= io.in.isZero @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isInf <= io.in.isInf @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= io.in.isNaN @[RoundAnyRawFNToRecFN.scala 315:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 316:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 317:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 318:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 319:23]

  module DivSqrtRecFM_small_e8_s24 :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<33>, flip b : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    inst divSqrtRecFNToRaw of DivSqrtRecFMToRaw_small_e8_s24 @[DivSqrtRecFN_small.scala 493:15]
    divSqrtRecFNToRaw.clock <= clock
    divSqrtRecFNToRaw.reset <= reset
    io.inReady <= divSqrtRecFNToRaw.io.inReady @[DivSqrtRecFN_small.scala 495:16]
    divSqrtRecFNToRaw.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 496:39]
    divSqrtRecFNToRaw.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 497:39]
    divSqrtRecFNToRaw.io.a <= io.a @[DivSqrtRecFN_small.scala 498:39]
    divSqrtRecFNToRaw.io.b <= io.b @[DivSqrtRecFN_small.scala 499:39]
    divSqrtRecFNToRaw.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 500:39]
    io.outValid_div <= divSqrtRecFNToRaw.io.rawOutValid_div @[DivSqrtRecFN_small.scala 504:22]
    io.outValid_sqrt <= divSqrtRecFNToRaw.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 505:22]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_e8_s24_3 @[DivSqrtRecFN_small.scala 508:15]
    roundRawFNToRecFN.io.invalidExc <= divSqrtRecFNToRaw.io.invalidExc @[DivSqrtRecFN_small.scala 509:39]
    roundRawFNToRecFN.io.infiniteExc <= divSqrtRecFNToRaw.io.infiniteExc @[DivSqrtRecFN_small.scala 510:39]
    roundRawFNToRecFN.io.in.sig <= divSqrtRecFNToRaw.io.rawOut.sig @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.in.sExp <= divSqrtRecFNToRaw.io.rawOut.sExp @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.in.sign <= divSqrtRecFNToRaw.io.rawOut.sign @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.in.isZero <= divSqrtRecFNToRaw.io.rawOut.isZero @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.in.isInf <= divSqrtRecFNToRaw.io.rawOut.isInf @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.in.isNaN <= divSqrtRecFNToRaw.io.rawOut.isNaN @[DivSqrtRecFN_small.scala 511:39]
    roundRawFNToRecFN.io.roundingMode <= divSqrtRecFNToRaw.io.roundingModeOut @[DivSqrtRecFN_small.scala 512:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[DivSqrtRecFN_small.scala 513:41]
    io.out <= roundRawFNToRecFN.io.out @[DivSqrtRecFN_small.scala 514:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[DivSqrtRecFN_small.scala 515:23]

  module CompareRecFN :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip signaling : UInt<1>, lt : UInt<1>, eq : UInt<1>, gt : UInt<1>, exceptionFlags : UInt<5>}

    node rawA_exp = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawA_isZero_T = bits(rawA_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawA_isZero = eq(_rawA_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawA_isSpecial_T = bits(rawA_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawA_isSpecial = eq(_rawA_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawA : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawA_out_isNaN_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawA_out_isNaN_T_1 = and(rawA_isSpecial, _rawA_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawA.isNaN <= _rawA_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawA_out_isInf_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawA_out_isInf_T_1 = eq(_rawA_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawA_out_isInf_T_2 = and(rawA_isSpecial, _rawA_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawA.isInf <= _rawA_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawA.isZero <= rawA_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawA_out_sign_T = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawA.sign <= _rawA_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawA_out_sExp_T = cvt(rawA_exp) @[rawFloatFromRecFN.scala 60:27]
    rawA.sExp <= _rawA_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawA_out_sig_T = eq(rawA_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawA_out_sig_T_1 = cat(UInt<1>("h0"), _rawA_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawA_out_sig_T_2 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawA_out_sig_T_3 = cat(_rawA_out_sig_T_1, _rawA_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawA.sig <= _rawA_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node rawB_exp = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawB_isZero_T = bits(rawB_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawB_isZero = eq(_rawB_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawB_isSpecial_T = bits(rawB_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawB_isSpecial = eq(_rawB_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawB : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawB_out_isNaN_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawB_out_isNaN_T_1 = and(rawB_isSpecial, _rawB_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawB.isNaN <= _rawB_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawB_out_isInf_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawB_out_isInf_T_1 = eq(_rawB_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawB_out_isInf_T_2 = and(rawB_isSpecial, _rawB_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawB.isInf <= _rawB_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawB.isZero <= rawB_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawB_out_sign_T = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawB.sign <= _rawB_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawB_out_sExp_T = cvt(rawB_exp) @[rawFloatFromRecFN.scala 60:27]
    rawB.sExp <= _rawB_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawB_out_sig_T = eq(rawB_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawB_out_sig_T_1 = cat(UInt<1>("h0"), _rawB_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawB_out_sig_T_2 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawB_out_sig_T_3 = cat(_rawB_out_sig_T_1, _rawB_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawB.sig <= _rawB_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node _ordered_T = eq(rawA.isNaN, UInt<1>("h0")) @[CompareRecFN.scala 57:19]
    node _ordered_T_1 = eq(rawB.isNaN, UInt<1>("h0")) @[CompareRecFN.scala 57:35]
    node ordered = and(_ordered_T, _ordered_T_1) @[CompareRecFN.scala 57:32]
    node bothInfs = and(rawA.isInf, rawB.isInf) @[CompareRecFN.scala 58:33]
    node bothZeros = and(rawA.isZero, rawB.isZero) @[CompareRecFN.scala 59:33]
    node eqExps = eq(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 60:29]
    node _common_ltMags_T = lt(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 62:20]
    node _common_ltMags_T_1 = lt(rawA.sig, rawB.sig) @[CompareRecFN.scala 62:57]
    node _common_ltMags_T_2 = and(eqExps, _common_ltMags_T_1) @[CompareRecFN.scala 62:44]
    node common_ltMags = or(_common_ltMags_T, _common_ltMags_T_2) @[CompareRecFN.scala 62:33]
    node _common_eqMags_T = eq(rawA.sig, rawB.sig) @[CompareRecFN.scala 63:45]
    node common_eqMags = and(eqExps, _common_eqMags_T) @[CompareRecFN.scala 63:32]
    node _ordered_lt_T = eq(bothZeros, UInt<1>("h0")) @[CompareRecFN.scala 66:9]
    node _ordered_lt_T_1 = eq(rawB.sign, UInt<1>("h0")) @[CompareRecFN.scala 67:28]
    node _ordered_lt_T_2 = and(rawA.sign, _ordered_lt_T_1) @[CompareRecFN.scala 67:25]
    node _ordered_lt_T_3 = eq(bothInfs, UInt<1>("h0")) @[CompareRecFN.scala 68:19]
    node _ordered_lt_T_4 = eq(common_ltMags, UInt<1>("h0")) @[CompareRecFN.scala 69:38]
    node _ordered_lt_T_5 = and(rawA.sign, _ordered_lt_T_4) @[CompareRecFN.scala 69:35]
    node _ordered_lt_T_6 = eq(common_eqMags, UInt<1>("h0")) @[CompareRecFN.scala 69:57]
    node _ordered_lt_T_7 = and(_ordered_lt_T_5, _ordered_lt_T_6) @[CompareRecFN.scala 69:54]
    node _ordered_lt_T_8 = eq(rawB.sign, UInt<1>("h0")) @[CompareRecFN.scala 70:29]
    node _ordered_lt_T_9 = and(_ordered_lt_T_8, common_ltMags) @[CompareRecFN.scala 70:41]
    node _ordered_lt_T_10 = or(_ordered_lt_T_7, _ordered_lt_T_9) @[CompareRecFN.scala 69:74]
    node _ordered_lt_T_11 = and(_ordered_lt_T_3, _ordered_lt_T_10) @[CompareRecFN.scala 68:30]
    node _ordered_lt_T_12 = or(_ordered_lt_T_2, _ordered_lt_T_11) @[CompareRecFN.scala 67:41]
    node ordered_lt = and(_ordered_lt_T, _ordered_lt_T_12) @[CompareRecFN.scala 66:21]
    node _ordered_eq_T = eq(rawA.sign, rawB.sign) @[CompareRecFN.scala 72:34]
    node _ordered_eq_T_1 = or(bothInfs, common_eqMags) @[CompareRecFN.scala 72:62]
    node _ordered_eq_T_2 = and(_ordered_eq_T, _ordered_eq_T_1) @[CompareRecFN.scala 72:49]
    node ordered_eq = or(bothZeros, _ordered_eq_T_2) @[CompareRecFN.scala 72:19]
    node _invalid_T = bits(rawA.sig, 22, 22) @[common.scala 82:56]
    node _invalid_T_1 = eq(_invalid_T, UInt<1>("h0")) @[common.scala 82:49]
    node _invalid_T_2 = and(rawA.isNaN, _invalid_T_1) @[common.scala 82:46]
    node _invalid_T_3 = bits(rawB.sig, 22, 22) @[common.scala 82:56]
    node _invalid_T_4 = eq(_invalid_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _invalid_T_5 = and(rawB.isNaN, _invalid_T_4) @[common.scala 82:46]
    node _invalid_T_6 = or(_invalid_T_2, _invalid_T_5) @[CompareRecFN.scala 75:32]
    node _invalid_T_7 = eq(ordered, UInt<1>("h0")) @[CompareRecFN.scala 76:30]
    node _invalid_T_8 = and(io.signaling, _invalid_T_7) @[CompareRecFN.scala 76:27]
    node invalid = or(_invalid_T_6, _invalid_T_8) @[CompareRecFN.scala 75:58]
    node _io_lt_T = and(ordered, ordered_lt) @[CompareRecFN.scala 78:22]
    io.lt <= _io_lt_T @[CompareRecFN.scala 78:11]
    node _io_eq_T = and(ordered, ordered_eq) @[CompareRecFN.scala 79:22]
    io.eq <= _io_eq_T @[CompareRecFN.scala 79:11]
    node _io_gt_T = eq(ordered_lt, UInt<1>("h0")) @[CompareRecFN.scala 80:25]
    node _io_gt_T_1 = and(ordered, _io_gt_T) @[CompareRecFN.scala 80:22]
    node _io_gt_T_2 = eq(ordered_eq, UInt<1>("h0")) @[CompareRecFN.scala 80:41]
    node _io_gt_T_3 = and(_io_gt_T_1, _io_gt_T_2) @[CompareRecFN.scala 80:38]
    io.gt <= _io_gt_T_3 @[CompareRecFN.scala 80:11]
    node _io_exceptionFlags_T = cat(invalid, UInt<4>("h0")) @[CompareRecFN.scala 81:34]
    io.exceptionFlags <= _io_exceptionFlags_T @[CompareRecFN.scala 81:23]

  module RecFNToIN_e8_s24_i32 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<33>, flip roundingMode : UInt<3>, flip signedOut : UInt<1>, out : UInt<32>, intExceptionFlags : UInt<3>}

    node rawIn_exp = bits(io.in, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _rawIn_isZero_T = bits(rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node rawIn_isZero = eq(_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _rawIn_isSpecial_T = bits(rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node rawIn_isSpecial = eq(_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _rawIn_out_isNaN_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawIn_out_isNaN_T_1 = and(rawIn_isSpecial, _rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isNaN <= _rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _rawIn_out_isInf_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _rawIn_out_isInf_T_1 = eq(_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _rawIn_out_isInf_T_2 = and(rawIn_isSpecial, _rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    rawIn.isInf <= _rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    rawIn.isZero <= rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _rawIn_out_sign_T = bits(io.in, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    rawIn.sign <= _rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _rawIn_out_sExp_T = cvt(rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    rawIn.sExp <= _rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _rawIn_out_sig_T = eq(rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _rawIn_out_sig_T_2 = bits(io.in, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _rawIn_out_sig_T_3 = cat(_rawIn_out_sig_T_1, _rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    rawIn.sig <= _rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node magGeOne = bits(rawIn.sExp, 8, 8) @[RecFNToIN.scala 61:30]
    node posExp = bits(rawIn.sExp, 7, 0) @[RecFNToIN.scala 62:28]
    node _magJustBelowOne_T = eq(magGeOne, UInt<1>("h0")) @[RecFNToIN.scala 63:27]
    node _magJustBelowOne_T_1 = andr(posExp) @[RecFNToIN.scala 63:47]
    node magJustBelowOne = and(_magJustBelowOne_T, _magJustBelowOne_T_1) @[RecFNToIN.scala 63:37]
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RecFNToIN.scala 67:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RecFNToIN.scala 68:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RecFNToIN.scala 69:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RecFNToIN.scala 70:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RecFNToIN.scala 71:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RecFNToIN.scala 72:53]
    node _shiftedSig_T = bits(rawIn.sig, 22, 0) @[RecFNToIN.scala 83:31]
    node _shiftedSig_T_1 = cat(magGeOne, _shiftedSig_T) @[RecFNToIN.scala 83:19]
    node _shiftedSig_T_2 = bits(rawIn.sExp, 4, 0) @[RecFNToIN.scala 85:27]
    node _shiftedSig_T_3 = mux(magGeOne, _shiftedSig_T_2, UInt<1>("h0")) @[RecFNToIN.scala 84:16]
    node shiftedSig = dshl(_shiftedSig_T_1, _shiftedSig_T_3) @[RecFNToIN.scala 83:49]
    node _alignedSig_T = shr(shiftedSig, 22) @[RecFNToIN.scala 89:20]
    node _alignedSig_T_1 = bits(shiftedSig, 21, 0) @[RecFNToIN.scala 89:51]
    node _alignedSig_T_2 = orr(_alignedSig_T_1) @[RecFNToIN.scala 89:69]
    node alignedSig = cat(_alignedSig_T, _alignedSig_T_2) @[RecFNToIN.scala 89:38]
    node _unroundedInt_T = shr(alignedSig, 2) @[RecFNToIN.scala 90:52]
    node unroundedInt = or(UInt<32>("h0"), _unroundedInt_T) @[RecFNToIN.scala 90:40]
    node _common_inexact_T = bits(alignedSig, 1, 0) @[RecFNToIN.scala 92:50]
    node _common_inexact_T_1 = orr(_common_inexact_T) @[RecFNToIN.scala 92:57]
    node _common_inexact_T_2 = eq(rawIn.isZero, UInt<1>("h0")) @[RecFNToIN.scala 92:62]
    node common_inexact = mux(magGeOne, _common_inexact_T_1, _common_inexact_T_2) @[RecFNToIN.scala 92:29]
    node _roundIncr_near_even_T = bits(alignedSig, 2, 1) @[RecFNToIN.scala 94:39]
    node _roundIncr_near_even_T_1 = andr(_roundIncr_near_even_T) @[RecFNToIN.scala 94:46]
    node _roundIncr_near_even_T_2 = bits(alignedSig, 1, 0) @[RecFNToIN.scala 94:64]
    node _roundIncr_near_even_T_3 = andr(_roundIncr_near_even_T_2) @[RecFNToIN.scala 94:71]
    node _roundIncr_near_even_T_4 = or(_roundIncr_near_even_T_1, _roundIncr_near_even_T_3) @[RecFNToIN.scala 94:51]
    node _roundIncr_near_even_T_5 = and(magGeOne, _roundIncr_near_even_T_4) @[RecFNToIN.scala 94:25]
    node _roundIncr_near_even_T_6 = bits(alignedSig, 1, 0) @[RecFNToIN.scala 95:39]
    node _roundIncr_near_even_T_7 = orr(_roundIncr_near_even_T_6) @[RecFNToIN.scala 95:46]
    node _roundIncr_near_even_T_8 = and(magJustBelowOne, _roundIncr_near_even_T_7) @[RecFNToIN.scala 95:26]
    node roundIncr_near_even = or(_roundIncr_near_even_T_5, _roundIncr_near_even_T_8) @[RecFNToIN.scala 94:78]
    node _roundIncr_near_maxMag_T = bits(alignedSig, 1, 1) @[RecFNToIN.scala 96:56]
    node _roundIncr_near_maxMag_T_1 = and(magGeOne, _roundIncr_near_maxMag_T) @[RecFNToIN.scala 96:43]
    node roundIncr_near_maxMag = or(_roundIncr_near_maxMag_T_1, magJustBelowOne) @[RecFNToIN.scala 96:61]
    node _roundIncr_T = and(roundingMode_near_even, roundIncr_near_even) @[RecFNToIN.scala 98:35]
    node _roundIncr_T_1 = and(roundingMode_near_maxMag, roundIncr_near_maxMag) @[RecFNToIN.scala 99:35]
    node _roundIncr_T_2 = or(_roundIncr_T, _roundIncr_T_1) @[RecFNToIN.scala 98:61]
    node _roundIncr_T_3 = or(roundingMode_min, roundingMode_odd) @[RecFNToIN.scala 100:28]
    node _roundIncr_T_4 = and(rawIn.sign, common_inexact) @[RecFNToIN.scala 101:26]
    node _roundIncr_T_5 = and(_roundIncr_T_3, _roundIncr_T_4) @[RecFNToIN.scala 100:49]
    node _roundIncr_T_6 = or(_roundIncr_T_2, _roundIncr_T_5) @[RecFNToIN.scala 99:61]
    node _roundIncr_T_7 = eq(rawIn.sign, UInt<1>("h0")) @[RecFNToIN.scala 102:31]
    node _roundIncr_T_8 = and(_roundIncr_T_7, common_inexact) @[RecFNToIN.scala 102:43]
    node _roundIncr_T_9 = and(roundingMode_max, _roundIncr_T_8) @[RecFNToIN.scala 102:27]
    node roundIncr = or(_roundIncr_T_6, _roundIncr_T_9) @[RecFNToIN.scala 101:46]
    node _complUnroundedInt_T = not(unroundedInt) @[RecFNToIN.scala 103:45]
    node complUnroundedInt = mux(rawIn.sign, _complUnroundedInt_T, unroundedInt) @[RecFNToIN.scala 103:32]
    node _roundedInt_T = xor(roundIncr, rawIn.sign) @[RecFNToIN.scala 105:23]
    node _roundedInt_T_1 = add(complUnroundedInt, UInt<1>("h1")) @[RecFNToIN.scala 106:31]
    node _roundedInt_T_2 = tail(_roundedInt_T_1, 1) @[RecFNToIN.scala 106:31]
    node _roundedInt_T_3 = mux(_roundedInt_T, _roundedInt_T_2, complUnroundedInt) @[RecFNToIN.scala 105:12]
    node _roundedInt_T_4 = and(roundingMode_odd, common_inexact) @[RecFNToIN.scala 108:31]
    node roundedInt = or(_roundedInt_T_3, _roundedInt_T_4) @[RecFNToIN.scala 108:11]
    node magGeOne_atOverflowEdge = eq(posExp, UInt<5>("h1f")) @[RecFNToIN.scala 110:43]
    node _roundCarryBut2_T = bits(unroundedInt, 29, 0) @[RecFNToIN.scala 113:38]
    node _roundCarryBut2_T_1 = andr(_roundCarryBut2_T) @[RecFNToIN.scala 113:56]
    node roundCarryBut2 = and(_roundCarryBut2_T_1, roundIncr) @[RecFNToIN.scala 113:61]
    node _common_overflow_T = geq(posExp, UInt<6>("h20")) @[RecFNToIN.scala 116:21]
    node _common_overflow_T_1 = bits(unroundedInt, 30, 0) @[RecFNToIN.scala 120:42]
    node _common_overflow_T_2 = orr(_common_overflow_T_1) @[RecFNToIN.scala 120:60]
    node _common_overflow_T_3 = or(_common_overflow_T_2, roundIncr) @[RecFNToIN.scala 120:64]
    node _common_overflow_T_4 = and(magGeOne_atOverflowEdge, _common_overflow_T_3) @[RecFNToIN.scala 119:49]
    node _common_overflow_T_5 = eq(posExp, UInt<5>("h1e")) @[RecFNToIN.scala 122:38]
    node _common_overflow_T_6 = and(_common_overflow_T_5, roundCarryBut2) @[RecFNToIN.scala 122:60]
    node _common_overflow_T_7 = or(magGeOne_atOverflowEdge, _common_overflow_T_6) @[RecFNToIN.scala 121:49]
    node _common_overflow_T_8 = mux(rawIn.sign, _common_overflow_T_4, _common_overflow_T_7) @[RecFNToIN.scala 118:24]
    node _common_overflow_T_9 = bits(unroundedInt, 30, 30) @[RecFNToIN.scala 126:42]
    node _common_overflow_T_10 = and(magGeOne_atOverflowEdge, _common_overflow_T_9) @[RecFNToIN.scala 125:50]
    node _common_overflow_T_11 = and(_common_overflow_T_10, roundCarryBut2) @[RecFNToIN.scala 126:57]
    node _common_overflow_T_12 = or(rawIn.sign, _common_overflow_T_11) @[RecFNToIN.scala 124:32]
    node _common_overflow_T_13 = mux(io.signedOut, _common_overflow_T_8, _common_overflow_T_12) @[RecFNToIN.scala 117:20]
    node _common_overflow_T_14 = or(_common_overflow_T, _common_overflow_T_13) @[RecFNToIN.scala 116:36]
    node _common_overflow_T_15 = eq(io.signedOut, UInt<1>("h0")) @[RecFNToIN.scala 128:13]
    node _common_overflow_T_16 = and(_common_overflow_T_15, rawIn.sign) @[RecFNToIN.scala 128:27]
    node _common_overflow_T_17 = and(_common_overflow_T_16, roundIncr) @[RecFNToIN.scala 128:41]
    node common_overflow = mux(magGeOne, _common_overflow_T_14, _common_overflow_T_17) @[RecFNToIN.scala 115:12]
    node invalidExc = or(rawIn.isNaN, rawIn.isInf) @[RecFNToIN.scala 133:34]
    node _overflow_T = eq(invalidExc, UInt<1>("h0")) @[RecFNToIN.scala 134:20]
    node overflow = and(_overflow_T, common_overflow) @[RecFNToIN.scala 134:32]
    node _inexact_T = eq(invalidExc, UInt<1>("h0")) @[RecFNToIN.scala 135:20]
    node _inexact_T_1 = eq(common_overflow, UInt<1>("h0")) @[RecFNToIN.scala 135:35]
    node _inexact_T_2 = and(_inexact_T, _inexact_T_1) @[RecFNToIN.scala 135:32]
    node inexact = and(_inexact_T_2, common_inexact) @[RecFNToIN.scala 135:52]
    node _excSign_T = eq(rawIn.isNaN, UInt<1>("h0")) @[RecFNToIN.scala 137:19]
    node excSign = and(_excSign_T, rawIn.sign) @[RecFNToIN.scala 137:32]
    node _excOut_T = eq(io.signedOut, excSign) @[RecFNToIN.scala 139:27]
    node _excOut_T_1 = mux(_excOut_T, UInt<32>("h80000000"), UInt<1>("h0")) @[RecFNToIN.scala 139:12]
    node _excOut_T_2 = eq(excSign, UInt<1>("h0")) @[RecFNToIN.scala 143:13]
    node _excOut_T_3 = mux(_excOut_T_2, UInt<31>("h7fffffff"), UInt<1>("h0")) @[RecFNToIN.scala 143:12]
    node excOut = or(_excOut_T_1, _excOut_T_3) @[RecFNToIN.scala 142:11]
    node _io_out_T = or(invalidExc, common_overflow) @[RecFNToIN.scala 145:30]
    node _io_out_T_1 = mux(_io_out_T, excOut, roundedInt) @[RecFNToIN.scala 145:18]
    io.out <= _io_out_T_1 @[RecFNToIN.scala 145:12]
    node _io_intExceptionFlags_T = cat(invalidExc, overflow) @[RecFNToIN.scala 146:40]
    node _io_intExceptionFlags_T_1 = cat(_io_intExceptionFlags_T, inexact) @[RecFNToIN.scala 146:52]
    io.intExceptionFlags <= _io_intExceptionFlags_T_1 @[RecFNToIN.scala 146:26]

  module RoundAnyRawFNToRecFN_ie6_is32_oe8_os24 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<8>, sig : UInt<33>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 94:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 95:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 98:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 98:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 98:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 98:42]
    node _sAdjustedExp_T = add(io.in.sExp, asSInt(UInt<9>("hc0"))) @[RoundAnyRawFNToRecFN.scala 104:25]
    node _sAdjustedExp_T_1 = bits(_sAdjustedExp_T, 8, 0) @[RoundAnyRawFNToRecFN.scala 106:14]
    node sAdjustedExp = cvt(_sAdjustedExp_T_1) @[RoundAnyRawFNToRecFN.scala 106:31]
    node _adjustedSig_T = bits(io.in.sig, 32, 7) @[RoundAnyRawFNToRecFN.scala 116:23]
    node _adjustedSig_T_1 = bits(io.in.sig, 6, 0) @[RoundAnyRawFNToRecFN.scala 117:26]
    node _adjustedSig_T_2 = orr(_adjustedSig_T_1) @[RoundAnyRawFNToRecFN.scala 117:60]
    node adjustedSig = cat(_adjustedSig_T, _adjustedSig_T_2) @[RoundAnyRawFNToRecFN.scala 116:66]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 122:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 123:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 126:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 127:37]
    node _roundMask_T = cat(UInt<24>("h0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 153:36]
    node roundMask = cat(_roundMask_T, UInt<2>("h3")) @[RoundAnyRawFNToRecFN.scala 153:55]
    node _shiftedRoundMask_T = cat(UInt<1>("h0"), roundMask) @[RoundAnyRawFNToRecFN.scala 162:41]
    node shiftedRoundMask = shr(_shiftedRoundMask_T, 1) @[RoundAnyRawFNToRecFN.scala 162:53]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 163:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 164:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 164:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 165:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 165:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 166:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 169:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 169:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 171:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 170:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 174:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 174:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 174:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 175:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 176:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 175:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 177:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<26>("h0")) @[RoundAnyRawFNToRecFN.scala 175:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 175:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 174:57]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 180:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 180:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 180:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 181:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 181:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 181:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 180:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 173:16]
    node _sRoundedExp_T = shr(roundedSig, 24) @[RoundAnyRawFNToRecFN.scala 185:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 185:76]
    node sRoundedExp = add(sAdjustedExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 185:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 187:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 187:23]
    node _common_fractOut_T = bits(roundedSig, 23, 1) @[RoundAnyRawFNToRecFN.scala 190:27]
    node _common_fractOut_T_1 = bits(roundedSig, 22, 0) @[RoundAnyRawFNToRecFN.scala 191:27]
    node _common_fractOut_T_2 = mux(UInt<1>("h0"), _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 189:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 188:25]
    common_overflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 193:25]
    common_totalUnderflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 197:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 203:61]
    node unboundedRange_roundPosBit = mux(UInt<1>("h0"), _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 203:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 205:44]
    node _unboundedRange_anyRound_T_1 = and(UInt<1>("h0"), _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 205:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 205:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 205:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 205:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 207:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 207:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 209:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 208:46]
    node _roundCarry_T = bits(roundedSig, 25, 25) @[RoundAnyRawFNToRecFN.scala 212:27]
    node _roundCarry_T_1 = bits(roundedSig, 24, 24) @[RoundAnyRawFNToRecFN.scala 213:27]
    node roundCarry = mux(UInt<1>("h0"), _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 211:16]
    common_underflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 215:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 230:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 230:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 235:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 236:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 237:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 237:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 237:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 238:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 239:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 240:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 240:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 243:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 243:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 245:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 245:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 245:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 246:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 246:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 248:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 248:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 250:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 253:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 253:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 253:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 252:24]
    node _expOut_T_4 = not(UInt<9>("h6b")) @[RoundAnyRawFNToRecFN.scala 258:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 257:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 257:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 256:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 261:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 261:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 260:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 265:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 265:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 264:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h6b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 269:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 268:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 273:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 272:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 277:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 276:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 278:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 277:73]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 280:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 280:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<23>("h400000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 281:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 280:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<23>("h7fffff"), UInt<23>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 283:11]
    node _io_out_T = cat(signOut, expOut) @[RoundAnyRawFNToRecFN.scala 286:23]
    node _io_out_T_1 = cat(_io_out_T, fractOut) @[RoundAnyRawFNToRecFN.scala 286:33]
    io.out <= _io_out_T_1 @[RoundAnyRawFNToRecFN.scala 286:12]
    node _io_exceptionFlags_T = cat(io.invalidExc, io.infiniteExc) @[RoundAnyRawFNToRecFN.scala 288:23]
    node _io_exceptionFlags_T_1 = cat(_io_exceptionFlags_T, overflow) @[RoundAnyRawFNToRecFN.scala 288:41]
    node _io_exceptionFlags_T_2 = cat(_io_exceptionFlags_T_1, underflow) @[RoundAnyRawFNToRecFN.scala 288:53]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, inexact) @[RoundAnyRawFNToRecFN.scala 288:66]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RoundAnyRawFNToRecFN.scala 287:23]

  module INToRecFN_i32_e8_s24 :
    output io : { flip signedIn : UInt<1>, flip in : UInt<32>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}

    node _intAsRawFloat_sign_T = bits(io.in, 31, 31) @[rawFloatFromIN.scala 51:34]
    node intAsRawFloat_sign = and(io.signedIn, _intAsRawFloat_sign_T) @[rawFloatFromIN.scala 51:29]
    node _intAsRawFloat_absIn_T = sub(UInt<1>("h0"), io.in) @[rawFloatFromIN.scala 52:31]
    node _intAsRawFloat_absIn_T_1 = tail(_intAsRawFloat_absIn_T, 1) @[rawFloatFromIN.scala 52:31]
    node intAsRawFloat_absIn = mux(intAsRawFloat_sign, _intAsRawFloat_absIn_T_1, io.in) @[rawFloatFromIN.scala 52:24]
    node _intAsRawFloat_extAbsIn_T = cat(UInt<32>("h0"), intAsRawFloat_absIn) @[rawFloatFromIN.scala 53:44]
    node intAsRawFloat_extAbsIn = bits(_intAsRawFloat_extAbsIn_T, 31, 0) @[rawFloatFromIN.scala 53:53]
    node _intAsRawFloat_adjustedNormDist_T = bits(intAsRawFloat_extAbsIn, 0, 0) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_1 = bits(intAsRawFloat_extAbsIn, 1, 1) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_2 = bits(intAsRawFloat_extAbsIn, 2, 2) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_3 = bits(intAsRawFloat_extAbsIn, 3, 3) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_4 = bits(intAsRawFloat_extAbsIn, 4, 4) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_5 = bits(intAsRawFloat_extAbsIn, 5, 5) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_6 = bits(intAsRawFloat_extAbsIn, 6, 6) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_7 = bits(intAsRawFloat_extAbsIn, 7, 7) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_8 = bits(intAsRawFloat_extAbsIn, 8, 8) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_9 = bits(intAsRawFloat_extAbsIn, 9, 9) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_10 = bits(intAsRawFloat_extAbsIn, 10, 10) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_11 = bits(intAsRawFloat_extAbsIn, 11, 11) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_12 = bits(intAsRawFloat_extAbsIn, 12, 12) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_13 = bits(intAsRawFloat_extAbsIn, 13, 13) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_14 = bits(intAsRawFloat_extAbsIn, 14, 14) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_15 = bits(intAsRawFloat_extAbsIn, 15, 15) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_16 = bits(intAsRawFloat_extAbsIn, 16, 16) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_17 = bits(intAsRawFloat_extAbsIn, 17, 17) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_18 = bits(intAsRawFloat_extAbsIn, 18, 18) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_19 = bits(intAsRawFloat_extAbsIn, 19, 19) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_20 = bits(intAsRawFloat_extAbsIn, 20, 20) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_21 = bits(intAsRawFloat_extAbsIn, 21, 21) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_22 = bits(intAsRawFloat_extAbsIn, 22, 22) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_23 = bits(intAsRawFloat_extAbsIn, 23, 23) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_24 = bits(intAsRawFloat_extAbsIn, 24, 24) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_25 = bits(intAsRawFloat_extAbsIn, 25, 25) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_26 = bits(intAsRawFloat_extAbsIn, 26, 26) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_27 = bits(intAsRawFloat_extAbsIn, 27, 27) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_28 = bits(intAsRawFloat_extAbsIn, 28, 28) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_29 = bits(intAsRawFloat_extAbsIn, 29, 29) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_30 = bits(intAsRawFloat_extAbsIn, 30, 30) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_31 = bits(intAsRawFloat_extAbsIn, 31, 31) @[primitives.scala 91:52]
    node _intAsRawFloat_adjustedNormDist_T_32 = mux(_intAsRawFloat_adjustedNormDist_T_1, UInt<5>("h1e"), UInt<5>("h1f")) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_33 = mux(_intAsRawFloat_adjustedNormDist_T_2, UInt<5>("h1d"), _intAsRawFloat_adjustedNormDist_T_32) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_34 = mux(_intAsRawFloat_adjustedNormDist_T_3, UInt<5>("h1c"), _intAsRawFloat_adjustedNormDist_T_33) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_35 = mux(_intAsRawFloat_adjustedNormDist_T_4, UInt<5>("h1b"), _intAsRawFloat_adjustedNormDist_T_34) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_36 = mux(_intAsRawFloat_adjustedNormDist_T_5, UInt<5>("h1a"), _intAsRawFloat_adjustedNormDist_T_35) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_37 = mux(_intAsRawFloat_adjustedNormDist_T_6, UInt<5>("h19"), _intAsRawFloat_adjustedNormDist_T_36) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_38 = mux(_intAsRawFloat_adjustedNormDist_T_7, UInt<5>("h18"), _intAsRawFloat_adjustedNormDist_T_37) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_39 = mux(_intAsRawFloat_adjustedNormDist_T_8, UInt<5>("h17"), _intAsRawFloat_adjustedNormDist_T_38) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_40 = mux(_intAsRawFloat_adjustedNormDist_T_9, UInt<5>("h16"), _intAsRawFloat_adjustedNormDist_T_39) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_41 = mux(_intAsRawFloat_adjustedNormDist_T_10, UInt<5>("h15"), _intAsRawFloat_adjustedNormDist_T_40) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_42 = mux(_intAsRawFloat_adjustedNormDist_T_11, UInt<5>("h14"), _intAsRawFloat_adjustedNormDist_T_41) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_43 = mux(_intAsRawFloat_adjustedNormDist_T_12, UInt<5>("h13"), _intAsRawFloat_adjustedNormDist_T_42) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_44 = mux(_intAsRawFloat_adjustedNormDist_T_13, UInt<5>("h12"), _intAsRawFloat_adjustedNormDist_T_43) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_45 = mux(_intAsRawFloat_adjustedNormDist_T_14, UInt<5>("h11"), _intAsRawFloat_adjustedNormDist_T_44) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_46 = mux(_intAsRawFloat_adjustedNormDist_T_15, UInt<5>("h10"), _intAsRawFloat_adjustedNormDist_T_45) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_47 = mux(_intAsRawFloat_adjustedNormDist_T_16, UInt<4>("hf"), _intAsRawFloat_adjustedNormDist_T_46) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_48 = mux(_intAsRawFloat_adjustedNormDist_T_17, UInt<4>("he"), _intAsRawFloat_adjustedNormDist_T_47) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_49 = mux(_intAsRawFloat_adjustedNormDist_T_18, UInt<4>("hd"), _intAsRawFloat_adjustedNormDist_T_48) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_50 = mux(_intAsRawFloat_adjustedNormDist_T_19, UInt<4>("hc"), _intAsRawFloat_adjustedNormDist_T_49) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_51 = mux(_intAsRawFloat_adjustedNormDist_T_20, UInt<4>("hb"), _intAsRawFloat_adjustedNormDist_T_50) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_52 = mux(_intAsRawFloat_adjustedNormDist_T_21, UInt<4>("ha"), _intAsRawFloat_adjustedNormDist_T_51) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_53 = mux(_intAsRawFloat_adjustedNormDist_T_22, UInt<4>("h9"), _intAsRawFloat_adjustedNormDist_T_52) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_54 = mux(_intAsRawFloat_adjustedNormDist_T_23, UInt<4>("h8"), _intAsRawFloat_adjustedNormDist_T_53) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_55 = mux(_intAsRawFloat_adjustedNormDist_T_24, UInt<3>("h7"), _intAsRawFloat_adjustedNormDist_T_54) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_56 = mux(_intAsRawFloat_adjustedNormDist_T_25, UInt<3>("h6"), _intAsRawFloat_adjustedNormDist_T_55) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_57 = mux(_intAsRawFloat_adjustedNormDist_T_26, UInt<3>("h5"), _intAsRawFloat_adjustedNormDist_T_56) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_58 = mux(_intAsRawFloat_adjustedNormDist_T_27, UInt<3>("h4"), _intAsRawFloat_adjustedNormDist_T_57) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_59 = mux(_intAsRawFloat_adjustedNormDist_T_28, UInt<2>("h3"), _intAsRawFloat_adjustedNormDist_T_58) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_60 = mux(_intAsRawFloat_adjustedNormDist_T_29, UInt<2>("h2"), _intAsRawFloat_adjustedNormDist_T_59) @[Mux.scala 47:70]
    node _intAsRawFloat_adjustedNormDist_T_61 = mux(_intAsRawFloat_adjustedNormDist_T_30, UInt<1>("h1"), _intAsRawFloat_adjustedNormDist_T_60) @[Mux.scala 47:70]
    node intAsRawFloat_adjustedNormDist = mux(_intAsRawFloat_adjustedNormDist_T_31, UInt<1>("h0"), _intAsRawFloat_adjustedNormDist_T_61) @[Mux.scala 47:70]
    node _intAsRawFloat_sig_T = dshl(intAsRawFloat_extAbsIn, intAsRawFloat_adjustedNormDist) @[rawFloatFromIN.scala 56:22]
    node intAsRawFloat_sig = bits(_intAsRawFloat_sig_T, 31, 0) @[rawFloatFromIN.scala 56:41]
    wire intAsRawFloat : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<8>, sig : UInt<33>} @[rawFloatFromIN.scala 59:23]
    intAsRawFloat.isNaN <= UInt<1>("h0") @[rawFloatFromIN.scala 60:20]
    intAsRawFloat.isInf <= UInt<1>("h0") @[rawFloatFromIN.scala 61:20]
    node _intAsRawFloat_out_isZero_T = bits(intAsRawFloat_sig, 31, 31) @[rawFloatFromIN.scala 62:28]
    node _intAsRawFloat_out_isZero_T_1 = eq(_intAsRawFloat_out_isZero_T, UInt<1>("h0")) @[rawFloatFromIN.scala 62:23]
    intAsRawFloat.isZero <= _intAsRawFloat_out_isZero_T_1 @[rawFloatFromIN.scala 62:20]
    intAsRawFloat.sign <= intAsRawFloat_sign @[rawFloatFromIN.scala 63:20]
    node _intAsRawFloat_out_sExp_T = bits(intAsRawFloat_adjustedNormDist, 4, 0) @[rawFloatFromIN.scala 64:53]
    node _intAsRawFloat_out_sExp_T_1 = not(_intAsRawFloat_out_sExp_T) @[rawFloatFromIN.scala 64:36]
    node _intAsRawFloat_out_sExp_T_2 = cat(UInt<2>("h2"), _intAsRawFloat_out_sExp_T_1) @[rawFloatFromIN.scala 64:33]
    node _intAsRawFloat_out_sExp_T_3 = cvt(_intAsRawFloat_out_sExp_T_2) @[rawFloatFromIN.scala 64:72]
    intAsRawFloat.sExp <= _intAsRawFloat_out_sExp_T_3 @[rawFloatFromIN.scala 64:20]
    intAsRawFloat.sig <= intAsRawFloat_sig @[rawFloatFromIN.scala 65:20]
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_ie6_is32_oe8_os24 @[INToRecFN.scala 60:15]
    roundAnyRawFNToRecFN.io.invalidExc <= UInt<1>("h0") @[INToRecFN.scala 68:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[INToRecFN.scala 69:44]
    roundAnyRawFNToRecFN.io.in.sig <= intAsRawFloat.sig @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.in.sExp <= intAsRawFloat.sExp @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.in.sign <= intAsRawFloat.sign @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.in.isZero <= intAsRawFloat.isZero @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.in.isInf <= intAsRawFloat.isInf @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.in.isNaN <= intAsRawFloat.isNaN @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[INToRecFN.scala 71:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[INToRecFN.scala 72:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[INToRecFN.scala 73:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[INToRecFN.scala 74:23]

  module FPU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<32>[3], flip aluOp : UInt<5>, flip rm : UInt<3>, flip div_sqrt_valid : UInt<1>, out : UInt<32>, exceptions : UInt<1>[5], div_sqrt_ready : UInt<1>, div_sqrt_valid_out : UInt<1>}

    inst MulAddRecFN_e8_s24 of MulAddRecFN_e8_s24 @[FPU.scala 41:20]
    inst AddRecFN of AddRecFN @[FPU.scala 42:19]
    inst MulRecFN of MulRecFN @[FPU.scala 43:19]
    inst DivSqrtRecFM_small_e8_s24 of DivSqrtRecFM_small_e8_s24 @[FPU.scala 44:19]
    DivSqrtRecFM_small_e8_s24.clock <= clock
    DivSqrtRecFM_small_e8_s24.reset <= reset
    inst CompareRecFN of CompareRecFN @[FPU.scala 45:19]
    inst RecFNToIN_e8_s24_i32 of RecFNToIN_e8_s24_i32 @[FPU.scala 46:22]
    RecFNToIN_e8_s24_i32.clock <= clock
    RecFNToIN_e8_s24_i32.reset <= reset
    inst INToRecFN_i32_e8_s24 of INToRecFN_i32_e8_s24 @[FPU.scala 47:22]
    node raw_in_sign = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node raw_in_expIn = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node raw_in_fractIn = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node raw_in_isZeroExpIn = eq(raw_in_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node raw_in_isZeroFractIn = eq(raw_in_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _raw_in_normDist_T = bits(raw_in_fractIn, 0, 0) @[primitives.scala 91:52]
    node _raw_in_normDist_T_1 = bits(raw_in_fractIn, 1, 1) @[primitives.scala 91:52]
    node _raw_in_normDist_T_2 = bits(raw_in_fractIn, 2, 2) @[primitives.scala 91:52]
    node _raw_in_normDist_T_3 = bits(raw_in_fractIn, 3, 3) @[primitives.scala 91:52]
    node _raw_in_normDist_T_4 = bits(raw_in_fractIn, 4, 4) @[primitives.scala 91:52]
    node _raw_in_normDist_T_5 = bits(raw_in_fractIn, 5, 5) @[primitives.scala 91:52]
    node _raw_in_normDist_T_6 = bits(raw_in_fractIn, 6, 6) @[primitives.scala 91:52]
    node _raw_in_normDist_T_7 = bits(raw_in_fractIn, 7, 7) @[primitives.scala 91:52]
    node _raw_in_normDist_T_8 = bits(raw_in_fractIn, 8, 8) @[primitives.scala 91:52]
    node _raw_in_normDist_T_9 = bits(raw_in_fractIn, 9, 9) @[primitives.scala 91:52]
    node _raw_in_normDist_T_10 = bits(raw_in_fractIn, 10, 10) @[primitives.scala 91:52]
    node _raw_in_normDist_T_11 = bits(raw_in_fractIn, 11, 11) @[primitives.scala 91:52]
    node _raw_in_normDist_T_12 = bits(raw_in_fractIn, 12, 12) @[primitives.scala 91:52]
    node _raw_in_normDist_T_13 = bits(raw_in_fractIn, 13, 13) @[primitives.scala 91:52]
    node _raw_in_normDist_T_14 = bits(raw_in_fractIn, 14, 14) @[primitives.scala 91:52]
    node _raw_in_normDist_T_15 = bits(raw_in_fractIn, 15, 15) @[primitives.scala 91:52]
    node _raw_in_normDist_T_16 = bits(raw_in_fractIn, 16, 16) @[primitives.scala 91:52]
    node _raw_in_normDist_T_17 = bits(raw_in_fractIn, 17, 17) @[primitives.scala 91:52]
    node _raw_in_normDist_T_18 = bits(raw_in_fractIn, 18, 18) @[primitives.scala 91:52]
    node _raw_in_normDist_T_19 = bits(raw_in_fractIn, 19, 19) @[primitives.scala 91:52]
    node _raw_in_normDist_T_20 = bits(raw_in_fractIn, 20, 20) @[primitives.scala 91:52]
    node _raw_in_normDist_T_21 = bits(raw_in_fractIn, 21, 21) @[primitives.scala 91:52]
    node _raw_in_normDist_T_22 = bits(raw_in_fractIn, 22, 22) @[primitives.scala 91:52]
    node _raw_in_normDist_T_23 = mux(_raw_in_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _raw_in_normDist_T_24 = mux(_raw_in_normDist_T_2, UInt<5>("h14"), _raw_in_normDist_T_23) @[Mux.scala 47:70]
    node _raw_in_normDist_T_25 = mux(_raw_in_normDist_T_3, UInt<5>("h13"), _raw_in_normDist_T_24) @[Mux.scala 47:70]
    node _raw_in_normDist_T_26 = mux(_raw_in_normDist_T_4, UInt<5>("h12"), _raw_in_normDist_T_25) @[Mux.scala 47:70]
    node _raw_in_normDist_T_27 = mux(_raw_in_normDist_T_5, UInt<5>("h11"), _raw_in_normDist_T_26) @[Mux.scala 47:70]
    node _raw_in_normDist_T_28 = mux(_raw_in_normDist_T_6, UInt<5>("h10"), _raw_in_normDist_T_27) @[Mux.scala 47:70]
    node _raw_in_normDist_T_29 = mux(_raw_in_normDist_T_7, UInt<4>("hf"), _raw_in_normDist_T_28) @[Mux.scala 47:70]
    node _raw_in_normDist_T_30 = mux(_raw_in_normDist_T_8, UInt<4>("he"), _raw_in_normDist_T_29) @[Mux.scala 47:70]
    node _raw_in_normDist_T_31 = mux(_raw_in_normDist_T_9, UInt<4>("hd"), _raw_in_normDist_T_30) @[Mux.scala 47:70]
    node _raw_in_normDist_T_32 = mux(_raw_in_normDist_T_10, UInt<4>("hc"), _raw_in_normDist_T_31) @[Mux.scala 47:70]
    node _raw_in_normDist_T_33 = mux(_raw_in_normDist_T_11, UInt<4>("hb"), _raw_in_normDist_T_32) @[Mux.scala 47:70]
    node _raw_in_normDist_T_34 = mux(_raw_in_normDist_T_12, UInt<4>("ha"), _raw_in_normDist_T_33) @[Mux.scala 47:70]
    node _raw_in_normDist_T_35 = mux(_raw_in_normDist_T_13, UInt<4>("h9"), _raw_in_normDist_T_34) @[Mux.scala 47:70]
    node _raw_in_normDist_T_36 = mux(_raw_in_normDist_T_14, UInt<4>("h8"), _raw_in_normDist_T_35) @[Mux.scala 47:70]
    node _raw_in_normDist_T_37 = mux(_raw_in_normDist_T_15, UInt<3>("h7"), _raw_in_normDist_T_36) @[Mux.scala 47:70]
    node _raw_in_normDist_T_38 = mux(_raw_in_normDist_T_16, UInt<3>("h6"), _raw_in_normDist_T_37) @[Mux.scala 47:70]
    node _raw_in_normDist_T_39 = mux(_raw_in_normDist_T_17, UInt<3>("h5"), _raw_in_normDist_T_38) @[Mux.scala 47:70]
    node _raw_in_normDist_T_40 = mux(_raw_in_normDist_T_18, UInt<3>("h4"), _raw_in_normDist_T_39) @[Mux.scala 47:70]
    node _raw_in_normDist_T_41 = mux(_raw_in_normDist_T_19, UInt<2>("h3"), _raw_in_normDist_T_40) @[Mux.scala 47:70]
    node _raw_in_normDist_T_42 = mux(_raw_in_normDist_T_20, UInt<2>("h2"), _raw_in_normDist_T_41) @[Mux.scala 47:70]
    node _raw_in_normDist_T_43 = mux(_raw_in_normDist_T_21, UInt<1>("h1"), _raw_in_normDist_T_42) @[Mux.scala 47:70]
    node raw_in_normDist = mux(_raw_in_normDist_T_22, UInt<1>("h0"), _raw_in_normDist_T_43) @[Mux.scala 47:70]
    node _raw_in_subnormFract_T = dshl(raw_in_fractIn, raw_in_normDist) @[rawFloatFromFN.scala 52:33]
    node _raw_in_subnormFract_T_1 = bits(_raw_in_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node raw_in_subnormFract = shl(_raw_in_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _raw_in_adjustedExp_T = xor(raw_in_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _raw_in_adjustedExp_T_1 = mux(raw_in_isZeroExpIn, _raw_in_adjustedExp_T, raw_in_expIn) @[rawFloatFromFN.scala 54:10]
    node _raw_in_adjustedExp_T_2 = mux(raw_in_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _raw_in_adjustedExp_T_3 = or(UInt<8>("h80"), _raw_in_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _raw_in_adjustedExp_T_4 = add(_raw_in_adjustedExp_T_1, _raw_in_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node raw_in_adjustedExp = tail(_raw_in_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node raw_in_isZero = and(raw_in_isZeroExpIn, raw_in_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _raw_in_isSpecial_T = bits(raw_in_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node raw_in_isSpecial = eq(_raw_in_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire raw_in_out : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _raw_in_out_isNaN_T = eq(raw_in_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _raw_in_out_isNaN_T_1 = and(raw_in_isSpecial, _raw_in_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    raw_in_out.isNaN <= _raw_in_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _raw_in_out_isInf_T = and(raw_in_isSpecial, raw_in_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    raw_in_out.isInf <= _raw_in_out_isInf_T @[rawFloatFromFN.scala 65:15]
    raw_in_out.isZero <= raw_in_isZero @[rawFloatFromFN.scala 66:16]
    raw_in_out.sign <= raw_in_sign @[rawFloatFromFN.scala 67:14]
    node _raw_in_out_sExp_T = bits(raw_in_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _raw_in_out_sExp_T_1 = cvt(_raw_in_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    raw_in_out.sExp <= _raw_in_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _raw_in_out_sig_T = eq(raw_in_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _raw_in_out_sig_T_1 = cat(UInt<1>("h0"), _raw_in_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _raw_in_out_sig_T_2 = mux(raw_in_isZeroExpIn, raw_in_subnormFract, raw_in_fractIn) @[rawFloatFromFN.scala 70:33]
    node _raw_in_out_sig_T_3 = cat(_raw_in_out_sig_T_1, _raw_in_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    raw_in_out.sig <= _raw_in_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node raw_in_sign_1 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node raw_in_expIn_1 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node raw_in_fractIn_1 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node raw_in_isZeroExpIn_1 = eq(raw_in_expIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node raw_in_isZeroFractIn_1 = eq(raw_in_fractIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _raw_in_normDist_T_44 = bits(raw_in_fractIn_1, 0, 0) @[primitives.scala 91:52]
    node _raw_in_normDist_T_45 = bits(raw_in_fractIn_1, 1, 1) @[primitives.scala 91:52]
    node _raw_in_normDist_T_46 = bits(raw_in_fractIn_1, 2, 2) @[primitives.scala 91:52]
    node _raw_in_normDist_T_47 = bits(raw_in_fractIn_1, 3, 3) @[primitives.scala 91:52]
    node _raw_in_normDist_T_48 = bits(raw_in_fractIn_1, 4, 4) @[primitives.scala 91:52]
    node _raw_in_normDist_T_49 = bits(raw_in_fractIn_1, 5, 5) @[primitives.scala 91:52]
    node _raw_in_normDist_T_50 = bits(raw_in_fractIn_1, 6, 6) @[primitives.scala 91:52]
    node _raw_in_normDist_T_51 = bits(raw_in_fractIn_1, 7, 7) @[primitives.scala 91:52]
    node _raw_in_normDist_T_52 = bits(raw_in_fractIn_1, 8, 8) @[primitives.scala 91:52]
    node _raw_in_normDist_T_53 = bits(raw_in_fractIn_1, 9, 9) @[primitives.scala 91:52]
    node _raw_in_normDist_T_54 = bits(raw_in_fractIn_1, 10, 10) @[primitives.scala 91:52]
    node _raw_in_normDist_T_55 = bits(raw_in_fractIn_1, 11, 11) @[primitives.scala 91:52]
    node _raw_in_normDist_T_56 = bits(raw_in_fractIn_1, 12, 12) @[primitives.scala 91:52]
    node _raw_in_normDist_T_57 = bits(raw_in_fractIn_1, 13, 13) @[primitives.scala 91:52]
    node _raw_in_normDist_T_58 = bits(raw_in_fractIn_1, 14, 14) @[primitives.scala 91:52]
    node _raw_in_normDist_T_59 = bits(raw_in_fractIn_1, 15, 15) @[primitives.scala 91:52]
    node _raw_in_normDist_T_60 = bits(raw_in_fractIn_1, 16, 16) @[primitives.scala 91:52]
    node _raw_in_normDist_T_61 = bits(raw_in_fractIn_1, 17, 17) @[primitives.scala 91:52]
    node _raw_in_normDist_T_62 = bits(raw_in_fractIn_1, 18, 18) @[primitives.scala 91:52]
    node _raw_in_normDist_T_63 = bits(raw_in_fractIn_1, 19, 19) @[primitives.scala 91:52]
    node _raw_in_normDist_T_64 = bits(raw_in_fractIn_1, 20, 20) @[primitives.scala 91:52]
    node _raw_in_normDist_T_65 = bits(raw_in_fractIn_1, 21, 21) @[primitives.scala 91:52]
    node _raw_in_normDist_T_66 = bits(raw_in_fractIn_1, 22, 22) @[primitives.scala 91:52]
    node _raw_in_normDist_T_67 = mux(_raw_in_normDist_T_45, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _raw_in_normDist_T_68 = mux(_raw_in_normDist_T_46, UInt<5>("h14"), _raw_in_normDist_T_67) @[Mux.scala 47:70]
    node _raw_in_normDist_T_69 = mux(_raw_in_normDist_T_47, UInt<5>("h13"), _raw_in_normDist_T_68) @[Mux.scala 47:70]
    node _raw_in_normDist_T_70 = mux(_raw_in_normDist_T_48, UInt<5>("h12"), _raw_in_normDist_T_69) @[Mux.scala 47:70]
    node _raw_in_normDist_T_71 = mux(_raw_in_normDist_T_49, UInt<5>("h11"), _raw_in_normDist_T_70) @[Mux.scala 47:70]
    node _raw_in_normDist_T_72 = mux(_raw_in_normDist_T_50, UInt<5>("h10"), _raw_in_normDist_T_71) @[Mux.scala 47:70]
    node _raw_in_normDist_T_73 = mux(_raw_in_normDist_T_51, UInt<4>("hf"), _raw_in_normDist_T_72) @[Mux.scala 47:70]
    node _raw_in_normDist_T_74 = mux(_raw_in_normDist_T_52, UInt<4>("he"), _raw_in_normDist_T_73) @[Mux.scala 47:70]
    node _raw_in_normDist_T_75 = mux(_raw_in_normDist_T_53, UInt<4>("hd"), _raw_in_normDist_T_74) @[Mux.scala 47:70]
    node _raw_in_normDist_T_76 = mux(_raw_in_normDist_T_54, UInt<4>("hc"), _raw_in_normDist_T_75) @[Mux.scala 47:70]
    node _raw_in_normDist_T_77 = mux(_raw_in_normDist_T_55, UInt<4>("hb"), _raw_in_normDist_T_76) @[Mux.scala 47:70]
    node _raw_in_normDist_T_78 = mux(_raw_in_normDist_T_56, UInt<4>("ha"), _raw_in_normDist_T_77) @[Mux.scala 47:70]
    node _raw_in_normDist_T_79 = mux(_raw_in_normDist_T_57, UInt<4>("h9"), _raw_in_normDist_T_78) @[Mux.scala 47:70]
    node _raw_in_normDist_T_80 = mux(_raw_in_normDist_T_58, UInt<4>("h8"), _raw_in_normDist_T_79) @[Mux.scala 47:70]
    node _raw_in_normDist_T_81 = mux(_raw_in_normDist_T_59, UInt<3>("h7"), _raw_in_normDist_T_80) @[Mux.scala 47:70]
    node _raw_in_normDist_T_82 = mux(_raw_in_normDist_T_60, UInt<3>("h6"), _raw_in_normDist_T_81) @[Mux.scala 47:70]
    node _raw_in_normDist_T_83 = mux(_raw_in_normDist_T_61, UInt<3>("h5"), _raw_in_normDist_T_82) @[Mux.scala 47:70]
    node _raw_in_normDist_T_84 = mux(_raw_in_normDist_T_62, UInt<3>("h4"), _raw_in_normDist_T_83) @[Mux.scala 47:70]
    node _raw_in_normDist_T_85 = mux(_raw_in_normDist_T_63, UInt<2>("h3"), _raw_in_normDist_T_84) @[Mux.scala 47:70]
    node _raw_in_normDist_T_86 = mux(_raw_in_normDist_T_64, UInt<2>("h2"), _raw_in_normDist_T_85) @[Mux.scala 47:70]
    node _raw_in_normDist_T_87 = mux(_raw_in_normDist_T_65, UInt<1>("h1"), _raw_in_normDist_T_86) @[Mux.scala 47:70]
    node raw_in_normDist_1 = mux(_raw_in_normDist_T_66, UInt<1>("h0"), _raw_in_normDist_T_87) @[Mux.scala 47:70]
    node _raw_in_subnormFract_T_2 = dshl(raw_in_fractIn_1, raw_in_normDist_1) @[rawFloatFromFN.scala 52:33]
    node _raw_in_subnormFract_T_3 = bits(_raw_in_subnormFract_T_2, 21, 0) @[rawFloatFromFN.scala 52:46]
    node raw_in_subnormFract_1 = shl(_raw_in_subnormFract_T_3, 1) @[rawFloatFromFN.scala 52:64]
    node _raw_in_adjustedExp_T_5 = xor(raw_in_normDist_1, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _raw_in_adjustedExp_T_6 = mux(raw_in_isZeroExpIn_1, _raw_in_adjustedExp_T_5, raw_in_expIn_1) @[rawFloatFromFN.scala 54:10]
    node _raw_in_adjustedExp_T_7 = mux(raw_in_isZeroExpIn_1, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _raw_in_adjustedExp_T_8 = or(UInt<8>("h80"), _raw_in_adjustedExp_T_7) @[rawFloatFromFN.scala 58:9]
    node _raw_in_adjustedExp_T_9 = add(_raw_in_adjustedExp_T_6, _raw_in_adjustedExp_T_8) @[rawFloatFromFN.scala 57:9]
    node raw_in_adjustedExp_1 = tail(_raw_in_adjustedExp_T_9, 1) @[rawFloatFromFN.scala 57:9]
    node raw_in_isZero_1 = and(raw_in_isZeroExpIn_1, raw_in_isZeroFractIn_1) @[rawFloatFromFN.scala 60:30]
    node _raw_in_isSpecial_T_1 = bits(raw_in_adjustedExp_1, 8, 7) @[rawFloatFromFN.scala 61:32]
    node raw_in_isSpecial_1 = eq(_raw_in_isSpecial_T_1, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire raw_in_out_1 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _raw_in_out_isNaN_T_2 = eq(raw_in_isZeroFractIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _raw_in_out_isNaN_T_3 = and(raw_in_isSpecial_1, _raw_in_out_isNaN_T_2) @[rawFloatFromFN.scala 64:28]
    raw_in_out_1.isNaN <= _raw_in_out_isNaN_T_3 @[rawFloatFromFN.scala 64:15]
    node _raw_in_out_isInf_T_1 = and(raw_in_isSpecial_1, raw_in_isZeroFractIn_1) @[rawFloatFromFN.scala 65:28]
    raw_in_out_1.isInf <= _raw_in_out_isInf_T_1 @[rawFloatFromFN.scala 65:15]
    raw_in_out_1.isZero <= raw_in_isZero_1 @[rawFloatFromFN.scala 66:16]
    raw_in_out_1.sign <= raw_in_sign_1 @[rawFloatFromFN.scala 67:14]
    node _raw_in_out_sExp_T_2 = bits(raw_in_adjustedExp_1, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _raw_in_out_sExp_T_3 = cvt(_raw_in_out_sExp_T_2) @[rawFloatFromFN.scala 68:42]
    raw_in_out_1.sExp <= _raw_in_out_sExp_T_3 @[rawFloatFromFN.scala 68:14]
    node _raw_in_out_sig_T_4 = eq(raw_in_isZero_1, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _raw_in_out_sig_T_5 = cat(UInt<1>("h0"), _raw_in_out_sig_T_4) @[rawFloatFromFN.scala 70:16]
    node _raw_in_out_sig_T_6 = mux(raw_in_isZeroExpIn_1, raw_in_subnormFract_1, raw_in_fractIn_1) @[rawFloatFromFN.scala 70:33]
    node _raw_in_out_sig_T_7 = cat(_raw_in_out_sig_T_5, _raw_in_out_sig_T_6) @[rawFloatFromFN.scala 70:27]
    raw_in_out_1.sig <= _raw_in_out_sig_T_7 @[rawFloatFromFN.scala 69:13]
    wire raw_in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}[2] @[FPU.scala 48:23]
    raw_in[0] <= raw_in_out @[FPU.scala 48:23]
    raw_in[1] <= raw_in_out_1 @[FPU.scala 48:23]
    wire _op_out_WIRE : UInt<33>[5] @[FPU.scala 51:23]
    _op_out_WIRE[0] <= MulAddRecFN_e8_s24.io.out @[FPU.scala 51:23]
    _op_out_WIRE[1] <= AddRecFN.io.out @[FPU.scala 51:23]
    _op_out_WIRE[2] <= MulRecFN.io.out @[FPU.scala 51:23]
    _op_out_WIRE[3] <= DivSqrtRecFM_small_e8_s24.io.out @[FPU.scala 51:23]
    _op_out_WIRE[4] <= INToRecFN_i32_e8_s24.io.out @[FPU.scala 51:23]
    node op_out_rawIn_exp = bits(_op_out_WIRE[0], 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _op_out_rawIn_isZero_T = bits(op_out_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node op_out_rawIn_isZero = eq(_op_out_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _op_out_rawIn_isSpecial_T = bits(op_out_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node op_out_rawIn_isSpecial = eq(_op_out_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire op_out_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _op_out_rawIn_out_isNaN_T = bits(op_out_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _op_out_rawIn_out_isNaN_T_1 = and(op_out_rawIn_isSpecial, _op_out_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 56:33]
    op_out_rawIn.isNaN <= _op_out_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 56:20]
    node _op_out_rawIn_out_isInf_T = bits(op_out_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _op_out_rawIn_out_isInf_T_1 = eq(_op_out_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _op_out_rawIn_out_isInf_T_2 = and(op_out_rawIn_isSpecial, _op_out_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 57:33]
    op_out_rawIn.isInf <= _op_out_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 57:20]
    op_out_rawIn.isZero <= op_out_rawIn_isZero @[rawFloatFromRecFN.scala 58:20]
    node _op_out_rawIn_out_sign_T = bits(_op_out_WIRE[0], 32, 32) @[rawFloatFromRecFN.scala 59:25]
    op_out_rawIn.sign <= _op_out_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _op_out_rawIn_out_sExp_T = cvt(op_out_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    op_out_rawIn.sExp <= _op_out_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 60:20]
    node _op_out_rawIn_out_sig_T = eq(op_out_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _op_out_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _op_out_rawIn_out_sig_T) @[rawFloatFromRecFN.scala 61:32]
    node _op_out_rawIn_out_sig_T_2 = bits(_op_out_WIRE[0], 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _op_out_rawIn_out_sig_T_3 = cat(_op_out_rawIn_out_sig_T_1, _op_out_rawIn_out_sig_T_2) @[rawFloatFromRecFN.scala 61:44]
    op_out_rawIn.sig <= _op_out_rawIn_out_sig_T_3 @[rawFloatFromRecFN.scala 61:20]
    node op_out_isSubnormal = lt(op_out_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _op_out_denormShiftDist_T = bits(op_out_rawIn.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _op_out_denormShiftDist_T_1 = sub(UInt<1>("h1"), _op_out_denormShiftDist_T) @[fNFromRecFN.scala 52:35]
    node op_out_denormShiftDist = tail(_op_out_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 52:35]
    node _op_out_denormFract_T = shr(op_out_rawIn.sig, 1) @[fNFromRecFN.scala 53:38]
    node _op_out_denormFract_T_1 = dshr(_op_out_denormFract_T, op_out_denormShiftDist) @[fNFromRecFN.scala 53:42]
    node op_out_denormFract = bits(_op_out_denormFract_T_1, 22, 0) @[fNFromRecFN.scala 53:60]
    node _op_out_expOut_T = bits(op_out_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _op_out_expOut_T_1 = sub(_op_out_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_2 = tail(_op_out_expOut_T_1, 1) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_3 = mux(op_out_isSubnormal, UInt<1>("h0"), _op_out_expOut_T_2) @[fNFromRecFN.scala 56:16]
    node _op_out_expOut_T_4 = or(op_out_rawIn.isNaN, op_out_rawIn.isInf) @[fNFromRecFN.scala 60:44]
    node _op_out_expOut_T_5 = bits(_op_out_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _op_out_expOut_T_6 = mux(_op_out_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node op_out_expOut = or(_op_out_expOut_T_3, _op_out_expOut_T_6) @[fNFromRecFN.scala 60:15]
    node _op_out_fractOut_T = bits(op_out_rawIn.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _op_out_fractOut_T_1 = mux(op_out_rawIn.isInf, UInt<1>("h0"), _op_out_fractOut_T) @[fNFromRecFN.scala 64:20]
    node op_out_fractOut = mux(op_out_isSubnormal, op_out_denormFract, _op_out_fractOut_T_1) @[fNFromRecFN.scala 62:16]
    node op_out_hi = cat(op_out_rawIn.sign, op_out_expOut) @[Cat.scala 33:92]
    node op_out_0 = cat(op_out_hi, op_out_fractOut) @[Cat.scala 33:92]
    node op_out_rawIn_exp_1 = bits(_op_out_WIRE[1], 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _op_out_rawIn_isZero_T_1 = bits(op_out_rawIn_exp_1, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node op_out_rawIn_isZero_1 = eq(_op_out_rawIn_isZero_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _op_out_rawIn_isSpecial_T_1 = bits(op_out_rawIn_exp_1, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node op_out_rawIn_isSpecial_1 = eq(_op_out_rawIn_isSpecial_T_1, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire op_out_rawIn_1 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _op_out_rawIn_out_isNaN_T_2 = bits(op_out_rawIn_exp_1, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _op_out_rawIn_out_isNaN_T_3 = and(op_out_rawIn_isSpecial_1, _op_out_rawIn_out_isNaN_T_2) @[rawFloatFromRecFN.scala 56:33]
    op_out_rawIn_1.isNaN <= _op_out_rawIn_out_isNaN_T_3 @[rawFloatFromRecFN.scala 56:20]
    node _op_out_rawIn_out_isInf_T_3 = bits(op_out_rawIn_exp_1, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _op_out_rawIn_out_isInf_T_4 = eq(_op_out_rawIn_out_isInf_T_3, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _op_out_rawIn_out_isInf_T_5 = and(op_out_rawIn_isSpecial_1, _op_out_rawIn_out_isInf_T_4) @[rawFloatFromRecFN.scala 57:33]
    op_out_rawIn_1.isInf <= _op_out_rawIn_out_isInf_T_5 @[rawFloatFromRecFN.scala 57:20]
    op_out_rawIn_1.isZero <= op_out_rawIn_isZero_1 @[rawFloatFromRecFN.scala 58:20]
    node _op_out_rawIn_out_sign_T_1 = bits(_op_out_WIRE[1], 32, 32) @[rawFloatFromRecFN.scala 59:25]
    op_out_rawIn_1.sign <= _op_out_rawIn_out_sign_T_1 @[rawFloatFromRecFN.scala 59:20]
    node _op_out_rawIn_out_sExp_T_1 = cvt(op_out_rawIn_exp_1) @[rawFloatFromRecFN.scala 60:27]
    op_out_rawIn_1.sExp <= _op_out_rawIn_out_sExp_T_1 @[rawFloatFromRecFN.scala 60:20]
    node _op_out_rawIn_out_sig_T_4 = eq(op_out_rawIn_isZero_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _op_out_rawIn_out_sig_T_5 = cat(UInt<1>("h0"), _op_out_rawIn_out_sig_T_4) @[rawFloatFromRecFN.scala 61:32]
    node _op_out_rawIn_out_sig_T_6 = bits(_op_out_WIRE[1], 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _op_out_rawIn_out_sig_T_7 = cat(_op_out_rawIn_out_sig_T_5, _op_out_rawIn_out_sig_T_6) @[rawFloatFromRecFN.scala 61:44]
    op_out_rawIn_1.sig <= _op_out_rawIn_out_sig_T_7 @[rawFloatFromRecFN.scala 61:20]
    node op_out_isSubnormal_1 = lt(op_out_rawIn_1.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _op_out_denormShiftDist_T_2 = bits(op_out_rawIn_1.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _op_out_denormShiftDist_T_3 = sub(UInt<1>("h1"), _op_out_denormShiftDist_T_2) @[fNFromRecFN.scala 52:35]
    node op_out_denormShiftDist_1 = tail(_op_out_denormShiftDist_T_3, 1) @[fNFromRecFN.scala 52:35]
    node _op_out_denormFract_T_2 = shr(op_out_rawIn_1.sig, 1) @[fNFromRecFN.scala 53:38]
    node _op_out_denormFract_T_3 = dshr(_op_out_denormFract_T_2, op_out_denormShiftDist_1) @[fNFromRecFN.scala 53:42]
    node op_out_denormFract_1 = bits(_op_out_denormFract_T_3, 22, 0) @[fNFromRecFN.scala 53:60]
    node _op_out_expOut_T_7 = bits(op_out_rawIn_1.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _op_out_expOut_T_8 = sub(_op_out_expOut_T_7, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_9 = tail(_op_out_expOut_T_8, 1) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_10 = mux(op_out_isSubnormal_1, UInt<1>("h0"), _op_out_expOut_T_9) @[fNFromRecFN.scala 56:16]
    node _op_out_expOut_T_11 = or(op_out_rawIn_1.isNaN, op_out_rawIn_1.isInf) @[fNFromRecFN.scala 60:44]
    node _op_out_expOut_T_12 = bits(_op_out_expOut_T_11, 0, 0) @[Bitwise.scala 77:15]
    node _op_out_expOut_T_13 = mux(_op_out_expOut_T_12, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node op_out_expOut_1 = or(_op_out_expOut_T_10, _op_out_expOut_T_13) @[fNFromRecFN.scala 60:15]
    node _op_out_fractOut_T_2 = bits(op_out_rawIn_1.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _op_out_fractOut_T_3 = mux(op_out_rawIn_1.isInf, UInt<1>("h0"), _op_out_fractOut_T_2) @[fNFromRecFN.scala 64:20]
    node op_out_fractOut_1 = mux(op_out_isSubnormal_1, op_out_denormFract_1, _op_out_fractOut_T_3) @[fNFromRecFN.scala 62:16]
    node op_out_hi_1 = cat(op_out_rawIn_1.sign, op_out_expOut_1) @[Cat.scala 33:92]
    node op_out_1 = cat(op_out_hi_1, op_out_fractOut_1) @[Cat.scala 33:92]
    node op_out_rawIn_exp_2 = bits(_op_out_WIRE[2], 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _op_out_rawIn_isZero_T_2 = bits(op_out_rawIn_exp_2, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node op_out_rawIn_isZero_2 = eq(_op_out_rawIn_isZero_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _op_out_rawIn_isSpecial_T_2 = bits(op_out_rawIn_exp_2, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node op_out_rawIn_isSpecial_2 = eq(_op_out_rawIn_isSpecial_T_2, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire op_out_rawIn_2 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _op_out_rawIn_out_isNaN_T_4 = bits(op_out_rawIn_exp_2, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _op_out_rawIn_out_isNaN_T_5 = and(op_out_rawIn_isSpecial_2, _op_out_rawIn_out_isNaN_T_4) @[rawFloatFromRecFN.scala 56:33]
    op_out_rawIn_2.isNaN <= _op_out_rawIn_out_isNaN_T_5 @[rawFloatFromRecFN.scala 56:20]
    node _op_out_rawIn_out_isInf_T_6 = bits(op_out_rawIn_exp_2, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _op_out_rawIn_out_isInf_T_7 = eq(_op_out_rawIn_out_isInf_T_6, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _op_out_rawIn_out_isInf_T_8 = and(op_out_rawIn_isSpecial_2, _op_out_rawIn_out_isInf_T_7) @[rawFloatFromRecFN.scala 57:33]
    op_out_rawIn_2.isInf <= _op_out_rawIn_out_isInf_T_8 @[rawFloatFromRecFN.scala 57:20]
    op_out_rawIn_2.isZero <= op_out_rawIn_isZero_2 @[rawFloatFromRecFN.scala 58:20]
    node _op_out_rawIn_out_sign_T_2 = bits(_op_out_WIRE[2], 32, 32) @[rawFloatFromRecFN.scala 59:25]
    op_out_rawIn_2.sign <= _op_out_rawIn_out_sign_T_2 @[rawFloatFromRecFN.scala 59:20]
    node _op_out_rawIn_out_sExp_T_2 = cvt(op_out_rawIn_exp_2) @[rawFloatFromRecFN.scala 60:27]
    op_out_rawIn_2.sExp <= _op_out_rawIn_out_sExp_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _op_out_rawIn_out_sig_T_8 = eq(op_out_rawIn_isZero_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _op_out_rawIn_out_sig_T_9 = cat(UInt<1>("h0"), _op_out_rawIn_out_sig_T_8) @[rawFloatFromRecFN.scala 61:32]
    node _op_out_rawIn_out_sig_T_10 = bits(_op_out_WIRE[2], 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _op_out_rawIn_out_sig_T_11 = cat(_op_out_rawIn_out_sig_T_9, _op_out_rawIn_out_sig_T_10) @[rawFloatFromRecFN.scala 61:44]
    op_out_rawIn_2.sig <= _op_out_rawIn_out_sig_T_11 @[rawFloatFromRecFN.scala 61:20]
    node op_out_isSubnormal_2 = lt(op_out_rawIn_2.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _op_out_denormShiftDist_T_4 = bits(op_out_rawIn_2.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _op_out_denormShiftDist_T_5 = sub(UInt<1>("h1"), _op_out_denormShiftDist_T_4) @[fNFromRecFN.scala 52:35]
    node op_out_denormShiftDist_2 = tail(_op_out_denormShiftDist_T_5, 1) @[fNFromRecFN.scala 52:35]
    node _op_out_denormFract_T_4 = shr(op_out_rawIn_2.sig, 1) @[fNFromRecFN.scala 53:38]
    node _op_out_denormFract_T_5 = dshr(_op_out_denormFract_T_4, op_out_denormShiftDist_2) @[fNFromRecFN.scala 53:42]
    node op_out_denormFract_2 = bits(_op_out_denormFract_T_5, 22, 0) @[fNFromRecFN.scala 53:60]
    node _op_out_expOut_T_14 = bits(op_out_rawIn_2.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _op_out_expOut_T_15 = sub(_op_out_expOut_T_14, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_16 = tail(_op_out_expOut_T_15, 1) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_17 = mux(op_out_isSubnormal_2, UInt<1>("h0"), _op_out_expOut_T_16) @[fNFromRecFN.scala 56:16]
    node _op_out_expOut_T_18 = or(op_out_rawIn_2.isNaN, op_out_rawIn_2.isInf) @[fNFromRecFN.scala 60:44]
    node _op_out_expOut_T_19 = bits(_op_out_expOut_T_18, 0, 0) @[Bitwise.scala 77:15]
    node _op_out_expOut_T_20 = mux(_op_out_expOut_T_19, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node op_out_expOut_2 = or(_op_out_expOut_T_17, _op_out_expOut_T_20) @[fNFromRecFN.scala 60:15]
    node _op_out_fractOut_T_4 = bits(op_out_rawIn_2.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _op_out_fractOut_T_5 = mux(op_out_rawIn_2.isInf, UInt<1>("h0"), _op_out_fractOut_T_4) @[fNFromRecFN.scala 64:20]
    node op_out_fractOut_2 = mux(op_out_isSubnormal_2, op_out_denormFract_2, _op_out_fractOut_T_5) @[fNFromRecFN.scala 62:16]
    node op_out_hi_2 = cat(op_out_rawIn_2.sign, op_out_expOut_2) @[Cat.scala 33:92]
    node op_out_2 = cat(op_out_hi_2, op_out_fractOut_2) @[Cat.scala 33:92]
    node op_out_rawIn_exp_3 = bits(_op_out_WIRE[3], 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _op_out_rawIn_isZero_T_3 = bits(op_out_rawIn_exp_3, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node op_out_rawIn_isZero_3 = eq(_op_out_rawIn_isZero_T_3, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _op_out_rawIn_isSpecial_T_3 = bits(op_out_rawIn_exp_3, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node op_out_rawIn_isSpecial_3 = eq(_op_out_rawIn_isSpecial_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire op_out_rawIn_3 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _op_out_rawIn_out_isNaN_T_6 = bits(op_out_rawIn_exp_3, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _op_out_rawIn_out_isNaN_T_7 = and(op_out_rawIn_isSpecial_3, _op_out_rawIn_out_isNaN_T_6) @[rawFloatFromRecFN.scala 56:33]
    op_out_rawIn_3.isNaN <= _op_out_rawIn_out_isNaN_T_7 @[rawFloatFromRecFN.scala 56:20]
    node _op_out_rawIn_out_isInf_T_9 = bits(op_out_rawIn_exp_3, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _op_out_rawIn_out_isInf_T_10 = eq(_op_out_rawIn_out_isInf_T_9, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _op_out_rawIn_out_isInf_T_11 = and(op_out_rawIn_isSpecial_3, _op_out_rawIn_out_isInf_T_10) @[rawFloatFromRecFN.scala 57:33]
    op_out_rawIn_3.isInf <= _op_out_rawIn_out_isInf_T_11 @[rawFloatFromRecFN.scala 57:20]
    op_out_rawIn_3.isZero <= op_out_rawIn_isZero_3 @[rawFloatFromRecFN.scala 58:20]
    node _op_out_rawIn_out_sign_T_3 = bits(_op_out_WIRE[3], 32, 32) @[rawFloatFromRecFN.scala 59:25]
    op_out_rawIn_3.sign <= _op_out_rawIn_out_sign_T_3 @[rawFloatFromRecFN.scala 59:20]
    node _op_out_rawIn_out_sExp_T_3 = cvt(op_out_rawIn_exp_3) @[rawFloatFromRecFN.scala 60:27]
    op_out_rawIn_3.sExp <= _op_out_rawIn_out_sExp_T_3 @[rawFloatFromRecFN.scala 60:20]
    node _op_out_rawIn_out_sig_T_12 = eq(op_out_rawIn_isZero_3, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _op_out_rawIn_out_sig_T_13 = cat(UInt<1>("h0"), _op_out_rawIn_out_sig_T_12) @[rawFloatFromRecFN.scala 61:32]
    node _op_out_rawIn_out_sig_T_14 = bits(_op_out_WIRE[3], 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _op_out_rawIn_out_sig_T_15 = cat(_op_out_rawIn_out_sig_T_13, _op_out_rawIn_out_sig_T_14) @[rawFloatFromRecFN.scala 61:44]
    op_out_rawIn_3.sig <= _op_out_rawIn_out_sig_T_15 @[rawFloatFromRecFN.scala 61:20]
    node op_out_isSubnormal_3 = lt(op_out_rawIn_3.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _op_out_denormShiftDist_T_6 = bits(op_out_rawIn_3.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _op_out_denormShiftDist_T_7 = sub(UInt<1>("h1"), _op_out_denormShiftDist_T_6) @[fNFromRecFN.scala 52:35]
    node op_out_denormShiftDist_3 = tail(_op_out_denormShiftDist_T_7, 1) @[fNFromRecFN.scala 52:35]
    node _op_out_denormFract_T_6 = shr(op_out_rawIn_3.sig, 1) @[fNFromRecFN.scala 53:38]
    node _op_out_denormFract_T_7 = dshr(_op_out_denormFract_T_6, op_out_denormShiftDist_3) @[fNFromRecFN.scala 53:42]
    node op_out_denormFract_3 = bits(_op_out_denormFract_T_7, 22, 0) @[fNFromRecFN.scala 53:60]
    node _op_out_expOut_T_21 = bits(op_out_rawIn_3.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _op_out_expOut_T_22 = sub(_op_out_expOut_T_21, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_23 = tail(_op_out_expOut_T_22, 1) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_24 = mux(op_out_isSubnormal_3, UInt<1>("h0"), _op_out_expOut_T_23) @[fNFromRecFN.scala 56:16]
    node _op_out_expOut_T_25 = or(op_out_rawIn_3.isNaN, op_out_rawIn_3.isInf) @[fNFromRecFN.scala 60:44]
    node _op_out_expOut_T_26 = bits(_op_out_expOut_T_25, 0, 0) @[Bitwise.scala 77:15]
    node _op_out_expOut_T_27 = mux(_op_out_expOut_T_26, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node op_out_expOut_3 = or(_op_out_expOut_T_24, _op_out_expOut_T_27) @[fNFromRecFN.scala 60:15]
    node _op_out_fractOut_T_6 = bits(op_out_rawIn_3.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _op_out_fractOut_T_7 = mux(op_out_rawIn_3.isInf, UInt<1>("h0"), _op_out_fractOut_T_6) @[fNFromRecFN.scala 64:20]
    node op_out_fractOut_3 = mux(op_out_isSubnormal_3, op_out_denormFract_3, _op_out_fractOut_T_7) @[fNFromRecFN.scala 62:16]
    node op_out_hi_3 = cat(op_out_rawIn_3.sign, op_out_expOut_3) @[Cat.scala 33:92]
    node op_out_3 = cat(op_out_hi_3, op_out_fractOut_3) @[Cat.scala 33:92]
    node op_out_rawIn_exp_4 = bits(_op_out_WIRE[4], 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _op_out_rawIn_isZero_T_4 = bits(op_out_rawIn_exp_4, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node op_out_rawIn_isZero_4 = eq(_op_out_rawIn_isZero_T_4, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _op_out_rawIn_isSpecial_T_4 = bits(op_out_rawIn_exp_4, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node op_out_rawIn_isSpecial_4 = eq(_op_out_rawIn_isSpecial_T_4, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire op_out_rawIn_4 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _op_out_rawIn_out_isNaN_T_8 = bits(op_out_rawIn_exp_4, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _op_out_rawIn_out_isNaN_T_9 = and(op_out_rawIn_isSpecial_4, _op_out_rawIn_out_isNaN_T_8) @[rawFloatFromRecFN.scala 56:33]
    op_out_rawIn_4.isNaN <= _op_out_rawIn_out_isNaN_T_9 @[rawFloatFromRecFN.scala 56:20]
    node _op_out_rawIn_out_isInf_T_12 = bits(op_out_rawIn_exp_4, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _op_out_rawIn_out_isInf_T_13 = eq(_op_out_rawIn_out_isInf_T_12, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _op_out_rawIn_out_isInf_T_14 = and(op_out_rawIn_isSpecial_4, _op_out_rawIn_out_isInf_T_13) @[rawFloatFromRecFN.scala 57:33]
    op_out_rawIn_4.isInf <= _op_out_rawIn_out_isInf_T_14 @[rawFloatFromRecFN.scala 57:20]
    op_out_rawIn_4.isZero <= op_out_rawIn_isZero_4 @[rawFloatFromRecFN.scala 58:20]
    node _op_out_rawIn_out_sign_T_4 = bits(_op_out_WIRE[4], 32, 32) @[rawFloatFromRecFN.scala 59:25]
    op_out_rawIn_4.sign <= _op_out_rawIn_out_sign_T_4 @[rawFloatFromRecFN.scala 59:20]
    node _op_out_rawIn_out_sExp_T_4 = cvt(op_out_rawIn_exp_4) @[rawFloatFromRecFN.scala 60:27]
    op_out_rawIn_4.sExp <= _op_out_rawIn_out_sExp_T_4 @[rawFloatFromRecFN.scala 60:20]
    node _op_out_rawIn_out_sig_T_16 = eq(op_out_rawIn_isZero_4, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _op_out_rawIn_out_sig_T_17 = cat(UInt<1>("h0"), _op_out_rawIn_out_sig_T_16) @[rawFloatFromRecFN.scala 61:32]
    node _op_out_rawIn_out_sig_T_18 = bits(_op_out_WIRE[4], 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _op_out_rawIn_out_sig_T_19 = cat(_op_out_rawIn_out_sig_T_17, _op_out_rawIn_out_sig_T_18) @[rawFloatFromRecFN.scala 61:44]
    op_out_rawIn_4.sig <= _op_out_rawIn_out_sig_T_19 @[rawFloatFromRecFN.scala 61:20]
    node op_out_isSubnormal_4 = lt(op_out_rawIn_4.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 51:38]
    node _op_out_denormShiftDist_T_8 = bits(op_out_rawIn_4.sExp, 4, 0) @[fNFromRecFN.scala 52:47]
    node _op_out_denormShiftDist_T_9 = sub(UInt<1>("h1"), _op_out_denormShiftDist_T_8) @[fNFromRecFN.scala 52:35]
    node op_out_denormShiftDist_4 = tail(_op_out_denormShiftDist_T_9, 1) @[fNFromRecFN.scala 52:35]
    node _op_out_denormFract_T_8 = shr(op_out_rawIn_4.sig, 1) @[fNFromRecFN.scala 53:38]
    node _op_out_denormFract_T_9 = dshr(_op_out_denormFract_T_8, op_out_denormShiftDist_4) @[fNFromRecFN.scala 53:42]
    node op_out_denormFract_4 = bits(_op_out_denormFract_T_9, 22, 0) @[fNFromRecFN.scala 53:60]
    node _op_out_expOut_T_28 = bits(op_out_rawIn_4.sExp, 7, 0) @[fNFromRecFN.scala 58:27]
    node _op_out_expOut_T_29 = sub(_op_out_expOut_T_28, UInt<8>("h81")) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_30 = tail(_op_out_expOut_T_29, 1) @[fNFromRecFN.scala 58:45]
    node _op_out_expOut_T_31 = mux(op_out_isSubnormal_4, UInt<1>("h0"), _op_out_expOut_T_30) @[fNFromRecFN.scala 56:16]
    node _op_out_expOut_T_32 = or(op_out_rawIn_4.isNaN, op_out_rawIn_4.isInf) @[fNFromRecFN.scala 60:44]
    node _op_out_expOut_T_33 = bits(_op_out_expOut_T_32, 0, 0) @[Bitwise.scala 77:15]
    node _op_out_expOut_T_34 = mux(_op_out_expOut_T_33, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node op_out_expOut_4 = or(_op_out_expOut_T_31, _op_out_expOut_T_34) @[fNFromRecFN.scala 60:15]
    node _op_out_fractOut_T_8 = bits(op_out_rawIn_4.sig, 22, 0) @[fNFromRecFN.scala 64:48]
    node _op_out_fractOut_T_9 = mux(op_out_rawIn_4.isInf, UInt<1>("h0"), _op_out_fractOut_T_8) @[fNFromRecFN.scala 64:20]
    node op_out_fractOut_4 = mux(op_out_isSubnormal_4, op_out_denormFract_4, _op_out_fractOut_T_9) @[fNFromRecFN.scala 62:16]
    node op_out_hi_4 = cat(op_out_rawIn_4.sign, op_out_expOut_4) @[Cat.scala 33:92]
    node op_out_4 = cat(op_out_hi_4, op_out_fractOut_4) @[Cat.scala 33:92]
    node rawIn_sign = bits(io.in[2], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn = bits(io.in[2], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn = bits(io.in[2], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn = eq(rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn = eq(rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T = bits(rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_1 = bits(rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_2 = bits(rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_3 = bits(rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_4 = bits(rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_5 = bits(rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_6 = bits(rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_7 = bits(rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_8 = bits(rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_9 = bits(rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_10 = bits(rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_11 = bits(rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_12 = bits(rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_13 = bits(rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_14 = bits(rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_15 = bits(rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_16 = bits(rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_17 = bits(rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_18 = bits(rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_19 = bits(rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_20 = bits(rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_21 = bits(rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_22 = bits(rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_23 = mux(_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_24 = mux(_rawIn_normDist_T_2, UInt<5>("h14"), _rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _rawIn_normDist_T_25 = mux(_rawIn_normDist_T_3, UInt<5>("h13"), _rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _rawIn_normDist_T_26 = mux(_rawIn_normDist_T_4, UInt<5>("h12"), _rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _rawIn_normDist_T_27 = mux(_rawIn_normDist_T_5, UInt<5>("h11"), _rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _rawIn_normDist_T_28 = mux(_rawIn_normDist_T_6, UInt<5>("h10"), _rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _rawIn_normDist_T_29 = mux(_rawIn_normDist_T_7, UInt<4>("hf"), _rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _rawIn_normDist_T_30 = mux(_rawIn_normDist_T_8, UInt<4>("he"), _rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _rawIn_normDist_T_31 = mux(_rawIn_normDist_T_9, UInt<4>("hd"), _rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _rawIn_normDist_T_32 = mux(_rawIn_normDist_T_10, UInt<4>("hc"), _rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _rawIn_normDist_T_33 = mux(_rawIn_normDist_T_11, UInt<4>("hb"), _rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _rawIn_normDist_T_34 = mux(_rawIn_normDist_T_12, UInt<4>("ha"), _rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _rawIn_normDist_T_35 = mux(_rawIn_normDist_T_13, UInt<4>("h9"), _rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _rawIn_normDist_T_36 = mux(_rawIn_normDist_T_14, UInt<4>("h8"), _rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _rawIn_normDist_T_37 = mux(_rawIn_normDist_T_15, UInt<3>("h7"), _rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _rawIn_normDist_T_38 = mux(_rawIn_normDist_T_16, UInt<3>("h6"), _rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _rawIn_normDist_T_39 = mux(_rawIn_normDist_T_17, UInt<3>("h5"), _rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _rawIn_normDist_T_40 = mux(_rawIn_normDist_T_18, UInt<3>("h4"), _rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _rawIn_normDist_T_41 = mux(_rawIn_normDist_T_19, UInt<2>("h3"), _rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _rawIn_normDist_T_42 = mux(_rawIn_normDist_T_20, UInt<2>("h2"), _rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _rawIn_normDist_T_43 = mux(_rawIn_normDist_T_21, UInt<1>("h1"), _rawIn_normDist_T_42) @[Mux.scala 47:70]
    node rawIn_normDist = mux(_rawIn_normDist_T_22, UInt<1>("h0"), _rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T = dshl(rawIn_fractIn, rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_1 = bits(_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract = shl(_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T = xor(rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_1 = mux(rawIn_isZeroExpIn, _rawIn_adjustedExp_T, rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_2 = mux(rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_4 = add(_rawIn_adjustedExp_T_1, _rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp = tail(_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero = and(rawIn_isZeroExpIn, rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T = bits(rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial = eq(_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T = eq(rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_1 = and(rawIn_isSpecial, _rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    rawIn.isNaN <= _rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T = and(rawIn_isSpecial, rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    rawIn.isInf <= _rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    rawIn.isZero <= rawIn_isZero @[rawFloatFromFN.scala 66:16]
    rawIn.sign <= rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T = bits(rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_1 = cvt(_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    rawIn.sExp <= _rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T = eq(rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_2 = mux(rawIn_isZeroExpIn, rawIn_subnormFract, rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_3 = cat(_rawIn_out_sig_T_1, _rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    rawIn.sig <= _rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _T = bits(rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_1 = mux(rawIn.isZero, UInt<3>("h0"), _T) @[recFNFromFN.scala 48:15]
    node _T_2 = mux(rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_3 = or(_T_1, _T_2) @[recFNFromFN.scala 48:76]
    node _T_4 = cat(rawIn.sign, _T_3) @[recFNFromFN.scala 47:20]
    node _T_5 = bits(rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_6 = cat(_T_4, _T_5) @[recFNFromFN.scala 49:45]
    node _T_7 = bits(rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_8 = cat(_T_6, _T_7) @[recFNFromFN.scala 50:41]
    MulAddRecFN_e8_s24.io.c <= _T_8 @[FPU.scala 61:10]
    node _T_9 = eq(UInt<2>("h2"), io.aluOp) @[Mux.scala 81:61]
    node _T_10 = mux(_T_9, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _T_11 = eq(UInt<2>("h3"), io.aluOp) @[Mux.scala 81:61]
    node _T_12 = mux(_T_11, UInt<2>("h2"), _T_10) @[Mux.scala 81:58]
    node _T_13 = eq(UInt<3>("h4"), io.aluOp) @[Mux.scala 81:61]
    node _T_14 = mux(_T_13, UInt<2>("h3"), _T_12) @[Mux.scala 81:58]
    MulAddRecFN_e8_s24.io.op <= _T_14 @[FPU.scala 62:11]
    node _T_15 = eq(io.aluOp, UInt<3>("h6")) @[FPU.scala 65:25]
    AddRecFN.io.subOp <= _T_15 @[FPU.scala 65:13]
    DivSqrtRecFM_small_e8_s24.io.inValid <= io.div_sqrt_valid @[FPU.scala 66:15]
    node _T_16 = eq(io.aluOp, UInt<4>("h9")) @[FPU.scala 67:26]
    DivSqrtRecFM_small_e8_s24.io.sqrtOp <= _T_16 @[FPU.scala 67:14]
    node _T_17 = eq(io.aluOp, UInt<5>("h13")) @[FPU.scala 68:44]
    node _T_18 = eq(io.aluOp, UInt<5>("h14")) @[FPU.scala 68:44]
    node _T_19 = or(_T_17, _T_18) @[FPU.scala 68:63]
    CompareRecFN.io.signaling <= _T_19 @[FPU.scala 68:17]
    node rawIn_sign_1 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_1 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_1 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_1 = eq(rawIn_expIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_1 = eq(rawIn_fractIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_44 = bits(rawIn_fractIn_1, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_45 = bits(rawIn_fractIn_1, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_46 = bits(rawIn_fractIn_1, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_47 = bits(rawIn_fractIn_1, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_48 = bits(rawIn_fractIn_1, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_49 = bits(rawIn_fractIn_1, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_50 = bits(rawIn_fractIn_1, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_51 = bits(rawIn_fractIn_1, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_52 = bits(rawIn_fractIn_1, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_53 = bits(rawIn_fractIn_1, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_54 = bits(rawIn_fractIn_1, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_55 = bits(rawIn_fractIn_1, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_56 = bits(rawIn_fractIn_1, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_57 = bits(rawIn_fractIn_1, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_58 = bits(rawIn_fractIn_1, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_59 = bits(rawIn_fractIn_1, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_60 = bits(rawIn_fractIn_1, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_61 = bits(rawIn_fractIn_1, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_62 = bits(rawIn_fractIn_1, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_63 = bits(rawIn_fractIn_1, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_64 = bits(rawIn_fractIn_1, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_65 = bits(rawIn_fractIn_1, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_66 = bits(rawIn_fractIn_1, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_67 = mux(_rawIn_normDist_T_45, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_68 = mux(_rawIn_normDist_T_46, UInt<5>("h14"), _rawIn_normDist_T_67) @[Mux.scala 47:70]
    node _rawIn_normDist_T_69 = mux(_rawIn_normDist_T_47, UInt<5>("h13"), _rawIn_normDist_T_68) @[Mux.scala 47:70]
    node _rawIn_normDist_T_70 = mux(_rawIn_normDist_T_48, UInt<5>("h12"), _rawIn_normDist_T_69) @[Mux.scala 47:70]
    node _rawIn_normDist_T_71 = mux(_rawIn_normDist_T_49, UInt<5>("h11"), _rawIn_normDist_T_70) @[Mux.scala 47:70]
    node _rawIn_normDist_T_72 = mux(_rawIn_normDist_T_50, UInt<5>("h10"), _rawIn_normDist_T_71) @[Mux.scala 47:70]
    node _rawIn_normDist_T_73 = mux(_rawIn_normDist_T_51, UInt<4>("hf"), _rawIn_normDist_T_72) @[Mux.scala 47:70]
    node _rawIn_normDist_T_74 = mux(_rawIn_normDist_T_52, UInt<4>("he"), _rawIn_normDist_T_73) @[Mux.scala 47:70]
    node _rawIn_normDist_T_75 = mux(_rawIn_normDist_T_53, UInt<4>("hd"), _rawIn_normDist_T_74) @[Mux.scala 47:70]
    node _rawIn_normDist_T_76 = mux(_rawIn_normDist_T_54, UInt<4>("hc"), _rawIn_normDist_T_75) @[Mux.scala 47:70]
    node _rawIn_normDist_T_77 = mux(_rawIn_normDist_T_55, UInt<4>("hb"), _rawIn_normDist_T_76) @[Mux.scala 47:70]
    node _rawIn_normDist_T_78 = mux(_rawIn_normDist_T_56, UInt<4>("ha"), _rawIn_normDist_T_77) @[Mux.scala 47:70]
    node _rawIn_normDist_T_79 = mux(_rawIn_normDist_T_57, UInt<4>("h9"), _rawIn_normDist_T_78) @[Mux.scala 47:70]
    node _rawIn_normDist_T_80 = mux(_rawIn_normDist_T_58, UInt<4>("h8"), _rawIn_normDist_T_79) @[Mux.scala 47:70]
    node _rawIn_normDist_T_81 = mux(_rawIn_normDist_T_59, UInt<3>("h7"), _rawIn_normDist_T_80) @[Mux.scala 47:70]
    node _rawIn_normDist_T_82 = mux(_rawIn_normDist_T_60, UInt<3>("h6"), _rawIn_normDist_T_81) @[Mux.scala 47:70]
    node _rawIn_normDist_T_83 = mux(_rawIn_normDist_T_61, UInt<3>("h5"), _rawIn_normDist_T_82) @[Mux.scala 47:70]
    node _rawIn_normDist_T_84 = mux(_rawIn_normDist_T_62, UInt<3>("h4"), _rawIn_normDist_T_83) @[Mux.scala 47:70]
    node _rawIn_normDist_T_85 = mux(_rawIn_normDist_T_63, UInt<2>("h3"), _rawIn_normDist_T_84) @[Mux.scala 47:70]
    node _rawIn_normDist_T_86 = mux(_rawIn_normDist_T_64, UInt<2>("h2"), _rawIn_normDist_T_85) @[Mux.scala 47:70]
    node _rawIn_normDist_T_87 = mux(_rawIn_normDist_T_65, UInt<1>("h1"), _rawIn_normDist_T_86) @[Mux.scala 47:70]
    node rawIn_normDist_1 = mux(_rawIn_normDist_T_66, UInt<1>("h0"), _rawIn_normDist_T_87) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_2 = dshl(rawIn_fractIn_1, rawIn_normDist_1) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_3 = bits(_rawIn_subnormFract_T_2, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_1 = shl(_rawIn_subnormFract_T_3, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_5 = xor(rawIn_normDist_1, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_6 = mux(rawIn_isZeroExpIn_1, _rawIn_adjustedExp_T_5, rawIn_expIn_1) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_7 = mux(rawIn_isZeroExpIn_1, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_8 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_7) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_9 = add(_rawIn_adjustedExp_T_6, _rawIn_adjustedExp_T_8) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_1 = tail(_rawIn_adjustedExp_T_9, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_1 = and(rawIn_isZeroExpIn_1, rawIn_isZeroFractIn_1) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_1 = bits(rawIn_adjustedExp_1, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_1 = eq(_rawIn_isSpecial_T_1, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_1 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_2 = eq(rawIn_isZeroFractIn_1, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_3 = and(rawIn_isSpecial_1, _rawIn_out_isNaN_T_2) @[rawFloatFromFN.scala 64:28]
    rawIn_1.isNaN <= _rawIn_out_isNaN_T_3 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_1 = and(rawIn_isSpecial_1, rawIn_isZeroFractIn_1) @[rawFloatFromFN.scala 65:28]
    rawIn_1.isInf <= _rawIn_out_isInf_T_1 @[rawFloatFromFN.scala 65:15]
    rawIn_1.isZero <= rawIn_isZero_1 @[rawFloatFromFN.scala 66:16]
    rawIn_1.sign <= rawIn_sign_1 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_2 = bits(rawIn_adjustedExp_1, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_3 = cvt(_rawIn_out_sExp_T_2) @[rawFloatFromFN.scala 68:42]
    rawIn_1.sExp <= _rawIn_out_sExp_T_3 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_4 = eq(rawIn_isZero_1, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_5 = cat(UInt<1>("h0"), _rawIn_out_sig_T_4) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_6 = mux(rawIn_isZeroExpIn_1, rawIn_subnormFract_1, rawIn_fractIn_1) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_7 = cat(_rawIn_out_sig_T_5, _rawIn_out_sig_T_6) @[rawFloatFromFN.scala 70:27]
    rawIn_1.sig <= _rawIn_out_sig_T_7 @[rawFloatFromFN.scala 69:13]
    node _T_20 = bits(rawIn_1.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_21 = mux(rawIn_1.isZero, UInt<3>("h0"), _T_20) @[recFNFromFN.scala 48:15]
    node _T_22 = mux(rawIn_1.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_23 = or(_T_21, _T_22) @[recFNFromFN.scala 48:76]
    node _T_24 = cat(rawIn_1.sign, _T_23) @[recFNFromFN.scala 47:20]
    node _T_25 = bits(rawIn_1.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_26 = cat(_T_24, _T_25) @[recFNFromFN.scala 49:45]
    node _T_27 = bits(rawIn_1.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_28 = cat(_T_26, _T_27) @[recFNFromFN.scala 50:41]
    RecFNToIN_e8_s24_i32.io.in <= _T_28 @[FPU.scala 69:13]
    node _T_29 = eq(io.aluOp, UInt<4>("hf")) @[FPU.scala 70:32]
    RecFNToIN_e8_s24_i32.io.signedOut <= _T_29 @[FPU.scala 70:20]
    node _T_30 = eq(io.aluOp, UInt<5>("h16")) @[FPU.scala 71:31]
    INToRecFN_i32_e8_s24.io.signedIn <= _T_30 @[FPU.scala 71:19]
    INToRecFN_i32_e8_s24.io.in <= io.in[0] @[FPU.scala 72:13]
    node _io_div_sqrt_valid_out_T = or(DivSqrtRecFM_small_e8_s24.io.outValid_div, DivSqrtRecFM_small_e8_s24.io.outValid_sqrt) @[FPU.scala 73:45]
    io.div_sqrt_valid_out <= _io_div_sqrt_valid_out_T @[FPU.scala 73:25]
    node rawIn_sign_2 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_2 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_2 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_2 = eq(rawIn_expIn_2, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_2 = eq(rawIn_fractIn_2, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_88 = bits(rawIn_fractIn_2, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_89 = bits(rawIn_fractIn_2, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_90 = bits(rawIn_fractIn_2, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_91 = bits(rawIn_fractIn_2, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_92 = bits(rawIn_fractIn_2, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_93 = bits(rawIn_fractIn_2, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_94 = bits(rawIn_fractIn_2, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_95 = bits(rawIn_fractIn_2, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_96 = bits(rawIn_fractIn_2, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_97 = bits(rawIn_fractIn_2, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_98 = bits(rawIn_fractIn_2, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_99 = bits(rawIn_fractIn_2, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_100 = bits(rawIn_fractIn_2, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_101 = bits(rawIn_fractIn_2, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_102 = bits(rawIn_fractIn_2, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_103 = bits(rawIn_fractIn_2, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_104 = bits(rawIn_fractIn_2, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_105 = bits(rawIn_fractIn_2, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_106 = bits(rawIn_fractIn_2, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_107 = bits(rawIn_fractIn_2, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_108 = bits(rawIn_fractIn_2, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_109 = bits(rawIn_fractIn_2, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_110 = bits(rawIn_fractIn_2, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_111 = mux(_rawIn_normDist_T_89, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_112 = mux(_rawIn_normDist_T_90, UInt<5>("h14"), _rawIn_normDist_T_111) @[Mux.scala 47:70]
    node _rawIn_normDist_T_113 = mux(_rawIn_normDist_T_91, UInt<5>("h13"), _rawIn_normDist_T_112) @[Mux.scala 47:70]
    node _rawIn_normDist_T_114 = mux(_rawIn_normDist_T_92, UInt<5>("h12"), _rawIn_normDist_T_113) @[Mux.scala 47:70]
    node _rawIn_normDist_T_115 = mux(_rawIn_normDist_T_93, UInt<5>("h11"), _rawIn_normDist_T_114) @[Mux.scala 47:70]
    node _rawIn_normDist_T_116 = mux(_rawIn_normDist_T_94, UInt<5>("h10"), _rawIn_normDist_T_115) @[Mux.scala 47:70]
    node _rawIn_normDist_T_117 = mux(_rawIn_normDist_T_95, UInt<4>("hf"), _rawIn_normDist_T_116) @[Mux.scala 47:70]
    node _rawIn_normDist_T_118 = mux(_rawIn_normDist_T_96, UInt<4>("he"), _rawIn_normDist_T_117) @[Mux.scala 47:70]
    node _rawIn_normDist_T_119 = mux(_rawIn_normDist_T_97, UInt<4>("hd"), _rawIn_normDist_T_118) @[Mux.scala 47:70]
    node _rawIn_normDist_T_120 = mux(_rawIn_normDist_T_98, UInt<4>("hc"), _rawIn_normDist_T_119) @[Mux.scala 47:70]
    node _rawIn_normDist_T_121 = mux(_rawIn_normDist_T_99, UInt<4>("hb"), _rawIn_normDist_T_120) @[Mux.scala 47:70]
    node _rawIn_normDist_T_122 = mux(_rawIn_normDist_T_100, UInt<4>("ha"), _rawIn_normDist_T_121) @[Mux.scala 47:70]
    node _rawIn_normDist_T_123 = mux(_rawIn_normDist_T_101, UInt<4>("h9"), _rawIn_normDist_T_122) @[Mux.scala 47:70]
    node _rawIn_normDist_T_124 = mux(_rawIn_normDist_T_102, UInt<4>("h8"), _rawIn_normDist_T_123) @[Mux.scala 47:70]
    node _rawIn_normDist_T_125 = mux(_rawIn_normDist_T_103, UInt<3>("h7"), _rawIn_normDist_T_124) @[Mux.scala 47:70]
    node _rawIn_normDist_T_126 = mux(_rawIn_normDist_T_104, UInt<3>("h6"), _rawIn_normDist_T_125) @[Mux.scala 47:70]
    node _rawIn_normDist_T_127 = mux(_rawIn_normDist_T_105, UInt<3>("h5"), _rawIn_normDist_T_126) @[Mux.scala 47:70]
    node _rawIn_normDist_T_128 = mux(_rawIn_normDist_T_106, UInt<3>("h4"), _rawIn_normDist_T_127) @[Mux.scala 47:70]
    node _rawIn_normDist_T_129 = mux(_rawIn_normDist_T_107, UInt<2>("h3"), _rawIn_normDist_T_128) @[Mux.scala 47:70]
    node _rawIn_normDist_T_130 = mux(_rawIn_normDist_T_108, UInt<2>("h2"), _rawIn_normDist_T_129) @[Mux.scala 47:70]
    node _rawIn_normDist_T_131 = mux(_rawIn_normDist_T_109, UInt<1>("h1"), _rawIn_normDist_T_130) @[Mux.scala 47:70]
    node rawIn_normDist_2 = mux(_rawIn_normDist_T_110, UInt<1>("h0"), _rawIn_normDist_T_131) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_4 = dshl(rawIn_fractIn_2, rawIn_normDist_2) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_5 = bits(_rawIn_subnormFract_T_4, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_2 = shl(_rawIn_subnormFract_T_5, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_10 = xor(rawIn_normDist_2, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_11 = mux(rawIn_isZeroExpIn_2, _rawIn_adjustedExp_T_10, rawIn_expIn_2) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_12 = mux(rawIn_isZeroExpIn_2, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_13 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_12) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_14 = add(_rawIn_adjustedExp_T_11, _rawIn_adjustedExp_T_13) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_2 = tail(_rawIn_adjustedExp_T_14, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_2 = and(rawIn_isZeroExpIn_2, rawIn_isZeroFractIn_2) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_2 = bits(rawIn_adjustedExp_2, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_2 = eq(_rawIn_isSpecial_T_2, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_2 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_4 = eq(rawIn_isZeroFractIn_2, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_5 = and(rawIn_isSpecial_2, _rawIn_out_isNaN_T_4) @[rawFloatFromFN.scala 64:28]
    rawIn_2.isNaN <= _rawIn_out_isNaN_T_5 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_2 = and(rawIn_isSpecial_2, rawIn_isZeroFractIn_2) @[rawFloatFromFN.scala 65:28]
    rawIn_2.isInf <= _rawIn_out_isInf_T_2 @[rawFloatFromFN.scala 65:15]
    rawIn_2.isZero <= rawIn_isZero_2 @[rawFloatFromFN.scala 66:16]
    rawIn_2.sign <= rawIn_sign_2 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_4 = bits(rawIn_adjustedExp_2, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_5 = cvt(_rawIn_out_sExp_T_4) @[rawFloatFromFN.scala 68:42]
    rawIn_2.sExp <= _rawIn_out_sExp_T_5 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_8 = eq(rawIn_isZero_2, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_9 = cat(UInt<1>("h0"), _rawIn_out_sig_T_8) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_10 = mux(rawIn_isZeroExpIn_2, rawIn_subnormFract_2, rawIn_fractIn_2) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_11 = cat(_rawIn_out_sig_T_9, _rawIn_out_sig_T_10) @[rawFloatFromFN.scala 70:27]
    rawIn_2.sig <= _rawIn_out_sig_T_11 @[rawFloatFromFN.scala 69:13]
    node _T_31 = bits(rawIn_2.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_32 = mux(rawIn_2.isZero, UInt<3>("h0"), _T_31) @[recFNFromFN.scala 48:15]
    node _T_33 = mux(rawIn_2.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_34 = or(_T_32, _T_33) @[recFNFromFN.scala 48:76]
    node _T_35 = cat(rawIn_2.sign, _T_34) @[recFNFromFN.scala 47:20]
    node _T_36 = bits(rawIn_2.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_37 = cat(_T_35, _T_36) @[recFNFromFN.scala 49:45]
    node _T_38 = bits(rawIn_2.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_39 = cat(_T_37, _T_38) @[recFNFromFN.scala 50:41]
    MulAddRecFN_e8_s24.io.a <= _T_39 @[FPU.scala 82:15]
    node rawIn_sign_3 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_3 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_3 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_3 = eq(rawIn_expIn_3, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_3 = eq(rawIn_fractIn_3, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_132 = bits(rawIn_fractIn_3, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_133 = bits(rawIn_fractIn_3, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_134 = bits(rawIn_fractIn_3, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_135 = bits(rawIn_fractIn_3, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_136 = bits(rawIn_fractIn_3, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_137 = bits(rawIn_fractIn_3, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_138 = bits(rawIn_fractIn_3, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_139 = bits(rawIn_fractIn_3, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_140 = bits(rawIn_fractIn_3, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_141 = bits(rawIn_fractIn_3, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_142 = bits(rawIn_fractIn_3, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_143 = bits(rawIn_fractIn_3, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_144 = bits(rawIn_fractIn_3, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_145 = bits(rawIn_fractIn_3, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_146 = bits(rawIn_fractIn_3, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_147 = bits(rawIn_fractIn_3, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_148 = bits(rawIn_fractIn_3, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_149 = bits(rawIn_fractIn_3, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_150 = bits(rawIn_fractIn_3, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_151 = bits(rawIn_fractIn_3, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_152 = bits(rawIn_fractIn_3, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_153 = bits(rawIn_fractIn_3, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_154 = bits(rawIn_fractIn_3, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_155 = mux(_rawIn_normDist_T_133, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_156 = mux(_rawIn_normDist_T_134, UInt<5>("h14"), _rawIn_normDist_T_155) @[Mux.scala 47:70]
    node _rawIn_normDist_T_157 = mux(_rawIn_normDist_T_135, UInt<5>("h13"), _rawIn_normDist_T_156) @[Mux.scala 47:70]
    node _rawIn_normDist_T_158 = mux(_rawIn_normDist_T_136, UInt<5>("h12"), _rawIn_normDist_T_157) @[Mux.scala 47:70]
    node _rawIn_normDist_T_159 = mux(_rawIn_normDist_T_137, UInt<5>("h11"), _rawIn_normDist_T_158) @[Mux.scala 47:70]
    node _rawIn_normDist_T_160 = mux(_rawIn_normDist_T_138, UInt<5>("h10"), _rawIn_normDist_T_159) @[Mux.scala 47:70]
    node _rawIn_normDist_T_161 = mux(_rawIn_normDist_T_139, UInt<4>("hf"), _rawIn_normDist_T_160) @[Mux.scala 47:70]
    node _rawIn_normDist_T_162 = mux(_rawIn_normDist_T_140, UInt<4>("he"), _rawIn_normDist_T_161) @[Mux.scala 47:70]
    node _rawIn_normDist_T_163 = mux(_rawIn_normDist_T_141, UInt<4>("hd"), _rawIn_normDist_T_162) @[Mux.scala 47:70]
    node _rawIn_normDist_T_164 = mux(_rawIn_normDist_T_142, UInt<4>("hc"), _rawIn_normDist_T_163) @[Mux.scala 47:70]
    node _rawIn_normDist_T_165 = mux(_rawIn_normDist_T_143, UInt<4>("hb"), _rawIn_normDist_T_164) @[Mux.scala 47:70]
    node _rawIn_normDist_T_166 = mux(_rawIn_normDist_T_144, UInt<4>("ha"), _rawIn_normDist_T_165) @[Mux.scala 47:70]
    node _rawIn_normDist_T_167 = mux(_rawIn_normDist_T_145, UInt<4>("h9"), _rawIn_normDist_T_166) @[Mux.scala 47:70]
    node _rawIn_normDist_T_168 = mux(_rawIn_normDist_T_146, UInt<4>("h8"), _rawIn_normDist_T_167) @[Mux.scala 47:70]
    node _rawIn_normDist_T_169 = mux(_rawIn_normDist_T_147, UInt<3>("h7"), _rawIn_normDist_T_168) @[Mux.scala 47:70]
    node _rawIn_normDist_T_170 = mux(_rawIn_normDist_T_148, UInt<3>("h6"), _rawIn_normDist_T_169) @[Mux.scala 47:70]
    node _rawIn_normDist_T_171 = mux(_rawIn_normDist_T_149, UInt<3>("h5"), _rawIn_normDist_T_170) @[Mux.scala 47:70]
    node _rawIn_normDist_T_172 = mux(_rawIn_normDist_T_150, UInt<3>("h4"), _rawIn_normDist_T_171) @[Mux.scala 47:70]
    node _rawIn_normDist_T_173 = mux(_rawIn_normDist_T_151, UInt<2>("h3"), _rawIn_normDist_T_172) @[Mux.scala 47:70]
    node _rawIn_normDist_T_174 = mux(_rawIn_normDist_T_152, UInt<2>("h2"), _rawIn_normDist_T_173) @[Mux.scala 47:70]
    node _rawIn_normDist_T_175 = mux(_rawIn_normDist_T_153, UInt<1>("h1"), _rawIn_normDist_T_174) @[Mux.scala 47:70]
    node rawIn_normDist_3 = mux(_rawIn_normDist_T_154, UInt<1>("h0"), _rawIn_normDist_T_175) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_6 = dshl(rawIn_fractIn_3, rawIn_normDist_3) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_7 = bits(_rawIn_subnormFract_T_6, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_3 = shl(_rawIn_subnormFract_T_7, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_15 = xor(rawIn_normDist_3, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_16 = mux(rawIn_isZeroExpIn_3, _rawIn_adjustedExp_T_15, rawIn_expIn_3) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_17 = mux(rawIn_isZeroExpIn_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_18 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_17) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_19 = add(_rawIn_adjustedExp_T_16, _rawIn_adjustedExp_T_18) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_3 = tail(_rawIn_adjustedExp_T_19, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_3 = and(rawIn_isZeroExpIn_3, rawIn_isZeroFractIn_3) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_3 = bits(rawIn_adjustedExp_3, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_3 = eq(_rawIn_isSpecial_T_3, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_3 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_6 = eq(rawIn_isZeroFractIn_3, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_7 = and(rawIn_isSpecial_3, _rawIn_out_isNaN_T_6) @[rawFloatFromFN.scala 64:28]
    rawIn_3.isNaN <= _rawIn_out_isNaN_T_7 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_3 = and(rawIn_isSpecial_3, rawIn_isZeroFractIn_3) @[rawFloatFromFN.scala 65:28]
    rawIn_3.isInf <= _rawIn_out_isInf_T_3 @[rawFloatFromFN.scala 65:15]
    rawIn_3.isZero <= rawIn_isZero_3 @[rawFloatFromFN.scala 66:16]
    rawIn_3.sign <= rawIn_sign_3 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_6 = bits(rawIn_adjustedExp_3, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_7 = cvt(_rawIn_out_sExp_T_6) @[rawFloatFromFN.scala 68:42]
    rawIn_3.sExp <= _rawIn_out_sExp_T_7 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_12 = eq(rawIn_isZero_3, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_13 = cat(UInt<1>("h0"), _rawIn_out_sig_T_12) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_14 = mux(rawIn_isZeroExpIn_3, rawIn_subnormFract_3, rawIn_fractIn_3) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_15 = cat(_rawIn_out_sig_T_13, _rawIn_out_sig_T_14) @[rawFloatFromFN.scala 70:27]
    rawIn_3.sig <= _rawIn_out_sig_T_15 @[rawFloatFromFN.scala 69:13]
    node _T_40 = bits(rawIn_3.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_41 = mux(rawIn_3.isZero, UInt<3>("h0"), _T_40) @[recFNFromFN.scala 48:15]
    node _T_42 = mux(rawIn_3.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_43 = or(_T_41, _T_42) @[recFNFromFN.scala 48:76]
    node _T_44 = cat(rawIn_3.sign, _T_43) @[recFNFromFN.scala 47:20]
    node _T_45 = bits(rawIn_3.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_46 = cat(_T_44, _T_45) @[recFNFromFN.scala 49:45]
    node _T_47 = bits(rawIn_3.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_48 = cat(_T_46, _T_47) @[recFNFromFN.scala 50:41]
    MulAddRecFN_e8_s24.io.b <= _T_48 @[FPU.scala 82:15]
    node rawIn_sign_4 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_4 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_4 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_4 = eq(rawIn_expIn_4, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_4 = eq(rawIn_fractIn_4, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_176 = bits(rawIn_fractIn_4, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_177 = bits(rawIn_fractIn_4, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_178 = bits(rawIn_fractIn_4, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_179 = bits(rawIn_fractIn_4, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_180 = bits(rawIn_fractIn_4, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_181 = bits(rawIn_fractIn_4, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_182 = bits(rawIn_fractIn_4, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_183 = bits(rawIn_fractIn_4, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_184 = bits(rawIn_fractIn_4, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_185 = bits(rawIn_fractIn_4, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_186 = bits(rawIn_fractIn_4, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_187 = bits(rawIn_fractIn_4, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_188 = bits(rawIn_fractIn_4, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_189 = bits(rawIn_fractIn_4, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_190 = bits(rawIn_fractIn_4, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_191 = bits(rawIn_fractIn_4, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_192 = bits(rawIn_fractIn_4, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_193 = bits(rawIn_fractIn_4, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_194 = bits(rawIn_fractIn_4, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_195 = bits(rawIn_fractIn_4, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_196 = bits(rawIn_fractIn_4, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_197 = bits(rawIn_fractIn_4, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_198 = bits(rawIn_fractIn_4, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_199 = mux(_rawIn_normDist_T_177, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_200 = mux(_rawIn_normDist_T_178, UInt<5>("h14"), _rawIn_normDist_T_199) @[Mux.scala 47:70]
    node _rawIn_normDist_T_201 = mux(_rawIn_normDist_T_179, UInt<5>("h13"), _rawIn_normDist_T_200) @[Mux.scala 47:70]
    node _rawIn_normDist_T_202 = mux(_rawIn_normDist_T_180, UInt<5>("h12"), _rawIn_normDist_T_201) @[Mux.scala 47:70]
    node _rawIn_normDist_T_203 = mux(_rawIn_normDist_T_181, UInt<5>("h11"), _rawIn_normDist_T_202) @[Mux.scala 47:70]
    node _rawIn_normDist_T_204 = mux(_rawIn_normDist_T_182, UInt<5>("h10"), _rawIn_normDist_T_203) @[Mux.scala 47:70]
    node _rawIn_normDist_T_205 = mux(_rawIn_normDist_T_183, UInt<4>("hf"), _rawIn_normDist_T_204) @[Mux.scala 47:70]
    node _rawIn_normDist_T_206 = mux(_rawIn_normDist_T_184, UInt<4>("he"), _rawIn_normDist_T_205) @[Mux.scala 47:70]
    node _rawIn_normDist_T_207 = mux(_rawIn_normDist_T_185, UInt<4>("hd"), _rawIn_normDist_T_206) @[Mux.scala 47:70]
    node _rawIn_normDist_T_208 = mux(_rawIn_normDist_T_186, UInt<4>("hc"), _rawIn_normDist_T_207) @[Mux.scala 47:70]
    node _rawIn_normDist_T_209 = mux(_rawIn_normDist_T_187, UInt<4>("hb"), _rawIn_normDist_T_208) @[Mux.scala 47:70]
    node _rawIn_normDist_T_210 = mux(_rawIn_normDist_T_188, UInt<4>("ha"), _rawIn_normDist_T_209) @[Mux.scala 47:70]
    node _rawIn_normDist_T_211 = mux(_rawIn_normDist_T_189, UInt<4>("h9"), _rawIn_normDist_T_210) @[Mux.scala 47:70]
    node _rawIn_normDist_T_212 = mux(_rawIn_normDist_T_190, UInt<4>("h8"), _rawIn_normDist_T_211) @[Mux.scala 47:70]
    node _rawIn_normDist_T_213 = mux(_rawIn_normDist_T_191, UInt<3>("h7"), _rawIn_normDist_T_212) @[Mux.scala 47:70]
    node _rawIn_normDist_T_214 = mux(_rawIn_normDist_T_192, UInt<3>("h6"), _rawIn_normDist_T_213) @[Mux.scala 47:70]
    node _rawIn_normDist_T_215 = mux(_rawIn_normDist_T_193, UInt<3>("h5"), _rawIn_normDist_T_214) @[Mux.scala 47:70]
    node _rawIn_normDist_T_216 = mux(_rawIn_normDist_T_194, UInt<3>("h4"), _rawIn_normDist_T_215) @[Mux.scala 47:70]
    node _rawIn_normDist_T_217 = mux(_rawIn_normDist_T_195, UInt<2>("h3"), _rawIn_normDist_T_216) @[Mux.scala 47:70]
    node _rawIn_normDist_T_218 = mux(_rawIn_normDist_T_196, UInt<2>("h2"), _rawIn_normDist_T_217) @[Mux.scala 47:70]
    node _rawIn_normDist_T_219 = mux(_rawIn_normDist_T_197, UInt<1>("h1"), _rawIn_normDist_T_218) @[Mux.scala 47:70]
    node rawIn_normDist_4 = mux(_rawIn_normDist_T_198, UInt<1>("h0"), _rawIn_normDist_T_219) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_8 = dshl(rawIn_fractIn_4, rawIn_normDist_4) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_9 = bits(_rawIn_subnormFract_T_8, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_4 = shl(_rawIn_subnormFract_T_9, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_20 = xor(rawIn_normDist_4, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_21 = mux(rawIn_isZeroExpIn_4, _rawIn_adjustedExp_T_20, rawIn_expIn_4) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_22 = mux(rawIn_isZeroExpIn_4, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_23 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_22) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_24 = add(_rawIn_adjustedExp_T_21, _rawIn_adjustedExp_T_23) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_4 = tail(_rawIn_adjustedExp_T_24, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_4 = and(rawIn_isZeroExpIn_4, rawIn_isZeroFractIn_4) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_4 = bits(rawIn_adjustedExp_4, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_4 = eq(_rawIn_isSpecial_T_4, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_4 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_8 = eq(rawIn_isZeroFractIn_4, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_9 = and(rawIn_isSpecial_4, _rawIn_out_isNaN_T_8) @[rawFloatFromFN.scala 64:28]
    rawIn_4.isNaN <= _rawIn_out_isNaN_T_9 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_4 = and(rawIn_isSpecial_4, rawIn_isZeroFractIn_4) @[rawFloatFromFN.scala 65:28]
    rawIn_4.isInf <= _rawIn_out_isInf_T_4 @[rawFloatFromFN.scala 65:15]
    rawIn_4.isZero <= rawIn_isZero_4 @[rawFloatFromFN.scala 66:16]
    rawIn_4.sign <= rawIn_sign_4 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_8 = bits(rawIn_adjustedExp_4, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_9 = cvt(_rawIn_out_sExp_T_8) @[rawFloatFromFN.scala 68:42]
    rawIn_4.sExp <= _rawIn_out_sExp_T_9 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_16 = eq(rawIn_isZero_4, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_17 = cat(UInt<1>("h0"), _rawIn_out_sig_T_16) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_18 = mux(rawIn_isZeroExpIn_4, rawIn_subnormFract_4, rawIn_fractIn_4) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_19 = cat(_rawIn_out_sig_T_17, _rawIn_out_sig_T_18) @[rawFloatFromFN.scala 70:27]
    rawIn_4.sig <= _rawIn_out_sig_T_19 @[rawFloatFromFN.scala 69:13]
    node _T_49 = bits(rawIn_4.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_50 = mux(rawIn_4.isZero, UInt<3>("h0"), _T_49) @[recFNFromFN.scala 48:15]
    node _T_51 = mux(rawIn_4.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_52 = or(_T_50, _T_51) @[recFNFromFN.scala 48:76]
    node _T_53 = cat(rawIn_4.sign, _T_52) @[recFNFromFN.scala 47:20]
    node _T_54 = bits(rawIn_4.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_55 = cat(_T_53, _T_54) @[recFNFromFN.scala 49:45]
    node _T_56 = bits(rawIn_4.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_57 = cat(_T_55, _T_56) @[recFNFromFN.scala 50:41]
    AddRecFN.io.a <= _T_57 @[FPU.scala 82:15]
    node rawIn_sign_5 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_5 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_5 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_5 = eq(rawIn_expIn_5, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_5 = eq(rawIn_fractIn_5, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_220 = bits(rawIn_fractIn_5, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_221 = bits(rawIn_fractIn_5, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_222 = bits(rawIn_fractIn_5, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_223 = bits(rawIn_fractIn_5, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_224 = bits(rawIn_fractIn_5, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_225 = bits(rawIn_fractIn_5, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_226 = bits(rawIn_fractIn_5, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_227 = bits(rawIn_fractIn_5, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_228 = bits(rawIn_fractIn_5, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_229 = bits(rawIn_fractIn_5, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_230 = bits(rawIn_fractIn_5, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_231 = bits(rawIn_fractIn_5, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_232 = bits(rawIn_fractIn_5, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_233 = bits(rawIn_fractIn_5, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_234 = bits(rawIn_fractIn_5, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_235 = bits(rawIn_fractIn_5, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_236 = bits(rawIn_fractIn_5, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_237 = bits(rawIn_fractIn_5, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_238 = bits(rawIn_fractIn_5, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_239 = bits(rawIn_fractIn_5, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_240 = bits(rawIn_fractIn_5, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_241 = bits(rawIn_fractIn_5, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_242 = bits(rawIn_fractIn_5, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_243 = mux(_rawIn_normDist_T_221, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_244 = mux(_rawIn_normDist_T_222, UInt<5>("h14"), _rawIn_normDist_T_243) @[Mux.scala 47:70]
    node _rawIn_normDist_T_245 = mux(_rawIn_normDist_T_223, UInt<5>("h13"), _rawIn_normDist_T_244) @[Mux.scala 47:70]
    node _rawIn_normDist_T_246 = mux(_rawIn_normDist_T_224, UInt<5>("h12"), _rawIn_normDist_T_245) @[Mux.scala 47:70]
    node _rawIn_normDist_T_247 = mux(_rawIn_normDist_T_225, UInt<5>("h11"), _rawIn_normDist_T_246) @[Mux.scala 47:70]
    node _rawIn_normDist_T_248 = mux(_rawIn_normDist_T_226, UInt<5>("h10"), _rawIn_normDist_T_247) @[Mux.scala 47:70]
    node _rawIn_normDist_T_249 = mux(_rawIn_normDist_T_227, UInt<4>("hf"), _rawIn_normDist_T_248) @[Mux.scala 47:70]
    node _rawIn_normDist_T_250 = mux(_rawIn_normDist_T_228, UInt<4>("he"), _rawIn_normDist_T_249) @[Mux.scala 47:70]
    node _rawIn_normDist_T_251 = mux(_rawIn_normDist_T_229, UInt<4>("hd"), _rawIn_normDist_T_250) @[Mux.scala 47:70]
    node _rawIn_normDist_T_252 = mux(_rawIn_normDist_T_230, UInt<4>("hc"), _rawIn_normDist_T_251) @[Mux.scala 47:70]
    node _rawIn_normDist_T_253 = mux(_rawIn_normDist_T_231, UInt<4>("hb"), _rawIn_normDist_T_252) @[Mux.scala 47:70]
    node _rawIn_normDist_T_254 = mux(_rawIn_normDist_T_232, UInt<4>("ha"), _rawIn_normDist_T_253) @[Mux.scala 47:70]
    node _rawIn_normDist_T_255 = mux(_rawIn_normDist_T_233, UInt<4>("h9"), _rawIn_normDist_T_254) @[Mux.scala 47:70]
    node _rawIn_normDist_T_256 = mux(_rawIn_normDist_T_234, UInt<4>("h8"), _rawIn_normDist_T_255) @[Mux.scala 47:70]
    node _rawIn_normDist_T_257 = mux(_rawIn_normDist_T_235, UInt<3>("h7"), _rawIn_normDist_T_256) @[Mux.scala 47:70]
    node _rawIn_normDist_T_258 = mux(_rawIn_normDist_T_236, UInt<3>("h6"), _rawIn_normDist_T_257) @[Mux.scala 47:70]
    node _rawIn_normDist_T_259 = mux(_rawIn_normDist_T_237, UInt<3>("h5"), _rawIn_normDist_T_258) @[Mux.scala 47:70]
    node _rawIn_normDist_T_260 = mux(_rawIn_normDist_T_238, UInt<3>("h4"), _rawIn_normDist_T_259) @[Mux.scala 47:70]
    node _rawIn_normDist_T_261 = mux(_rawIn_normDist_T_239, UInt<2>("h3"), _rawIn_normDist_T_260) @[Mux.scala 47:70]
    node _rawIn_normDist_T_262 = mux(_rawIn_normDist_T_240, UInt<2>("h2"), _rawIn_normDist_T_261) @[Mux.scala 47:70]
    node _rawIn_normDist_T_263 = mux(_rawIn_normDist_T_241, UInt<1>("h1"), _rawIn_normDist_T_262) @[Mux.scala 47:70]
    node rawIn_normDist_5 = mux(_rawIn_normDist_T_242, UInt<1>("h0"), _rawIn_normDist_T_263) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_10 = dshl(rawIn_fractIn_5, rawIn_normDist_5) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_11 = bits(_rawIn_subnormFract_T_10, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_5 = shl(_rawIn_subnormFract_T_11, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_25 = xor(rawIn_normDist_5, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_26 = mux(rawIn_isZeroExpIn_5, _rawIn_adjustedExp_T_25, rawIn_expIn_5) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_27 = mux(rawIn_isZeroExpIn_5, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_28 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_27) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_29 = add(_rawIn_adjustedExp_T_26, _rawIn_adjustedExp_T_28) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_5 = tail(_rawIn_adjustedExp_T_29, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_5 = and(rawIn_isZeroExpIn_5, rawIn_isZeroFractIn_5) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_5 = bits(rawIn_adjustedExp_5, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_5 = eq(_rawIn_isSpecial_T_5, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_5 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_10 = eq(rawIn_isZeroFractIn_5, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_11 = and(rawIn_isSpecial_5, _rawIn_out_isNaN_T_10) @[rawFloatFromFN.scala 64:28]
    rawIn_5.isNaN <= _rawIn_out_isNaN_T_11 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_5 = and(rawIn_isSpecial_5, rawIn_isZeroFractIn_5) @[rawFloatFromFN.scala 65:28]
    rawIn_5.isInf <= _rawIn_out_isInf_T_5 @[rawFloatFromFN.scala 65:15]
    rawIn_5.isZero <= rawIn_isZero_5 @[rawFloatFromFN.scala 66:16]
    rawIn_5.sign <= rawIn_sign_5 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_10 = bits(rawIn_adjustedExp_5, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_11 = cvt(_rawIn_out_sExp_T_10) @[rawFloatFromFN.scala 68:42]
    rawIn_5.sExp <= _rawIn_out_sExp_T_11 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_20 = eq(rawIn_isZero_5, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_21 = cat(UInt<1>("h0"), _rawIn_out_sig_T_20) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_22 = mux(rawIn_isZeroExpIn_5, rawIn_subnormFract_5, rawIn_fractIn_5) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_23 = cat(_rawIn_out_sig_T_21, _rawIn_out_sig_T_22) @[rawFloatFromFN.scala 70:27]
    rawIn_5.sig <= _rawIn_out_sig_T_23 @[rawFloatFromFN.scala 69:13]
    node _T_58 = bits(rawIn_5.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_59 = mux(rawIn_5.isZero, UInt<3>("h0"), _T_58) @[recFNFromFN.scala 48:15]
    node _T_60 = mux(rawIn_5.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_61 = or(_T_59, _T_60) @[recFNFromFN.scala 48:76]
    node _T_62 = cat(rawIn_5.sign, _T_61) @[recFNFromFN.scala 47:20]
    node _T_63 = bits(rawIn_5.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_64 = cat(_T_62, _T_63) @[recFNFromFN.scala 49:45]
    node _T_65 = bits(rawIn_5.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_66 = cat(_T_64, _T_65) @[recFNFromFN.scala 50:41]
    AddRecFN.io.b <= _T_66 @[FPU.scala 82:15]
    node rawIn_sign_6 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_6 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_6 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_6 = eq(rawIn_expIn_6, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_6 = eq(rawIn_fractIn_6, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_264 = bits(rawIn_fractIn_6, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_265 = bits(rawIn_fractIn_6, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_266 = bits(rawIn_fractIn_6, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_267 = bits(rawIn_fractIn_6, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_268 = bits(rawIn_fractIn_6, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_269 = bits(rawIn_fractIn_6, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_270 = bits(rawIn_fractIn_6, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_271 = bits(rawIn_fractIn_6, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_272 = bits(rawIn_fractIn_6, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_273 = bits(rawIn_fractIn_6, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_274 = bits(rawIn_fractIn_6, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_275 = bits(rawIn_fractIn_6, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_276 = bits(rawIn_fractIn_6, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_277 = bits(rawIn_fractIn_6, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_278 = bits(rawIn_fractIn_6, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_279 = bits(rawIn_fractIn_6, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_280 = bits(rawIn_fractIn_6, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_281 = bits(rawIn_fractIn_6, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_282 = bits(rawIn_fractIn_6, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_283 = bits(rawIn_fractIn_6, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_284 = bits(rawIn_fractIn_6, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_285 = bits(rawIn_fractIn_6, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_286 = bits(rawIn_fractIn_6, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_287 = mux(_rawIn_normDist_T_265, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_288 = mux(_rawIn_normDist_T_266, UInt<5>("h14"), _rawIn_normDist_T_287) @[Mux.scala 47:70]
    node _rawIn_normDist_T_289 = mux(_rawIn_normDist_T_267, UInt<5>("h13"), _rawIn_normDist_T_288) @[Mux.scala 47:70]
    node _rawIn_normDist_T_290 = mux(_rawIn_normDist_T_268, UInt<5>("h12"), _rawIn_normDist_T_289) @[Mux.scala 47:70]
    node _rawIn_normDist_T_291 = mux(_rawIn_normDist_T_269, UInt<5>("h11"), _rawIn_normDist_T_290) @[Mux.scala 47:70]
    node _rawIn_normDist_T_292 = mux(_rawIn_normDist_T_270, UInt<5>("h10"), _rawIn_normDist_T_291) @[Mux.scala 47:70]
    node _rawIn_normDist_T_293 = mux(_rawIn_normDist_T_271, UInt<4>("hf"), _rawIn_normDist_T_292) @[Mux.scala 47:70]
    node _rawIn_normDist_T_294 = mux(_rawIn_normDist_T_272, UInt<4>("he"), _rawIn_normDist_T_293) @[Mux.scala 47:70]
    node _rawIn_normDist_T_295 = mux(_rawIn_normDist_T_273, UInt<4>("hd"), _rawIn_normDist_T_294) @[Mux.scala 47:70]
    node _rawIn_normDist_T_296 = mux(_rawIn_normDist_T_274, UInt<4>("hc"), _rawIn_normDist_T_295) @[Mux.scala 47:70]
    node _rawIn_normDist_T_297 = mux(_rawIn_normDist_T_275, UInt<4>("hb"), _rawIn_normDist_T_296) @[Mux.scala 47:70]
    node _rawIn_normDist_T_298 = mux(_rawIn_normDist_T_276, UInt<4>("ha"), _rawIn_normDist_T_297) @[Mux.scala 47:70]
    node _rawIn_normDist_T_299 = mux(_rawIn_normDist_T_277, UInt<4>("h9"), _rawIn_normDist_T_298) @[Mux.scala 47:70]
    node _rawIn_normDist_T_300 = mux(_rawIn_normDist_T_278, UInt<4>("h8"), _rawIn_normDist_T_299) @[Mux.scala 47:70]
    node _rawIn_normDist_T_301 = mux(_rawIn_normDist_T_279, UInt<3>("h7"), _rawIn_normDist_T_300) @[Mux.scala 47:70]
    node _rawIn_normDist_T_302 = mux(_rawIn_normDist_T_280, UInt<3>("h6"), _rawIn_normDist_T_301) @[Mux.scala 47:70]
    node _rawIn_normDist_T_303 = mux(_rawIn_normDist_T_281, UInt<3>("h5"), _rawIn_normDist_T_302) @[Mux.scala 47:70]
    node _rawIn_normDist_T_304 = mux(_rawIn_normDist_T_282, UInt<3>("h4"), _rawIn_normDist_T_303) @[Mux.scala 47:70]
    node _rawIn_normDist_T_305 = mux(_rawIn_normDist_T_283, UInt<2>("h3"), _rawIn_normDist_T_304) @[Mux.scala 47:70]
    node _rawIn_normDist_T_306 = mux(_rawIn_normDist_T_284, UInt<2>("h2"), _rawIn_normDist_T_305) @[Mux.scala 47:70]
    node _rawIn_normDist_T_307 = mux(_rawIn_normDist_T_285, UInt<1>("h1"), _rawIn_normDist_T_306) @[Mux.scala 47:70]
    node rawIn_normDist_6 = mux(_rawIn_normDist_T_286, UInt<1>("h0"), _rawIn_normDist_T_307) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_12 = dshl(rawIn_fractIn_6, rawIn_normDist_6) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_13 = bits(_rawIn_subnormFract_T_12, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_6 = shl(_rawIn_subnormFract_T_13, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_30 = xor(rawIn_normDist_6, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_31 = mux(rawIn_isZeroExpIn_6, _rawIn_adjustedExp_T_30, rawIn_expIn_6) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_32 = mux(rawIn_isZeroExpIn_6, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_33 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_32) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_34 = add(_rawIn_adjustedExp_T_31, _rawIn_adjustedExp_T_33) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_6 = tail(_rawIn_adjustedExp_T_34, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_6 = and(rawIn_isZeroExpIn_6, rawIn_isZeroFractIn_6) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_6 = bits(rawIn_adjustedExp_6, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_6 = eq(_rawIn_isSpecial_T_6, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_6 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_12 = eq(rawIn_isZeroFractIn_6, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_13 = and(rawIn_isSpecial_6, _rawIn_out_isNaN_T_12) @[rawFloatFromFN.scala 64:28]
    rawIn_6.isNaN <= _rawIn_out_isNaN_T_13 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_6 = and(rawIn_isSpecial_6, rawIn_isZeroFractIn_6) @[rawFloatFromFN.scala 65:28]
    rawIn_6.isInf <= _rawIn_out_isInf_T_6 @[rawFloatFromFN.scala 65:15]
    rawIn_6.isZero <= rawIn_isZero_6 @[rawFloatFromFN.scala 66:16]
    rawIn_6.sign <= rawIn_sign_6 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_12 = bits(rawIn_adjustedExp_6, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_13 = cvt(_rawIn_out_sExp_T_12) @[rawFloatFromFN.scala 68:42]
    rawIn_6.sExp <= _rawIn_out_sExp_T_13 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_24 = eq(rawIn_isZero_6, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_25 = cat(UInt<1>("h0"), _rawIn_out_sig_T_24) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_26 = mux(rawIn_isZeroExpIn_6, rawIn_subnormFract_6, rawIn_fractIn_6) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_27 = cat(_rawIn_out_sig_T_25, _rawIn_out_sig_T_26) @[rawFloatFromFN.scala 70:27]
    rawIn_6.sig <= _rawIn_out_sig_T_27 @[rawFloatFromFN.scala 69:13]
    node _T_67 = bits(rawIn_6.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_68 = mux(rawIn_6.isZero, UInt<3>("h0"), _T_67) @[recFNFromFN.scala 48:15]
    node _T_69 = mux(rawIn_6.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_70 = or(_T_68, _T_69) @[recFNFromFN.scala 48:76]
    node _T_71 = cat(rawIn_6.sign, _T_70) @[recFNFromFN.scala 47:20]
    node _T_72 = bits(rawIn_6.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_73 = cat(_T_71, _T_72) @[recFNFromFN.scala 49:45]
    node _T_74 = bits(rawIn_6.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_75 = cat(_T_73, _T_74) @[recFNFromFN.scala 50:41]
    MulRecFN.io.a <= _T_75 @[FPU.scala 82:15]
    node rawIn_sign_7 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_7 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_7 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_7 = eq(rawIn_expIn_7, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_7 = eq(rawIn_fractIn_7, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_308 = bits(rawIn_fractIn_7, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_309 = bits(rawIn_fractIn_7, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_310 = bits(rawIn_fractIn_7, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_311 = bits(rawIn_fractIn_7, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_312 = bits(rawIn_fractIn_7, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_313 = bits(rawIn_fractIn_7, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_314 = bits(rawIn_fractIn_7, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_315 = bits(rawIn_fractIn_7, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_316 = bits(rawIn_fractIn_7, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_317 = bits(rawIn_fractIn_7, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_318 = bits(rawIn_fractIn_7, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_319 = bits(rawIn_fractIn_7, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_320 = bits(rawIn_fractIn_7, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_321 = bits(rawIn_fractIn_7, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_322 = bits(rawIn_fractIn_7, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_323 = bits(rawIn_fractIn_7, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_324 = bits(rawIn_fractIn_7, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_325 = bits(rawIn_fractIn_7, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_326 = bits(rawIn_fractIn_7, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_327 = bits(rawIn_fractIn_7, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_328 = bits(rawIn_fractIn_7, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_329 = bits(rawIn_fractIn_7, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_330 = bits(rawIn_fractIn_7, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_331 = mux(_rawIn_normDist_T_309, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_332 = mux(_rawIn_normDist_T_310, UInt<5>("h14"), _rawIn_normDist_T_331) @[Mux.scala 47:70]
    node _rawIn_normDist_T_333 = mux(_rawIn_normDist_T_311, UInt<5>("h13"), _rawIn_normDist_T_332) @[Mux.scala 47:70]
    node _rawIn_normDist_T_334 = mux(_rawIn_normDist_T_312, UInt<5>("h12"), _rawIn_normDist_T_333) @[Mux.scala 47:70]
    node _rawIn_normDist_T_335 = mux(_rawIn_normDist_T_313, UInt<5>("h11"), _rawIn_normDist_T_334) @[Mux.scala 47:70]
    node _rawIn_normDist_T_336 = mux(_rawIn_normDist_T_314, UInt<5>("h10"), _rawIn_normDist_T_335) @[Mux.scala 47:70]
    node _rawIn_normDist_T_337 = mux(_rawIn_normDist_T_315, UInt<4>("hf"), _rawIn_normDist_T_336) @[Mux.scala 47:70]
    node _rawIn_normDist_T_338 = mux(_rawIn_normDist_T_316, UInt<4>("he"), _rawIn_normDist_T_337) @[Mux.scala 47:70]
    node _rawIn_normDist_T_339 = mux(_rawIn_normDist_T_317, UInt<4>("hd"), _rawIn_normDist_T_338) @[Mux.scala 47:70]
    node _rawIn_normDist_T_340 = mux(_rawIn_normDist_T_318, UInt<4>("hc"), _rawIn_normDist_T_339) @[Mux.scala 47:70]
    node _rawIn_normDist_T_341 = mux(_rawIn_normDist_T_319, UInt<4>("hb"), _rawIn_normDist_T_340) @[Mux.scala 47:70]
    node _rawIn_normDist_T_342 = mux(_rawIn_normDist_T_320, UInt<4>("ha"), _rawIn_normDist_T_341) @[Mux.scala 47:70]
    node _rawIn_normDist_T_343 = mux(_rawIn_normDist_T_321, UInt<4>("h9"), _rawIn_normDist_T_342) @[Mux.scala 47:70]
    node _rawIn_normDist_T_344 = mux(_rawIn_normDist_T_322, UInt<4>("h8"), _rawIn_normDist_T_343) @[Mux.scala 47:70]
    node _rawIn_normDist_T_345 = mux(_rawIn_normDist_T_323, UInt<3>("h7"), _rawIn_normDist_T_344) @[Mux.scala 47:70]
    node _rawIn_normDist_T_346 = mux(_rawIn_normDist_T_324, UInt<3>("h6"), _rawIn_normDist_T_345) @[Mux.scala 47:70]
    node _rawIn_normDist_T_347 = mux(_rawIn_normDist_T_325, UInt<3>("h5"), _rawIn_normDist_T_346) @[Mux.scala 47:70]
    node _rawIn_normDist_T_348 = mux(_rawIn_normDist_T_326, UInt<3>("h4"), _rawIn_normDist_T_347) @[Mux.scala 47:70]
    node _rawIn_normDist_T_349 = mux(_rawIn_normDist_T_327, UInt<2>("h3"), _rawIn_normDist_T_348) @[Mux.scala 47:70]
    node _rawIn_normDist_T_350 = mux(_rawIn_normDist_T_328, UInt<2>("h2"), _rawIn_normDist_T_349) @[Mux.scala 47:70]
    node _rawIn_normDist_T_351 = mux(_rawIn_normDist_T_329, UInt<1>("h1"), _rawIn_normDist_T_350) @[Mux.scala 47:70]
    node rawIn_normDist_7 = mux(_rawIn_normDist_T_330, UInt<1>("h0"), _rawIn_normDist_T_351) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_14 = dshl(rawIn_fractIn_7, rawIn_normDist_7) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_15 = bits(_rawIn_subnormFract_T_14, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_7 = shl(_rawIn_subnormFract_T_15, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_35 = xor(rawIn_normDist_7, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_36 = mux(rawIn_isZeroExpIn_7, _rawIn_adjustedExp_T_35, rawIn_expIn_7) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_37 = mux(rawIn_isZeroExpIn_7, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_38 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_37) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_39 = add(_rawIn_adjustedExp_T_36, _rawIn_adjustedExp_T_38) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_7 = tail(_rawIn_adjustedExp_T_39, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_7 = and(rawIn_isZeroExpIn_7, rawIn_isZeroFractIn_7) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_7 = bits(rawIn_adjustedExp_7, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_7 = eq(_rawIn_isSpecial_T_7, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_7 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_14 = eq(rawIn_isZeroFractIn_7, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_15 = and(rawIn_isSpecial_7, _rawIn_out_isNaN_T_14) @[rawFloatFromFN.scala 64:28]
    rawIn_7.isNaN <= _rawIn_out_isNaN_T_15 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_7 = and(rawIn_isSpecial_7, rawIn_isZeroFractIn_7) @[rawFloatFromFN.scala 65:28]
    rawIn_7.isInf <= _rawIn_out_isInf_T_7 @[rawFloatFromFN.scala 65:15]
    rawIn_7.isZero <= rawIn_isZero_7 @[rawFloatFromFN.scala 66:16]
    rawIn_7.sign <= rawIn_sign_7 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_14 = bits(rawIn_adjustedExp_7, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_15 = cvt(_rawIn_out_sExp_T_14) @[rawFloatFromFN.scala 68:42]
    rawIn_7.sExp <= _rawIn_out_sExp_T_15 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_28 = eq(rawIn_isZero_7, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_29 = cat(UInt<1>("h0"), _rawIn_out_sig_T_28) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_30 = mux(rawIn_isZeroExpIn_7, rawIn_subnormFract_7, rawIn_fractIn_7) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_31 = cat(_rawIn_out_sig_T_29, _rawIn_out_sig_T_30) @[rawFloatFromFN.scala 70:27]
    rawIn_7.sig <= _rawIn_out_sig_T_31 @[rawFloatFromFN.scala 69:13]
    node _T_76 = bits(rawIn_7.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_77 = mux(rawIn_7.isZero, UInt<3>("h0"), _T_76) @[recFNFromFN.scala 48:15]
    node _T_78 = mux(rawIn_7.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_79 = or(_T_77, _T_78) @[recFNFromFN.scala 48:76]
    node _T_80 = cat(rawIn_7.sign, _T_79) @[recFNFromFN.scala 47:20]
    node _T_81 = bits(rawIn_7.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_82 = cat(_T_80, _T_81) @[recFNFromFN.scala 49:45]
    node _T_83 = bits(rawIn_7.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_84 = cat(_T_82, _T_83) @[recFNFromFN.scala 50:41]
    MulRecFN.io.b <= _T_84 @[FPU.scala 82:15]
    node rawIn_sign_8 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_8 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_8 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_8 = eq(rawIn_expIn_8, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_8 = eq(rawIn_fractIn_8, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_352 = bits(rawIn_fractIn_8, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_353 = bits(rawIn_fractIn_8, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_354 = bits(rawIn_fractIn_8, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_355 = bits(rawIn_fractIn_8, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_356 = bits(rawIn_fractIn_8, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_357 = bits(rawIn_fractIn_8, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_358 = bits(rawIn_fractIn_8, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_359 = bits(rawIn_fractIn_8, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_360 = bits(rawIn_fractIn_8, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_361 = bits(rawIn_fractIn_8, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_362 = bits(rawIn_fractIn_8, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_363 = bits(rawIn_fractIn_8, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_364 = bits(rawIn_fractIn_8, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_365 = bits(rawIn_fractIn_8, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_366 = bits(rawIn_fractIn_8, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_367 = bits(rawIn_fractIn_8, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_368 = bits(rawIn_fractIn_8, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_369 = bits(rawIn_fractIn_8, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_370 = bits(rawIn_fractIn_8, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_371 = bits(rawIn_fractIn_8, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_372 = bits(rawIn_fractIn_8, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_373 = bits(rawIn_fractIn_8, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_374 = bits(rawIn_fractIn_8, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_375 = mux(_rawIn_normDist_T_353, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_376 = mux(_rawIn_normDist_T_354, UInt<5>("h14"), _rawIn_normDist_T_375) @[Mux.scala 47:70]
    node _rawIn_normDist_T_377 = mux(_rawIn_normDist_T_355, UInt<5>("h13"), _rawIn_normDist_T_376) @[Mux.scala 47:70]
    node _rawIn_normDist_T_378 = mux(_rawIn_normDist_T_356, UInt<5>("h12"), _rawIn_normDist_T_377) @[Mux.scala 47:70]
    node _rawIn_normDist_T_379 = mux(_rawIn_normDist_T_357, UInt<5>("h11"), _rawIn_normDist_T_378) @[Mux.scala 47:70]
    node _rawIn_normDist_T_380 = mux(_rawIn_normDist_T_358, UInt<5>("h10"), _rawIn_normDist_T_379) @[Mux.scala 47:70]
    node _rawIn_normDist_T_381 = mux(_rawIn_normDist_T_359, UInt<4>("hf"), _rawIn_normDist_T_380) @[Mux.scala 47:70]
    node _rawIn_normDist_T_382 = mux(_rawIn_normDist_T_360, UInt<4>("he"), _rawIn_normDist_T_381) @[Mux.scala 47:70]
    node _rawIn_normDist_T_383 = mux(_rawIn_normDist_T_361, UInt<4>("hd"), _rawIn_normDist_T_382) @[Mux.scala 47:70]
    node _rawIn_normDist_T_384 = mux(_rawIn_normDist_T_362, UInt<4>("hc"), _rawIn_normDist_T_383) @[Mux.scala 47:70]
    node _rawIn_normDist_T_385 = mux(_rawIn_normDist_T_363, UInt<4>("hb"), _rawIn_normDist_T_384) @[Mux.scala 47:70]
    node _rawIn_normDist_T_386 = mux(_rawIn_normDist_T_364, UInt<4>("ha"), _rawIn_normDist_T_385) @[Mux.scala 47:70]
    node _rawIn_normDist_T_387 = mux(_rawIn_normDist_T_365, UInt<4>("h9"), _rawIn_normDist_T_386) @[Mux.scala 47:70]
    node _rawIn_normDist_T_388 = mux(_rawIn_normDist_T_366, UInt<4>("h8"), _rawIn_normDist_T_387) @[Mux.scala 47:70]
    node _rawIn_normDist_T_389 = mux(_rawIn_normDist_T_367, UInt<3>("h7"), _rawIn_normDist_T_388) @[Mux.scala 47:70]
    node _rawIn_normDist_T_390 = mux(_rawIn_normDist_T_368, UInt<3>("h6"), _rawIn_normDist_T_389) @[Mux.scala 47:70]
    node _rawIn_normDist_T_391 = mux(_rawIn_normDist_T_369, UInt<3>("h5"), _rawIn_normDist_T_390) @[Mux.scala 47:70]
    node _rawIn_normDist_T_392 = mux(_rawIn_normDist_T_370, UInt<3>("h4"), _rawIn_normDist_T_391) @[Mux.scala 47:70]
    node _rawIn_normDist_T_393 = mux(_rawIn_normDist_T_371, UInt<2>("h3"), _rawIn_normDist_T_392) @[Mux.scala 47:70]
    node _rawIn_normDist_T_394 = mux(_rawIn_normDist_T_372, UInt<2>("h2"), _rawIn_normDist_T_393) @[Mux.scala 47:70]
    node _rawIn_normDist_T_395 = mux(_rawIn_normDist_T_373, UInt<1>("h1"), _rawIn_normDist_T_394) @[Mux.scala 47:70]
    node rawIn_normDist_8 = mux(_rawIn_normDist_T_374, UInt<1>("h0"), _rawIn_normDist_T_395) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_16 = dshl(rawIn_fractIn_8, rawIn_normDist_8) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_17 = bits(_rawIn_subnormFract_T_16, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_8 = shl(_rawIn_subnormFract_T_17, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_40 = xor(rawIn_normDist_8, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_41 = mux(rawIn_isZeroExpIn_8, _rawIn_adjustedExp_T_40, rawIn_expIn_8) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_42 = mux(rawIn_isZeroExpIn_8, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_43 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_42) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_44 = add(_rawIn_adjustedExp_T_41, _rawIn_adjustedExp_T_43) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_8 = tail(_rawIn_adjustedExp_T_44, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_8 = and(rawIn_isZeroExpIn_8, rawIn_isZeroFractIn_8) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_8 = bits(rawIn_adjustedExp_8, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_8 = eq(_rawIn_isSpecial_T_8, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_8 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_16 = eq(rawIn_isZeroFractIn_8, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_17 = and(rawIn_isSpecial_8, _rawIn_out_isNaN_T_16) @[rawFloatFromFN.scala 64:28]
    rawIn_8.isNaN <= _rawIn_out_isNaN_T_17 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_8 = and(rawIn_isSpecial_8, rawIn_isZeroFractIn_8) @[rawFloatFromFN.scala 65:28]
    rawIn_8.isInf <= _rawIn_out_isInf_T_8 @[rawFloatFromFN.scala 65:15]
    rawIn_8.isZero <= rawIn_isZero_8 @[rawFloatFromFN.scala 66:16]
    rawIn_8.sign <= rawIn_sign_8 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_16 = bits(rawIn_adjustedExp_8, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_17 = cvt(_rawIn_out_sExp_T_16) @[rawFloatFromFN.scala 68:42]
    rawIn_8.sExp <= _rawIn_out_sExp_T_17 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_32 = eq(rawIn_isZero_8, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_33 = cat(UInt<1>("h0"), _rawIn_out_sig_T_32) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_34 = mux(rawIn_isZeroExpIn_8, rawIn_subnormFract_8, rawIn_fractIn_8) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_35 = cat(_rawIn_out_sig_T_33, _rawIn_out_sig_T_34) @[rawFloatFromFN.scala 70:27]
    rawIn_8.sig <= _rawIn_out_sig_T_35 @[rawFloatFromFN.scala 69:13]
    node _T_85 = bits(rawIn_8.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_86 = mux(rawIn_8.isZero, UInt<3>("h0"), _T_85) @[recFNFromFN.scala 48:15]
    node _T_87 = mux(rawIn_8.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_88 = or(_T_86, _T_87) @[recFNFromFN.scala 48:76]
    node _T_89 = cat(rawIn_8.sign, _T_88) @[recFNFromFN.scala 47:20]
    node _T_90 = bits(rawIn_8.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_91 = cat(_T_89, _T_90) @[recFNFromFN.scala 49:45]
    node _T_92 = bits(rawIn_8.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_93 = cat(_T_91, _T_92) @[recFNFromFN.scala 50:41]
    DivSqrtRecFM_small_e8_s24.io.a <= _T_93 @[FPU.scala 82:15]
    node rawIn_sign_9 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_9 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_9 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_9 = eq(rawIn_expIn_9, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_9 = eq(rawIn_fractIn_9, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_396 = bits(rawIn_fractIn_9, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_397 = bits(rawIn_fractIn_9, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_398 = bits(rawIn_fractIn_9, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_399 = bits(rawIn_fractIn_9, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_400 = bits(rawIn_fractIn_9, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_401 = bits(rawIn_fractIn_9, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_402 = bits(rawIn_fractIn_9, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_403 = bits(rawIn_fractIn_9, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_404 = bits(rawIn_fractIn_9, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_405 = bits(rawIn_fractIn_9, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_406 = bits(rawIn_fractIn_9, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_407 = bits(rawIn_fractIn_9, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_408 = bits(rawIn_fractIn_9, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_409 = bits(rawIn_fractIn_9, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_410 = bits(rawIn_fractIn_9, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_411 = bits(rawIn_fractIn_9, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_412 = bits(rawIn_fractIn_9, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_413 = bits(rawIn_fractIn_9, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_414 = bits(rawIn_fractIn_9, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_415 = bits(rawIn_fractIn_9, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_416 = bits(rawIn_fractIn_9, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_417 = bits(rawIn_fractIn_9, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_418 = bits(rawIn_fractIn_9, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_419 = mux(_rawIn_normDist_T_397, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_420 = mux(_rawIn_normDist_T_398, UInt<5>("h14"), _rawIn_normDist_T_419) @[Mux.scala 47:70]
    node _rawIn_normDist_T_421 = mux(_rawIn_normDist_T_399, UInt<5>("h13"), _rawIn_normDist_T_420) @[Mux.scala 47:70]
    node _rawIn_normDist_T_422 = mux(_rawIn_normDist_T_400, UInt<5>("h12"), _rawIn_normDist_T_421) @[Mux.scala 47:70]
    node _rawIn_normDist_T_423 = mux(_rawIn_normDist_T_401, UInt<5>("h11"), _rawIn_normDist_T_422) @[Mux.scala 47:70]
    node _rawIn_normDist_T_424 = mux(_rawIn_normDist_T_402, UInt<5>("h10"), _rawIn_normDist_T_423) @[Mux.scala 47:70]
    node _rawIn_normDist_T_425 = mux(_rawIn_normDist_T_403, UInt<4>("hf"), _rawIn_normDist_T_424) @[Mux.scala 47:70]
    node _rawIn_normDist_T_426 = mux(_rawIn_normDist_T_404, UInt<4>("he"), _rawIn_normDist_T_425) @[Mux.scala 47:70]
    node _rawIn_normDist_T_427 = mux(_rawIn_normDist_T_405, UInt<4>("hd"), _rawIn_normDist_T_426) @[Mux.scala 47:70]
    node _rawIn_normDist_T_428 = mux(_rawIn_normDist_T_406, UInt<4>("hc"), _rawIn_normDist_T_427) @[Mux.scala 47:70]
    node _rawIn_normDist_T_429 = mux(_rawIn_normDist_T_407, UInt<4>("hb"), _rawIn_normDist_T_428) @[Mux.scala 47:70]
    node _rawIn_normDist_T_430 = mux(_rawIn_normDist_T_408, UInt<4>("ha"), _rawIn_normDist_T_429) @[Mux.scala 47:70]
    node _rawIn_normDist_T_431 = mux(_rawIn_normDist_T_409, UInt<4>("h9"), _rawIn_normDist_T_430) @[Mux.scala 47:70]
    node _rawIn_normDist_T_432 = mux(_rawIn_normDist_T_410, UInt<4>("h8"), _rawIn_normDist_T_431) @[Mux.scala 47:70]
    node _rawIn_normDist_T_433 = mux(_rawIn_normDist_T_411, UInt<3>("h7"), _rawIn_normDist_T_432) @[Mux.scala 47:70]
    node _rawIn_normDist_T_434 = mux(_rawIn_normDist_T_412, UInt<3>("h6"), _rawIn_normDist_T_433) @[Mux.scala 47:70]
    node _rawIn_normDist_T_435 = mux(_rawIn_normDist_T_413, UInt<3>("h5"), _rawIn_normDist_T_434) @[Mux.scala 47:70]
    node _rawIn_normDist_T_436 = mux(_rawIn_normDist_T_414, UInt<3>("h4"), _rawIn_normDist_T_435) @[Mux.scala 47:70]
    node _rawIn_normDist_T_437 = mux(_rawIn_normDist_T_415, UInt<2>("h3"), _rawIn_normDist_T_436) @[Mux.scala 47:70]
    node _rawIn_normDist_T_438 = mux(_rawIn_normDist_T_416, UInt<2>("h2"), _rawIn_normDist_T_437) @[Mux.scala 47:70]
    node _rawIn_normDist_T_439 = mux(_rawIn_normDist_T_417, UInt<1>("h1"), _rawIn_normDist_T_438) @[Mux.scala 47:70]
    node rawIn_normDist_9 = mux(_rawIn_normDist_T_418, UInt<1>("h0"), _rawIn_normDist_T_439) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_18 = dshl(rawIn_fractIn_9, rawIn_normDist_9) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_19 = bits(_rawIn_subnormFract_T_18, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_9 = shl(_rawIn_subnormFract_T_19, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_45 = xor(rawIn_normDist_9, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_46 = mux(rawIn_isZeroExpIn_9, _rawIn_adjustedExp_T_45, rawIn_expIn_9) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_47 = mux(rawIn_isZeroExpIn_9, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_48 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_47) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_49 = add(_rawIn_adjustedExp_T_46, _rawIn_adjustedExp_T_48) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_9 = tail(_rawIn_adjustedExp_T_49, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_9 = and(rawIn_isZeroExpIn_9, rawIn_isZeroFractIn_9) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_9 = bits(rawIn_adjustedExp_9, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_9 = eq(_rawIn_isSpecial_T_9, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_9 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_18 = eq(rawIn_isZeroFractIn_9, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_19 = and(rawIn_isSpecial_9, _rawIn_out_isNaN_T_18) @[rawFloatFromFN.scala 64:28]
    rawIn_9.isNaN <= _rawIn_out_isNaN_T_19 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_9 = and(rawIn_isSpecial_9, rawIn_isZeroFractIn_9) @[rawFloatFromFN.scala 65:28]
    rawIn_9.isInf <= _rawIn_out_isInf_T_9 @[rawFloatFromFN.scala 65:15]
    rawIn_9.isZero <= rawIn_isZero_9 @[rawFloatFromFN.scala 66:16]
    rawIn_9.sign <= rawIn_sign_9 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_18 = bits(rawIn_adjustedExp_9, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_19 = cvt(_rawIn_out_sExp_T_18) @[rawFloatFromFN.scala 68:42]
    rawIn_9.sExp <= _rawIn_out_sExp_T_19 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_36 = eq(rawIn_isZero_9, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_37 = cat(UInt<1>("h0"), _rawIn_out_sig_T_36) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_38 = mux(rawIn_isZeroExpIn_9, rawIn_subnormFract_9, rawIn_fractIn_9) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_39 = cat(_rawIn_out_sig_T_37, _rawIn_out_sig_T_38) @[rawFloatFromFN.scala 70:27]
    rawIn_9.sig <= _rawIn_out_sig_T_39 @[rawFloatFromFN.scala 69:13]
    node _T_94 = bits(rawIn_9.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_95 = mux(rawIn_9.isZero, UInt<3>("h0"), _T_94) @[recFNFromFN.scala 48:15]
    node _T_96 = mux(rawIn_9.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_97 = or(_T_95, _T_96) @[recFNFromFN.scala 48:76]
    node _T_98 = cat(rawIn_9.sign, _T_97) @[recFNFromFN.scala 47:20]
    node _T_99 = bits(rawIn_9.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_100 = cat(_T_98, _T_99) @[recFNFromFN.scala 49:45]
    node _T_101 = bits(rawIn_9.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_102 = cat(_T_100, _T_101) @[recFNFromFN.scala 50:41]
    DivSqrtRecFM_small_e8_s24.io.b <= _T_102 @[FPU.scala 82:15]
    node rawIn_sign_10 = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_10 = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_10 = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_10 = eq(rawIn_expIn_10, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_10 = eq(rawIn_fractIn_10, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_440 = bits(rawIn_fractIn_10, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_441 = bits(rawIn_fractIn_10, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_442 = bits(rawIn_fractIn_10, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_443 = bits(rawIn_fractIn_10, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_444 = bits(rawIn_fractIn_10, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_445 = bits(rawIn_fractIn_10, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_446 = bits(rawIn_fractIn_10, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_447 = bits(rawIn_fractIn_10, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_448 = bits(rawIn_fractIn_10, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_449 = bits(rawIn_fractIn_10, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_450 = bits(rawIn_fractIn_10, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_451 = bits(rawIn_fractIn_10, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_452 = bits(rawIn_fractIn_10, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_453 = bits(rawIn_fractIn_10, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_454 = bits(rawIn_fractIn_10, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_455 = bits(rawIn_fractIn_10, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_456 = bits(rawIn_fractIn_10, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_457 = bits(rawIn_fractIn_10, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_458 = bits(rawIn_fractIn_10, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_459 = bits(rawIn_fractIn_10, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_460 = bits(rawIn_fractIn_10, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_461 = bits(rawIn_fractIn_10, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_462 = bits(rawIn_fractIn_10, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_463 = mux(_rawIn_normDist_T_441, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_464 = mux(_rawIn_normDist_T_442, UInt<5>("h14"), _rawIn_normDist_T_463) @[Mux.scala 47:70]
    node _rawIn_normDist_T_465 = mux(_rawIn_normDist_T_443, UInt<5>("h13"), _rawIn_normDist_T_464) @[Mux.scala 47:70]
    node _rawIn_normDist_T_466 = mux(_rawIn_normDist_T_444, UInt<5>("h12"), _rawIn_normDist_T_465) @[Mux.scala 47:70]
    node _rawIn_normDist_T_467 = mux(_rawIn_normDist_T_445, UInt<5>("h11"), _rawIn_normDist_T_466) @[Mux.scala 47:70]
    node _rawIn_normDist_T_468 = mux(_rawIn_normDist_T_446, UInt<5>("h10"), _rawIn_normDist_T_467) @[Mux.scala 47:70]
    node _rawIn_normDist_T_469 = mux(_rawIn_normDist_T_447, UInt<4>("hf"), _rawIn_normDist_T_468) @[Mux.scala 47:70]
    node _rawIn_normDist_T_470 = mux(_rawIn_normDist_T_448, UInt<4>("he"), _rawIn_normDist_T_469) @[Mux.scala 47:70]
    node _rawIn_normDist_T_471 = mux(_rawIn_normDist_T_449, UInt<4>("hd"), _rawIn_normDist_T_470) @[Mux.scala 47:70]
    node _rawIn_normDist_T_472 = mux(_rawIn_normDist_T_450, UInt<4>("hc"), _rawIn_normDist_T_471) @[Mux.scala 47:70]
    node _rawIn_normDist_T_473 = mux(_rawIn_normDist_T_451, UInt<4>("hb"), _rawIn_normDist_T_472) @[Mux.scala 47:70]
    node _rawIn_normDist_T_474 = mux(_rawIn_normDist_T_452, UInt<4>("ha"), _rawIn_normDist_T_473) @[Mux.scala 47:70]
    node _rawIn_normDist_T_475 = mux(_rawIn_normDist_T_453, UInt<4>("h9"), _rawIn_normDist_T_474) @[Mux.scala 47:70]
    node _rawIn_normDist_T_476 = mux(_rawIn_normDist_T_454, UInt<4>("h8"), _rawIn_normDist_T_475) @[Mux.scala 47:70]
    node _rawIn_normDist_T_477 = mux(_rawIn_normDist_T_455, UInt<3>("h7"), _rawIn_normDist_T_476) @[Mux.scala 47:70]
    node _rawIn_normDist_T_478 = mux(_rawIn_normDist_T_456, UInt<3>("h6"), _rawIn_normDist_T_477) @[Mux.scala 47:70]
    node _rawIn_normDist_T_479 = mux(_rawIn_normDist_T_457, UInt<3>("h5"), _rawIn_normDist_T_478) @[Mux.scala 47:70]
    node _rawIn_normDist_T_480 = mux(_rawIn_normDist_T_458, UInt<3>("h4"), _rawIn_normDist_T_479) @[Mux.scala 47:70]
    node _rawIn_normDist_T_481 = mux(_rawIn_normDist_T_459, UInt<2>("h3"), _rawIn_normDist_T_480) @[Mux.scala 47:70]
    node _rawIn_normDist_T_482 = mux(_rawIn_normDist_T_460, UInt<2>("h2"), _rawIn_normDist_T_481) @[Mux.scala 47:70]
    node _rawIn_normDist_T_483 = mux(_rawIn_normDist_T_461, UInt<1>("h1"), _rawIn_normDist_T_482) @[Mux.scala 47:70]
    node rawIn_normDist_10 = mux(_rawIn_normDist_T_462, UInt<1>("h0"), _rawIn_normDist_T_483) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_20 = dshl(rawIn_fractIn_10, rawIn_normDist_10) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_21 = bits(_rawIn_subnormFract_T_20, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_10 = shl(_rawIn_subnormFract_T_21, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_50 = xor(rawIn_normDist_10, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_51 = mux(rawIn_isZeroExpIn_10, _rawIn_adjustedExp_T_50, rawIn_expIn_10) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_52 = mux(rawIn_isZeroExpIn_10, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_53 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_52) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_54 = add(_rawIn_adjustedExp_T_51, _rawIn_adjustedExp_T_53) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_10 = tail(_rawIn_adjustedExp_T_54, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_10 = and(rawIn_isZeroExpIn_10, rawIn_isZeroFractIn_10) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_10 = bits(rawIn_adjustedExp_10, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_10 = eq(_rawIn_isSpecial_T_10, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_10 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_20 = eq(rawIn_isZeroFractIn_10, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_21 = and(rawIn_isSpecial_10, _rawIn_out_isNaN_T_20) @[rawFloatFromFN.scala 64:28]
    rawIn_10.isNaN <= _rawIn_out_isNaN_T_21 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_10 = and(rawIn_isSpecial_10, rawIn_isZeroFractIn_10) @[rawFloatFromFN.scala 65:28]
    rawIn_10.isInf <= _rawIn_out_isInf_T_10 @[rawFloatFromFN.scala 65:15]
    rawIn_10.isZero <= rawIn_isZero_10 @[rawFloatFromFN.scala 66:16]
    rawIn_10.sign <= rawIn_sign_10 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_20 = bits(rawIn_adjustedExp_10, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_21 = cvt(_rawIn_out_sExp_T_20) @[rawFloatFromFN.scala 68:42]
    rawIn_10.sExp <= _rawIn_out_sExp_T_21 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_40 = eq(rawIn_isZero_10, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_41 = cat(UInt<1>("h0"), _rawIn_out_sig_T_40) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_42 = mux(rawIn_isZeroExpIn_10, rawIn_subnormFract_10, rawIn_fractIn_10) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_43 = cat(_rawIn_out_sig_T_41, _rawIn_out_sig_T_42) @[rawFloatFromFN.scala 70:27]
    rawIn_10.sig <= _rawIn_out_sig_T_43 @[rawFloatFromFN.scala 69:13]
    node _T_103 = bits(rawIn_10.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_104 = mux(rawIn_10.isZero, UInt<3>("h0"), _T_103) @[recFNFromFN.scala 48:15]
    node _T_105 = mux(rawIn_10.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_106 = or(_T_104, _T_105) @[recFNFromFN.scala 48:76]
    node _T_107 = cat(rawIn_10.sign, _T_106) @[recFNFromFN.scala 47:20]
    node _T_108 = bits(rawIn_10.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_109 = cat(_T_107, _T_108) @[recFNFromFN.scala 49:45]
    node _T_110 = bits(rawIn_10.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_111 = cat(_T_109, _T_110) @[recFNFromFN.scala 50:41]
    CompareRecFN.io.a <= _T_111 @[FPU.scala 82:15]
    node rawIn_sign_11 = bits(io.in[1], 31, 31) @[rawFloatFromFN.scala 44:18]
    node rawIn_expIn_11 = bits(io.in[1], 30, 23) @[rawFloatFromFN.scala 45:19]
    node rawIn_fractIn_11 = bits(io.in[1], 22, 0) @[rawFloatFromFN.scala 46:21]
    node rawIn_isZeroExpIn_11 = eq(rawIn_expIn_11, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node rawIn_isZeroFractIn_11 = eq(rawIn_fractIn_11, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _rawIn_normDist_T_484 = bits(rawIn_fractIn_11, 0, 0) @[primitives.scala 91:52]
    node _rawIn_normDist_T_485 = bits(rawIn_fractIn_11, 1, 1) @[primitives.scala 91:52]
    node _rawIn_normDist_T_486 = bits(rawIn_fractIn_11, 2, 2) @[primitives.scala 91:52]
    node _rawIn_normDist_T_487 = bits(rawIn_fractIn_11, 3, 3) @[primitives.scala 91:52]
    node _rawIn_normDist_T_488 = bits(rawIn_fractIn_11, 4, 4) @[primitives.scala 91:52]
    node _rawIn_normDist_T_489 = bits(rawIn_fractIn_11, 5, 5) @[primitives.scala 91:52]
    node _rawIn_normDist_T_490 = bits(rawIn_fractIn_11, 6, 6) @[primitives.scala 91:52]
    node _rawIn_normDist_T_491 = bits(rawIn_fractIn_11, 7, 7) @[primitives.scala 91:52]
    node _rawIn_normDist_T_492 = bits(rawIn_fractIn_11, 8, 8) @[primitives.scala 91:52]
    node _rawIn_normDist_T_493 = bits(rawIn_fractIn_11, 9, 9) @[primitives.scala 91:52]
    node _rawIn_normDist_T_494 = bits(rawIn_fractIn_11, 10, 10) @[primitives.scala 91:52]
    node _rawIn_normDist_T_495 = bits(rawIn_fractIn_11, 11, 11) @[primitives.scala 91:52]
    node _rawIn_normDist_T_496 = bits(rawIn_fractIn_11, 12, 12) @[primitives.scala 91:52]
    node _rawIn_normDist_T_497 = bits(rawIn_fractIn_11, 13, 13) @[primitives.scala 91:52]
    node _rawIn_normDist_T_498 = bits(rawIn_fractIn_11, 14, 14) @[primitives.scala 91:52]
    node _rawIn_normDist_T_499 = bits(rawIn_fractIn_11, 15, 15) @[primitives.scala 91:52]
    node _rawIn_normDist_T_500 = bits(rawIn_fractIn_11, 16, 16) @[primitives.scala 91:52]
    node _rawIn_normDist_T_501 = bits(rawIn_fractIn_11, 17, 17) @[primitives.scala 91:52]
    node _rawIn_normDist_T_502 = bits(rawIn_fractIn_11, 18, 18) @[primitives.scala 91:52]
    node _rawIn_normDist_T_503 = bits(rawIn_fractIn_11, 19, 19) @[primitives.scala 91:52]
    node _rawIn_normDist_T_504 = bits(rawIn_fractIn_11, 20, 20) @[primitives.scala 91:52]
    node _rawIn_normDist_T_505 = bits(rawIn_fractIn_11, 21, 21) @[primitives.scala 91:52]
    node _rawIn_normDist_T_506 = bits(rawIn_fractIn_11, 22, 22) @[primitives.scala 91:52]
    node _rawIn_normDist_T_507 = mux(_rawIn_normDist_T_485, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _rawIn_normDist_T_508 = mux(_rawIn_normDist_T_486, UInt<5>("h14"), _rawIn_normDist_T_507) @[Mux.scala 47:70]
    node _rawIn_normDist_T_509 = mux(_rawIn_normDist_T_487, UInt<5>("h13"), _rawIn_normDist_T_508) @[Mux.scala 47:70]
    node _rawIn_normDist_T_510 = mux(_rawIn_normDist_T_488, UInt<5>("h12"), _rawIn_normDist_T_509) @[Mux.scala 47:70]
    node _rawIn_normDist_T_511 = mux(_rawIn_normDist_T_489, UInt<5>("h11"), _rawIn_normDist_T_510) @[Mux.scala 47:70]
    node _rawIn_normDist_T_512 = mux(_rawIn_normDist_T_490, UInt<5>("h10"), _rawIn_normDist_T_511) @[Mux.scala 47:70]
    node _rawIn_normDist_T_513 = mux(_rawIn_normDist_T_491, UInt<4>("hf"), _rawIn_normDist_T_512) @[Mux.scala 47:70]
    node _rawIn_normDist_T_514 = mux(_rawIn_normDist_T_492, UInt<4>("he"), _rawIn_normDist_T_513) @[Mux.scala 47:70]
    node _rawIn_normDist_T_515 = mux(_rawIn_normDist_T_493, UInt<4>("hd"), _rawIn_normDist_T_514) @[Mux.scala 47:70]
    node _rawIn_normDist_T_516 = mux(_rawIn_normDist_T_494, UInt<4>("hc"), _rawIn_normDist_T_515) @[Mux.scala 47:70]
    node _rawIn_normDist_T_517 = mux(_rawIn_normDist_T_495, UInt<4>("hb"), _rawIn_normDist_T_516) @[Mux.scala 47:70]
    node _rawIn_normDist_T_518 = mux(_rawIn_normDist_T_496, UInt<4>("ha"), _rawIn_normDist_T_517) @[Mux.scala 47:70]
    node _rawIn_normDist_T_519 = mux(_rawIn_normDist_T_497, UInt<4>("h9"), _rawIn_normDist_T_518) @[Mux.scala 47:70]
    node _rawIn_normDist_T_520 = mux(_rawIn_normDist_T_498, UInt<4>("h8"), _rawIn_normDist_T_519) @[Mux.scala 47:70]
    node _rawIn_normDist_T_521 = mux(_rawIn_normDist_T_499, UInt<3>("h7"), _rawIn_normDist_T_520) @[Mux.scala 47:70]
    node _rawIn_normDist_T_522 = mux(_rawIn_normDist_T_500, UInt<3>("h6"), _rawIn_normDist_T_521) @[Mux.scala 47:70]
    node _rawIn_normDist_T_523 = mux(_rawIn_normDist_T_501, UInt<3>("h5"), _rawIn_normDist_T_522) @[Mux.scala 47:70]
    node _rawIn_normDist_T_524 = mux(_rawIn_normDist_T_502, UInt<3>("h4"), _rawIn_normDist_T_523) @[Mux.scala 47:70]
    node _rawIn_normDist_T_525 = mux(_rawIn_normDist_T_503, UInt<2>("h3"), _rawIn_normDist_T_524) @[Mux.scala 47:70]
    node _rawIn_normDist_T_526 = mux(_rawIn_normDist_T_504, UInt<2>("h2"), _rawIn_normDist_T_525) @[Mux.scala 47:70]
    node _rawIn_normDist_T_527 = mux(_rawIn_normDist_T_505, UInt<1>("h1"), _rawIn_normDist_T_526) @[Mux.scala 47:70]
    node rawIn_normDist_11 = mux(_rawIn_normDist_T_506, UInt<1>("h0"), _rawIn_normDist_T_527) @[Mux.scala 47:70]
    node _rawIn_subnormFract_T_22 = dshl(rawIn_fractIn_11, rawIn_normDist_11) @[rawFloatFromFN.scala 52:33]
    node _rawIn_subnormFract_T_23 = bits(_rawIn_subnormFract_T_22, 21, 0) @[rawFloatFromFN.scala 52:46]
    node rawIn_subnormFract_11 = shl(_rawIn_subnormFract_T_23, 1) @[rawFloatFromFN.scala 52:64]
    node _rawIn_adjustedExp_T_55 = xor(rawIn_normDist_11, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _rawIn_adjustedExp_T_56 = mux(rawIn_isZeroExpIn_11, _rawIn_adjustedExp_T_55, rawIn_expIn_11) @[rawFloatFromFN.scala 54:10]
    node _rawIn_adjustedExp_T_57 = mux(rawIn_isZeroExpIn_11, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _rawIn_adjustedExp_T_58 = or(UInt<8>("h80"), _rawIn_adjustedExp_T_57) @[rawFloatFromFN.scala 58:9]
    node _rawIn_adjustedExp_T_59 = add(_rawIn_adjustedExp_T_56, _rawIn_adjustedExp_T_58) @[rawFloatFromFN.scala 57:9]
    node rawIn_adjustedExp_11 = tail(_rawIn_adjustedExp_T_59, 1) @[rawFloatFromFN.scala 57:9]
    node rawIn_isZero_11 = and(rawIn_isZeroExpIn_11, rawIn_isZeroFractIn_11) @[rawFloatFromFN.scala 60:30]
    node _rawIn_isSpecial_T_11 = bits(rawIn_adjustedExp_11, 8, 7) @[rawFloatFromFN.scala 61:32]
    node rawIn_isSpecial_11 = eq(_rawIn_isSpecial_T_11, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire rawIn_11 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _rawIn_out_isNaN_T_22 = eq(rawIn_isZeroFractIn_11, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _rawIn_out_isNaN_T_23 = and(rawIn_isSpecial_11, _rawIn_out_isNaN_T_22) @[rawFloatFromFN.scala 64:28]
    rawIn_11.isNaN <= _rawIn_out_isNaN_T_23 @[rawFloatFromFN.scala 64:15]
    node _rawIn_out_isInf_T_11 = and(rawIn_isSpecial_11, rawIn_isZeroFractIn_11) @[rawFloatFromFN.scala 65:28]
    rawIn_11.isInf <= _rawIn_out_isInf_T_11 @[rawFloatFromFN.scala 65:15]
    rawIn_11.isZero <= rawIn_isZero_11 @[rawFloatFromFN.scala 66:16]
    rawIn_11.sign <= rawIn_sign_11 @[rawFloatFromFN.scala 67:14]
    node _rawIn_out_sExp_T_22 = bits(rawIn_adjustedExp_11, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _rawIn_out_sExp_T_23 = cvt(_rawIn_out_sExp_T_22) @[rawFloatFromFN.scala 68:42]
    rawIn_11.sExp <= _rawIn_out_sExp_T_23 @[rawFloatFromFN.scala 68:14]
    node _rawIn_out_sig_T_44 = eq(rawIn_isZero_11, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _rawIn_out_sig_T_45 = cat(UInt<1>("h0"), _rawIn_out_sig_T_44) @[rawFloatFromFN.scala 70:16]
    node _rawIn_out_sig_T_46 = mux(rawIn_isZeroExpIn_11, rawIn_subnormFract_11, rawIn_fractIn_11) @[rawFloatFromFN.scala 70:33]
    node _rawIn_out_sig_T_47 = cat(_rawIn_out_sig_T_45, _rawIn_out_sig_T_46) @[rawFloatFromFN.scala 70:27]
    rawIn_11.sig <= _rawIn_out_sig_T_47 @[rawFloatFromFN.scala 69:13]
    node _T_112 = bits(rawIn_11.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _T_113 = mux(rawIn_11.isZero, UInt<3>("h0"), _T_112) @[recFNFromFN.scala 48:15]
    node _T_114 = mux(rawIn_11.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_115 = or(_T_113, _T_114) @[recFNFromFN.scala 48:76]
    node _T_116 = cat(rawIn_11.sign, _T_115) @[recFNFromFN.scala 47:20]
    node _T_117 = bits(rawIn_11.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_118 = cat(_T_116, _T_117) @[recFNFromFN.scala 49:45]
    node _T_119 = bits(rawIn_11.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_120 = cat(_T_118, _T_119) @[recFNFromFN.scala 50:41]
    CompareRecFN.io.b <= _T_120 @[FPU.scala 82:15]
    MulAddRecFN_e8_s24.io.roundingMode <= io.rm @[FPU.scala 102:26]
    AddRecFN.io.roundingMode <= io.rm @[FPU.scala 102:26]
    MulRecFN.io.roundingMode <= io.rm @[FPU.scala 102:26]
    DivSqrtRecFM_small_e8_s24.io.roundingMode <= io.rm @[FPU.scala 102:26]
    RecFNToIN_e8_s24_i32.io.roundingMode <= io.rm @[FPU.scala 102:26]
    INToRecFN_i32_e8_s24.io.roundingMode <= io.rm @[FPU.scala 102:26]
    MulAddRecFN_e8_s24.io.detectTininess <= UInt<1>("h1") @[FPU.scala 102:26]
    AddRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 102:26]
    MulRecFN.io.detectTininess <= UInt<1>("h1") @[FPU.scala 102:26]
    DivSqrtRecFM_small_e8_s24.io.detectTininess <= UInt<1>("h1") @[FPU.scala 102:26]
    INToRecFN_i32_e8_s24.io.detectTininess <= UInt<1>("h1") @[FPU.scala 102:26]
    io.div_sqrt_ready <= DivSqrtRecFM_small_e8_s24.io.inReady @[FPU.scala 105:21]
    node _io_out_T = eq(io.aluOp, UInt<1>("h1")) @[FPU.scala 111:28]
    node _io_out_T_1 = eq(io.aluOp, UInt<2>("h2")) @[FPU.scala 111:28]
    node _io_out_T_2 = eq(io.aluOp, UInt<2>("h3")) @[FPU.scala 111:28]
    node _io_out_T_3 = eq(io.aluOp, UInt<3>("h4")) @[FPU.scala 111:28]
    node _io_out_T_4 = or(_io_out_T, _io_out_T_1) @[FPU.scala 111:46]
    node _io_out_T_5 = or(_io_out_T_4, _io_out_T_2) @[FPU.scala 111:46]
    node _io_out_T_6 = or(_io_out_T_5, _io_out_T_3) @[FPU.scala 111:46]
    node _io_out_T_7 = eq(io.aluOp, UInt<3>("h5")) @[FPU.scala 111:28]
    node _io_out_T_8 = eq(io.aluOp, UInt<3>("h6")) @[FPU.scala 111:28]
    node _io_out_T_9 = or(_io_out_T_7, _io_out_T_8) @[FPU.scala 111:46]
    node _io_out_T_10 = eq(io.aluOp, UInt<3>("h7")) @[FPU.scala 111:28]
    node _io_out_T_11 = eq(io.aluOp, UInt<4>("ha")) @[FPU.scala 113:20]
    node _io_out_T_12 = bits(io.in[1], 31, 31) @[FPU.scala 15:8]
    node _io_out_T_13 = bits(io.in[1], 31, 31) @[FPU.scala 16:9]
    node _io_out_T_14 = eq(_io_out_T_13, UInt<1>("h0")) @[FPU.scala 16:5]
    node _io_out_T_15 = bits(io.in[0], 31, 31) @[FPU.scala 17:8]
    node _io_out_T_16 = bits(io.in[1], 31, 31) @[FPU.scala 17:18]
    node _io_out_T_17 = xor(_io_out_T_15, _io_out_T_16) @[FPU.scala 17:13]
    node _io_out_T_18 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_19 = cat(_io_out_T_12, _io_out_T_18) @[FPU.scala 19:33]
    node _io_out_T_20 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_21 = cat(_io_out_T_14, _io_out_T_20) @[FPU.scala 19:33]
    node _io_out_T_22 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_23 = cat(_io_out_T_17, _io_out_T_22) @[FPU.scala 19:33]
    node _io_out_T_24 = eq(UInt<4>("ha"), UInt<4>("ha")) @[Mux.scala 81:61]
    node _io_out_T_25 = mux(_io_out_T_24, _io_out_T_19, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_out_T_26 = eq(UInt<4>("hb"), UInt<4>("ha")) @[Mux.scala 81:61]
    node _io_out_T_27 = mux(_io_out_T_26, _io_out_T_21, _io_out_T_25) @[Mux.scala 81:58]
    node _io_out_T_28 = eq(UInt<4>("hc"), UInt<4>("ha")) @[Mux.scala 81:61]
    node _io_out_T_29 = mux(_io_out_T_28, _io_out_T_23, _io_out_T_27) @[Mux.scala 81:58]
    node _io_out_T_30 = eq(io.aluOp, UInt<4>("hb")) @[FPU.scala 113:20]
    node _io_out_T_31 = bits(io.in[1], 31, 31) @[FPU.scala 15:8]
    node _io_out_T_32 = bits(io.in[1], 31, 31) @[FPU.scala 16:9]
    node _io_out_T_33 = eq(_io_out_T_32, UInt<1>("h0")) @[FPU.scala 16:5]
    node _io_out_T_34 = bits(io.in[0], 31, 31) @[FPU.scala 17:8]
    node _io_out_T_35 = bits(io.in[1], 31, 31) @[FPU.scala 17:18]
    node _io_out_T_36 = xor(_io_out_T_34, _io_out_T_35) @[FPU.scala 17:13]
    node _io_out_T_37 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_38 = cat(_io_out_T_31, _io_out_T_37) @[FPU.scala 19:33]
    node _io_out_T_39 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_40 = cat(_io_out_T_33, _io_out_T_39) @[FPU.scala 19:33]
    node _io_out_T_41 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_42 = cat(_io_out_T_36, _io_out_T_41) @[FPU.scala 19:33]
    node _io_out_T_43 = eq(UInt<4>("ha"), UInt<4>("hb")) @[Mux.scala 81:61]
    node _io_out_T_44 = mux(_io_out_T_43, _io_out_T_38, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_out_T_45 = eq(UInt<4>("hb"), UInt<4>("hb")) @[Mux.scala 81:61]
    node _io_out_T_46 = mux(_io_out_T_45, _io_out_T_40, _io_out_T_44) @[Mux.scala 81:58]
    node _io_out_T_47 = eq(UInt<4>("hc"), UInt<4>("hb")) @[Mux.scala 81:61]
    node _io_out_T_48 = mux(_io_out_T_47, _io_out_T_42, _io_out_T_46) @[Mux.scala 81:58]
    node _io_out_T_49 = eq(io.aluOp, UInt<4>("hc")) @[FPU.scala 113:20]
    node _io_out_T_50 = bits(io.in[1], 31, 31) @[FPU.scala 15:8]
    node _io_out_T_51 = bits(io.in[1], 31, 31) @[FPU.scala 16:9]
    node _io_out_T_52 = eq(_io_out_T_51, UInt<1>("h0")) @[FPU.scala 16:5]
    node _io_out_T_53 = bits(io.in[0], 31, 31) @[FPU.scala 17:8]
    node _io_out_T_54 = bits(io.in[1], 31, 31) @[FPU.scala 17:18]
    node _io_out_T_55 = xor(_io_out_T_53, _io_out_T_54) @[FPU.scala 17:13]
    node _io_out_T_56 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_57 = cat(_io_out_T_50, _io_out_T_56) @[FPU.scala 19:33]
    node _io_out_T_58 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_59 = cat(_io_out_T_52, _io_out_T_58) @[FPU.scala 19:33]
    node _io_out_T_60 = bits(io.in[0], 30, 0) @[FPU.scala 19:39]
    node _io_out_T_61 = cat(_io_out_T_55, _io_out_T_60) @[FPU.scala 19:33]
    node _io_out_T_62 = eq(UInt<4>("ha"), UInt<4>("hc")) @[Mux.scala 81:61]
    node _io_out_T_63 = mux(_io_out_T_62, _io_out_T_57, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_out_T_64 = eq(UInt<4>("hb"), UInt<4>("hc")) @[Mux.scala 81:61]
    node _io_out_T_65 = mux(_io_out_T_64, _io_out_T_59, _io_out_T_63) @[Mux.scala 81:58]
    node _io_out_T_66 = eq(UInt<4>("hc"), UInt<4>("hc")) @[Mux.scala 81:61]
    node _io_out_T_67 = mux(_io_out_T_66, _io_out_T_61, _io_out_T_65) @[Mux.scala 81:58]
    node _io_out_T_68 = eq(io.aluOp, UInt<4>("hd")) @[FPU.scala 115:20]
    node _io_out_T_69 = or(CompareRecFN.io.eq, CompareRecFN.io.lt) @[FPU.scala 116:18]
    node _io_out_T_70 = mux(_io_out_T_69, io.in[0], io.in[1]) @[FPU.scala 116:10]
    node _io_out_T_71 = and(raw_in[0].isNaN, raw_in[1].isNaN) @[FPU.scala 117:26]
    node _io_out_T_72 = eq(io.in[0], UInt<32>("h80000000")) @[FPU.scala 121:33]
    node _io_out_T_73 = eq(io.in[1], UInt<32>("h80000000")) @[FPU.scala 121:33]
    node _io_out_T_74 = or(_io_out_T_72, _io_out_T_73) @[FPU.scala 121:56]
    node _io_out_T_75 = eq(io.in[0], UInt<1>("h0")) @[FPU.scala 122:33]
    node _io_out_T_76 = eq(io.in[1], UInt<1>("h0")) @[FPU.scala 122:33]
    node _io_out_T_77 = or(_io_out_T_75, _io_out_T_76) @[FPU.scala 122:56]
    node _io_out_T_78 = and(_io_out_T_74, _io_out_T_77) @[FPU.scala 123:20]
    node _io_out_T_79 = mux(_io_out_T_78, UInt<32>("h80000000"), _io_out_T_70) @[Mux.scala 101:16]
    node _io_out_T_80 = mux(raw_in[1].isNaN, io.in[0], _io_out_T_79) @[Mux.scala 101:16]
    node _io_out_T_81 = mux(raw_in[0].isNaN, io.in[1], _io_out_T_80) @[Mux.scala 101:16]
    node _io_out_T_82 = mux(_io_out_T_71, UInt<31>("h7fc00000"), _io_out_T_81) @[Mux.scala 101:16]
    node _io_out_T_83 = eq(io.aluOp, UInt<4>("he")) @[FPU.scala 115:20]
    node _io_out_T_84 = or(CompareRecFN.io.eq, CompareRecFN.io.gt) @[FPU.scala 116:18]
    node _io_out_T_85 = mux(_io_out_T_84, io.in[0], io.in[1]) @[FPU.scala 116:10]
    node _io_out_T_86 = and(raw_in[0].isNaN, raw_in[1].isNaN) @[FPU.scala 117:26]
    node _io_out_T_87 = eq(io.in[0], UInt<32>("h80000000")) @[FPU.scala 121:33]
    node _io_out_T_88 = eq(io.in[1], UInt<32>("h80000000")) @[FPU.scala 121:33]
    node _io_out_T_89 = or(_io_out_T_87, _io_out_T_88) @[FPU.scala 121:56]
    node _io_out_T_90 = eq(io.in[0], UInt<1>("h0")) @[FPU.scala 122:33]
    node _io_out_T_91 = eq(io.in[1], UInt<1>("h0")) @[FPU.scala 122:33]
    node _io_out_T_92 = or(_io_out_T_90, _io_out_T_91) @[FPU.scala 122:56]
    node _io_out_T_93 = and(_io_out_T_89, _io_out_T_92) @[FPU.scala 123:20]
    node _io_out_T_94 = mux(_io_out_T_93, UInt<1>("h0"), _io_out_T_85) @[Mux.scala 101:16]
    node _io_out_T_95 = mux(raw_in[1].isNaN, io.in[0], _io_out_T_94) @[Mux.scala 101:16]
    node _io_out_T_96 = mux(raw_in[0].isNaN, io.in[1], _io_out_T_95) @[Mux.scala 101:16]
    node _io_out_T_97 = mux(_io_out_T_86, UInt<31>("h7fc00000"), _io_out_T_96) @[Mux.scala 101:16]
    node _io_out_T_98 = eq(io.aluOp, UInt<4>("hf")) @[FPU.scala 127:20]
    node _io_out_T_99 = eq(io.aluOp, UInt<5>("h10")) @[FPU.scala 127:20]
    node _io_out_T_100 = eq(io.aluOp, UInt<5>("h11")) @[FPU.scala 129:20]
    node _io_out_T_101 = eq(io.aluOp, UInt<5>("h18")) @[FPU.scala 129:20]
    node _io_out_T_102 = eq(CompareRecFN.io.gt, UInt<1>("h0")) @[FPU.scala 130:31]
    node _io_out_T_103 = eq(io.aluOp, UInt<5>("h12")) @[FPU.scala 131:20]
    node _io_out_T_104 = or(raw_in[0].isNaN, raw_in[1].isNaN) @[FPU.scala 131:62]
    node _io_out_T_105 = mux(_io_out_T_104, UInt<1>("h0"), CompareRecFN.io.eq) @[FPU.scala 131:45]
    node _io_out_T_106 = eq(io.aluOp, UInt<5>("h13")) @[FPU.scala 131:20]
    node _io_out_T_107 = or(raw_in[0].isNaN, raw_in[1].isNaN) @[FPU.scala 131:62]
    node _io_out_T_108 = mux(_io_out_T_107, UInt<1>("h0"), CompareRecFN.io.lt) @[FPU.scala 131:45]
    node _io_out_T_109 = eq(io.aluOp, UInt<5>("h14")) @[FPU.scala 131:20]
    node _io_out_T_110 = or(raw_in[0].isNaN, raw_in[1].isNaN) @[FPU.scala 131:62]
    node _io_out_T_111 = mux(_io_out_T_110, UInt<1>("h0"), _io_out_T_102) @[FPU.scala 131:45]
    node _io_out_T_112 = eq(io.aluOp, UInt<5>("h15")) @[FPU.scala 132:25]
    node io_out_rawIn_sign = bits(io.in[0], 31, 31) @[rawFloatFromFN.scala 44:18]
    node io_out_rawIn_expIn = bits(io.in[0], 30, 23) @[rawFloatFromFN.scala 45:19]
    node io_out_rawIn_fractIn = bits(io.in[0], 22, 0) @[rawFloatFromFN.scala 46:21]
    node io_out_rawIn_isZeroExpIn = eq(io_out_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 48:30]
    node io_out_rawIn_isZeroFractIn = eq(io_out_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 49:34]
    node _io_out_rawIn_normDist_T = bits(io_out_rawIn_fractIn, 0, 0) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_1 = bits(io_out_rawIn_fractIn, 1, 1) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_2 = bits(io_out_rawIn_fractIn, 2, 2) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_3 = bits(io_out_rawIn_fractIn, 3, 3) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_4 = bits(io_out_rawIn_fractIn, 4, 4) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_5 = bits(io_out_rawIn_fractIn, 5, 5) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_6 = bits(io_out_rawIn_fractIn, 6, 6) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_7 = bits(io_out_rawIn_fractIn, 7, 7) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_8 = bits(io_out_rawIn_fractIn, 8, 8) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_9 = bits(io_out_rawIn_fractIn, 9, 9) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_10 = bits(io_out_rawIn_fractIn, 10, 10) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_11 = bits(io_out_rawIn_fractIn, 11, 11) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_12 = bits(io_out_rawIn_fractIn, 12, 12) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_13 = bits(io_out_rawIn_fractIn, 13, 13) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_14 = bits(io_out_rawIn_fractIn, 14, 14) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_15 = bits(io_out_rawIn_fractIn, 15, 15) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_16 = bits(io_out_rawIn_fractIn, 16, 16) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_17 = bits(io_out_rawIn_fractIn, 17, 17) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_18 = bits(io_out_rawIn_fractIn, 18, 18) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_19 = bits(io_out_rawIn_fractIn, 19, 19) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_20 = bits(io_out_rawIn_fractIn, 20, 20) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_21 = bits(io_out_rawIn_fractIn, 21, 21) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_22 = bits(io_out_rawIn_fractIn, 22, 22) @[primitives.scala 91:52]
    node _io_out_rawIn_normDist_T_23 = mux(_io_out_rawIn_normDist_T_1, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_24 = mux(_io_out_rawIn_normDist_T_2, UInt<5>("h14"), _io_out_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_25 = mux(_io_out_rawIn_normDist_T_3, UInt<5>("h13"), _io_out_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_26 = mux(_io_out_rawIn_normDist_T_4, UInt<5>("h12"), _io_out_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_27 = mux(_io_out_rawIn_normDist_T_5, UInt<5>("h11"), _io_out_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_28 = mux(_io_out_rawIn_normDist_T_6, UInt<5>("h10"), _io_out_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_29 = mux(_io_out_rawIn_normDist_T_7, UInt<4>("hf"), _io_out_rawIn_normDist_T_28) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_30 = mux(_io_out_rawIn_normDist_T_8, UInt<4>("he"), _io_out_rawIn_normDist_T_29) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_31 = mux(_io_out_rawIn_normDist_T_9, UInt<4>("hd"), _io_out_rawIn_normDist_T_30) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_32 = mux(_io_out_rawIn_normDist_T_10, UInt<4>("hc"), _io_out_rawIn_normDist_T_31) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_33 = mux(_io_out_rawIn_normDist_T_11, UInt<4>("hb"), _io_out_rawIn_normDist_T_32) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_34 = mux(_io_out_rawIn_normDist_T_12, UInt<4>("ha"), _io_out_rawIn_normDist_T_33) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_35 = mux(_io_out_rawIn_normDist_T_13, UInt<4>("h9"), _io_out_rawIn_normDist_T_34) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_36 = mux(_io_out_rawIn_normDist_T_14, UInt<4>("h8"), _io_out_rawIn_normDist_T_35) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_37 = mux(_io_out_rawIn_normDist_T_15, UInt<3>("h7"), _io_out_rawIn_normDist_T_36) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_38 = mux(_io_out_rawIn_normDist_T_16, UInt<3>("h6"), _io_out_rawIn_normDist_T_37) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_39 = mux(_io_out_rawIn_normDist_T_17, UInt<3>("h5"), _io_out_rawIn_normDist_T_38) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_40 = mux(_io_out_rawIn_normDist_T_18, UInt<3>("h4"), _io_out_rawIn_normDist_T_39) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_41 = mux(_io_out_rawIn_normDist_T_19, UInt<2>("h3"), _io_out_rawIn_normDist_T_40) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_42 = mux(_io_out_rawIn_normDist_T_20, UInt<2>("h2"), _io_out_rawIn_normDist_T_41) @[Mux.scala 47:70]
    node _io_out_rawIn_normDist_T_43 = mux(_io_out_rawIn_normDist_T_21, UInt<1>("h1"), _io_out_rawIn_normDist_T_42) @[Mux.scala 47:70]
    node io_out_rawIn_normDist = mux(_io_out_rawIn_normDist_T_22, UInt<1>("h0"), _io_out_rawIn_normDist_T_43) @[Mux.scala 47:70]
    node _io_out_rawIn_subnormFract_T = dshl(io_out_rawIn_fractIn, io_out_rawIn_normDist) @[rawFloatFromFN.scala 52:33]
    node _io_out_rawIn_subnormFract_T_1 = bits(_io_out_rawIn_subnormFract_T, 21, 0) @[rawFloatFromFN.scala 52:46]
    node io_out_rawIn_subnormFract = shl(_io_out_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 52:64]
    node _io_out_rawIn_adjustedExp_T = xor(io_out_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 55:18]
    node _io_out_rawIn_adjustedExp_T_1 = mux(io_out_rawIn_isZeroExpIn, _io_out_rawIn_adjustedExp_T, io_out_rawIn_expIn) @[rawFloatFromFN.scala 54:10]
    node _io_out_rawIn_adjustedExp_T_2 = mux(io_out_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 58:14]
    node _io_out_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _io_out_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 58:9]
    node _io_out_rawIn_adjustedExp_T_4 = add(_io_out_rawIn_adjustedExp_T_1, _io_out_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 57:9]
    node io_out_rawIn_adjustedExp = tail(_io_out_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 57:9]
    node io_out_rawIn_isZero = and(io_out_rawIn_isZeroExpIn, io_out_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 60:30]
    node _io_out_rawIn_isSpecial_T = bits(io_out_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 61:32]
    node io_out_rawIn_isSpecial = eq(_io_out_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 61:57]
    wire io_out_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 63:19]
    node _io_out_rawIn_out_isNaN_T = eq(io_out_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 64:31]
    node _io_out_rawIn_out_isNaN_T_1 = and(io_out_rawIn_isSpecial, _io_out_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 64:28]
    io_out_rawIn.isNaN <= _io_out_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 64:15]
    node _io_out_rawIn_out_isInf_T = and(io_out_rawIn_isSpecial, io_out_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 65:28]
    io_out_rawIn.isInf <= _io_out_rawIn_out_isInf_T @[rawFloatFromFN.scala 65:15]
    io_out_rawIn.isZero <= io_out_rawIn_isZero @[rawFloatFromFN.scala 66:16]
    io_out_rawIn.sign <= io_out_rawIn_sign @[rawFloatFromFN.scala 67:14]
    node _io_out_rawIn_out_sExp_T = bits(io_out_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 68:28]
    node _io_out_rawIn_out_sExp_T_1 = cvt(_io_out_rawIn_out_sExp_T) @[rawFloatFromFN.scala 68:42]
    io_out_rawIn.sExp <= _io_out_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 68:14]
    node _io_out_rawIn_out_sig_T = eq(io_out_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 70:19]
    node _io_out_rawIn_out_sig_T_1 = cat(UInt<1>("h0"), _io_out_rawIn_out_sig_T) @[rawFloatFromFN.scala 70:16]
    node _io_out_rawIn_out_sig_T_2 = mux(io_out_rawIn_isZeroExpIn, io_out_rawIn_subnormFract, io_out_rawIn_fractIn) @[rawFloatFromFN.scala 70:33]
    node _io_out_rawIn_out_sig_T_3 = cat(_io_out_rawIn_out_sig_T_1, _io_out_rawIn_out_sig_T_2) @[rawFloatFromFN.scala 70:27]
    io_out_rawIn.sig <= _io_out_rawIn_out_sig_T_3 @[rawFloatFromFN.scala 69:13]
    node _io_out_T_113 = bits(io_out_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:50]
    node _io_out_T_114 = mux(io_out_rawIn.isZero, UInt<3>("h0"), _io_out_T_113) @[recFNFromFN.scala 48:15]
    node _io_out_T_115 = mux(io_out_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _io_out_T_116 = or(_io_out_T_114, _io_out_T_115) @[recFNFromFN.scala 48:76]
    node _io_out_T_117 = cat(io_out_rawIn.sign, _io_out_T_116) @[recFNFromFN.scala 47:20]
    node _io_out_T_118 = bits(io_out_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _io_out_T_119 = cat(_io_out_T_117, _io_out_T_118) @[recFNFromFN.scala 49:45]
    node _io_out_T_120 = bits(io_out_rawIn.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _io_out_T_121 = cat(_io_out_T_119, _io_out_T_120) @[recFNFromFN.scala 50:41]
    node io_out_rawIn_exp = bits(_io_out_T_121, 31, 23) @[rawFloatFromRecFN.scala 51:21]
    node _io_out_rawIn_isZero_T = bits(io_out_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 52:28]
    node io_out_rawIn_isZero_1 = eq(_io_out_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 52:53]
    node _io_out_rawIn_isSpecial_T_1 = bits(io_out_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 53:28]
    node io_out_rawIn_isSpecial_1 = eq(_io_out_rawIn_isSpecial_T_1, UInt<2>("h3")) @[rawFloatFromRecFN.scala 53:53]
    wire io_out_rawIn_1 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 55:23]
    node _io_out_rawIn_out_isNaN_T_2 = bits(io_out_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _io_out_rawIn_out_isNaN_T_3 = and(io_out_rawIn_isSpecial_1, _io_out_rawIn_out_isNaN_T_2) @[rawFloatFromRecFN.scala 56:33]
    io_out_rawIn_1.isNaN <= _io_out_rawIn_out_isNaN_T_3 @[rawFloatFromRecFN.scala 56:20]
    node _io_out_rawIn_out_isInf_T_1 = bits(io_out_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 57:41]
    node _io_out_rawIn_out_isInf_T_2 = eq(_io_out_rawIn_out_isInf_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 57:36]
    node _io_out_rawIn_out_isInf_T_3 = and(io_out_rawIn_isSpecial_1, _io_out_rawIn_out_isInf_T_2) @[rawFloatFromRecFN.scala 57:33]
    io_out_rawIn_1.isInf <= _io_out_rawIn_out_isInf_T_3 @[rawFloatFromRecFN.scala 57:20]
    io_out_rawIn_1.isZero <= io_out_rawIn_isZero_1 @[rawFloatFromRecFN.scala 58:20]
    node _io_out_rawIn_out_sign_T = bits(_io_out_T_121, 32, 32) @[rawFloatFromRecFN.scala 59:25]
    io_out_rawIn_1.sign <= _io_out_rawIn_out_sign_T @[rawFloatFromRecFN.scala 59:20]
    node _io_out_rawIn_out_sExp_T_2 = cvt(io_out_rawIn_exp) @[rawFloatFromRecFN.scala 60:27]
    io_out_rawIn_1.sExp <= _io_out_rawIn_out_sExp_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _io_out_rawIn_out_sig_T_4 = eq(io_out_rawIn_isZero_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 61:35]
    node _io_out_rawIn_out_sig_T_5 = cat(UInt<1>("h0"), _io_out_rawIn_out_sig_T_4) @[rawFloatFromRecFN.scala 61:32]
    node _io_out_rawIn_out_sig_T_6 = bits(_io_out_T_121, 22, 0) @[rawFloatFromRecFN.scala 61:49]
    node _io_out_rawIn_out_sig_T_7 = cat(_io_out_rawIn_out_sig_T_5, _io_out_rawIn_out_sig_T_6) @[rawFloatFromRecFN.scala 61:44]
    io_out_rawIn_1.sig <= _io_out_rawIn_out_sig_T_7 @[rawFloatFromRecFN.scala 61:20]
    node _io_out_isSigNaN_T = bits(io_out_rawIn_1.sig, 22, 22) @[common.scala 82:56]
    node _io_out_isSigNaN_T_1 = eq(_io_out_isSigNaN_T, UInt<1>("h0")) @[common.scala 82:49]
    node io_out_isSigNaN = and(io_out_rawIn_1.isNaN, _io_out_isSigNaN_T_1) @[common.scala 82:46]
    node _io_out_isFiniteNonzero_T = eq(io_out_rawIn_1.isNaN, UInt<1>("h0")) @[classifyRecFN.scala 50:37]
    node _io_out_isFiniteNonzero_T_1 = eq(io_out_rawIn_1.isInf, UInt<1>("h0")) @[classifyRecFN.scala 50:54]
    node _io_out_isFiniteNonzero_T_2 = and(_io_out_isFiniteNonzero_T, _io_out_isFiniteNonzero_T_1) @[classifyRecFN.scala 50:51]
    node _io_out_isFiniteNonzero_T_3 = eq(io_out_rawIn_1.isZero, UInt<1>("h0")) @[classifyRecFN.scala 50:71]
    node io_out_isFiniteNonzero = and(_io_out_isFiniteNonzero_T_2, _io_out_isFiniteNonzero_T_3) @[classifyRecFN.scala 50:68]
    node io_out_isSubnormal = lt(io_out_rawIn_1.sExp, asSInt(UInt<9>("h82"))) @[classifyRecFN.scala 51:44]
    node _io_out_T_122 = eq(io_out_isSigNaN, UInt<1>("h0")) @[classifyRecFN.scala 54:25]
    node _io_out_T_123 = and(io_out_rawIn_1.isNaN, _io_out_T_122) @[classifyRecFN.scala 54:22]
    node _io_out_T_124 = cat(_io_out_T_123, io_out_isSigNaN) @[classifyRecFN.scala 54:37]
    node _io_out_T_125 = eq(io_out_rawIn_1.sign, UInt<1>("h0")) @[classifyRecFN.scala 56:10]
    node _io_out_T_126 = and(_io_out_T_125, io_out_rawIn_1.isInf) @[classifyRecFN.scala 56:23]
    node _io_out_T_127 = cat(_io_out_T_124, _io_out_T_126) @[classifyRecFN.scala 55:18]
    node _io_out_T_128 = eq(io_out_rawIn_1.sign, UInt<1>("h0")) @[classifyRecFN.scala 57:10]
    node _io_out_T_129 = and(_io_out_T_128, io_out_isFiniteNonzero) @[classifyRecFN.scala 57:23]
    node _io_out_T_130 = eq(io_out_isSubnormal, UInt<1>("h0")) @[classifyRecFN.scala 57:45]
    node _io_out_T_131 = and(_io_out_T_129, _io_out_T_130) @[classifyRecFN.scala 57:42]
    node _io_out_T_132 = cat(_io_out_T_127, _io_out_T_131) @[classifyRecFN.scala 56:39]
    node _io_out_T_133 = eq(io_out_rawIn_1.sign, UInt<1>("h0")) @[classifyRecFN.scala 58:10]
    node _io_out_T_134 = and(_io_out_T_133, io_out_isFiniteNonzero) @[classifyRecFN.scala 58:23]
    node _io_out_T_135 = and(_io_out_T_134, io_out_isSubnormal) @[classifyRecFN.scala 58:42]
    node _io_out_T_136 = cat(_io_out_T_132, _io_out_T_135) @[classifyRecFN.scala 57:60]
    node _io_out_T_137 = eq(io_out_rawIn_1.sign, UInt<1>("h0")) @[classifyRecFN.scala 59:10]
    node _io_out_T_138 = and(_io_out_T_137, io_out_rawIn_1.isZero) @[classifyRecFN.scala 59:23]
    node _io_out_T_139 = cat(_io_out_T_136, _io_out_T_138) @[classifyRecFN.scala 58:60]
    node _io_out_T_140 = and(io_out_rawIn_1.sign, io_out_rawIn_1.isZero) @[classifyRecFN.scala 60:23]
    node _io_out_T_141 = cat(_io_out_T_139, _io_out_T_140) @[classifyRecFN.scala 59:40]
    node _io_out_T_142 = and(io_out_rawIn_1.sign, io_out_isFiniteNonzero) @[classifyRecFN.scala 61:23]
    node _io_out_T_143 = and(_io_out_T_142, io_out_isSubnormal) @[classifyRecFN.scala 61:42]
    node _io_out_T_144 = cat(_io_out_T_141, _io_out_T_143) @[classifyRecFN.scala 60:40]
    node _io_out_T_145 = and(io_out_rawIn_1.sign, io_out_isFiniteNonzero) @[classifyRecFN.scala 62:23]
    node _io_out_T_146 = eq(io_out_isSubnormal, UInt<1>("h0")) @[classifyRecFN.scala 62:45]
    node _io_out_T_147 = and(_io_out_T_145, _io_out_T_146) @[classifyRecFN.scala 62:42]
    node _io_out_T_148 = cat(_io_out_T_144, _io_out_T_147) @[classifyRecFN.scala 61:60]
    node _io_out_T_149 = and(io_out_rawIn_1.sign, io_out_rawIn_1.isInf) @[classifyRecFN.scala 63:23]
    node _io_out_T_150 = cat(_io_out_T_148, _io_out_T_149) @[classifyRecFN.scala 62:60]
    node _io_out_T_151 = eq(io.aluOp, UInt<5>("h16")) @[FPU.scala 137:20]
    node _io_out_T_152 = eq(io.aluOp, UInt<5>("h17")) @[FPU.scala 137:20]
    node _io_out_T_153 = or(DivSqrtRecFM_small_e8_s24.io.outValid_div, DivSqrtRecFM_small_e8_s24.io.outValid_sqrt) @[FPU.scala 138:33]
    node _io_out_T_154 = mux(_io_out_T_153, op_out_3, UInt<1>("h0")) @[Mux.scala 101:16]
    node _io_out_T_155 = mux(_io_out_T_152, op_out_4, _io_out_T_154) @[Mux.scala 101:16]
    node _io_out_T_156 = mux(_io_out_T_151, op_out_4, _io_out_T_155) @[Mux.scala 101:16]
    node _io_out_T_157 = mux(_io_out_T_112, _io_out_T_150, _io_out_T_156) @[Mux.scala 101:16]
    node _io_out_T_158 = mux(_io_out_T_109, _io_out_T_111, _io_out_T_157) @[Mux.scala 101:16]
    node _io_out_T_159 = mux(_io_out_T_106, _io_out_T_108, _io_out_T_158) @[Mux.scala 101:16]
    node _io_out_T_160 = mux(_io_out_T_103, _io_out_T_105, _io_out_T_159) @[Mux.scala 101:16]
    node _io_out_T_161 = mux(_io_out_T_101, io.in[0], _io_out_T_160) @[Mux.scala 101:16]
    node _io_out_T_162 = mux(_io_out_T_100, io.in[0], _io_out_T_161) @[Mux.scala 101:16]
    node _io_out_T_163 = mux(_io_out_T_99, RecFNToIN_e8_s24_i32.io.out, _io_out_T_162) @[Mux.scala 101:16]
    node _io_out_T_164 = mux(_io_out_T_98, RecFNToIN_e8_s24_i32.io.out, _io_out_T_163) @[Mux.scala 101:16]
    node _io_out_T_165 = mux(_io_out_T_83, _io_out_T_97, _io_out_T_164) @[Mux.scala 101:16]
    node _io_out_T_166 = mux(_io_out_T_68, _io_out_T_82, _io_out_T_165) @[Mux.scala 101:16]
    node _io_out_T_167 = mux(_io_out_T_49, _io_out_T_67, _io_out_T_166) @[Mux.scala 101:16]
    node _io_out_T_168 = mux(_io_out_T_30, _io_out_T_48, _io_out_T_167) @[Mux.scala 101:16]
    node _io_out_T_169 = mux(_io_out_T_11, _io_out_T_29, _io_out_T_168) @[Mux.scala 101:16]
    node _io_out_T_170 = mux(_io_out_T_10, op_out_2, _io_out_T_169) @[Mux.scala 101:16]
    node _io_out_T_171 = mux(_io_out_T_9, op_out_1, _io_out_T_170) @[Mux.scala 101:16]
    node _io_out_T_172 = mux(_io_out_T_6, op_out_0, _io_out_T_171) @[Mux.scala 101:16]
    io.out <= _io_out_T_172 @[FPU.scala 106:10]
    node _T_121 = eq(io.aluOp, UInt<1>("h1")) @[FPU.scala 147:28]
    node _T_122 = eq(io.aluOp, UInt<2>("h2")) @[FPU.scala 147:28]
    node _T_123 = eq(io.aluOp, UInt<2>("h3")) @[FPU.scala 147:28]
    node _T_124 = eq(io.aluOp, UInt<3>("h4")) @[FPU.scala 147:28]
    node _T_125 = or(_T_121, _T_122) @[FPU.scala 147:46]
    node _T_126 = or(_T_125, _T_123) @[FPU.scala 147:46]
    node _T_127 = or(_T_126, _T_124) @[FPU.scala 147:46]
    node _T_128 = eq(io.aluOp, UInt<3>("h5")) @[FPU.scala 147:28]
    node _T_129 = eq(io.aluOp, UInt<3>("h6")) @[FPU.scala 147:28]
    node _T_130 = or(_T_128, _T_129) @[FPU.scala 147:46]
    node _T_131 = eq(io.aluOp, UInt<3>("h7")) @[FPU.scala 147:28]
    node _T_132 = eq(io.aluOp, UInt<4>("hd")) @[FPU.scala 147:28]
    node _T_133 = eq(io.aluOp, UInt<4>("he")) @[FPU.scala 147:28]
    node _T_134 = eq(io.aluOp, UInt<5>("h12")) @[FPU.scala 147:28]
    node _T_135 = eq(io.aluOp, UInt<5>("h13")) @[FPU.scala 147:28]
    node _T_136 = eq(io.aluOp, UInt<5>("h14")) @[FPU.scala 147:28]
    node _T_137 = or(_T_132, _T_133) @[FPU.scala 147:46]
    node _T_138 = or(_T_137, _T_134) @[FPU.scala 147:46]
    node _T_139 = or(_T_138, _T_135) @[FPU.scala 147:46]
    node _T_140 = or(_T_139, _T_136) @[FPU.scala 147:46]
    node _T_141 = eq(io.aluOp, UInt<5>("h16")) @[FPU.scala 147:28]
    node _T_142 = eq(io.aluOp, UInt<5>("h17")) @[FPU.scala 147:28]
    node _T_143 = or(_T_141, _T_142) @[FPU.scala 147:46]
    node _T_144 = eq(io.aluOp, UInt<4>("hf")) @[FPU.scala 149:20]
    node _T_145 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 2, 2) @[FPU.scala 150:32]
    node _T_146 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 1, 1) @[FPU.scala 150:62]
    node _T_147 = or(_T_145, _T_146) @[FPU.scala 150:36]
    node _T_148 = cat(_T_147, UInt<1>("h0")) @[FPU.scala 150:67]
    node _T_149 = cat(_T_148, UInt<1>("h0")) @[FPU.scala 150:74]
    node _T_150 = cat(_T_149, UInt<1>("h0")) @[FPU.scala 150:81]
    node _T_151 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 0, 0) @[FPU.scala 150:115]
    node _T_152 = cat(_T_150, _T_151) @[FPU.scala 150:88]
    node _T_153 = eq(io.aluOp, UInt<5>("h10")) @[FPU.scala 149:20]
    node _T_154 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 2, 2) @[FPU.scala 150:32]
    node _T_155 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 1, 1) @[FPU.scala 150:62]
    node _T_156 = or(_T_154, _T_155) @[FPU.scala 150:36]
    node _T_157 = cat(_T_156, UInt<1>("h0")) @[FPU.scala 150:67]
    node _T_158 = cat(_T_157, UInt<1>("h0")) @[FPU.scala 150:74]
    node _T_159 = cat(_T_158, UInt<1>("h0")) @[FPU.scala 150:81]
    node _T_160 = bits(RecFNToIN_e8_s24_i32.io.intExceptionFlags, 0, 0) @[FPU.scala 150:115]
    node _T_161 = cat(_T_159, _T_160) @[FPU.scala 150:88]
    node _T_162 = or(DivSqrtRecFM_small_e8_s24.io.outValid_div, DivSqrtRecFM_small_e8_s24.io.outValid_sqrt) @[FPU.scala 152:33]
    node _T_163 = mux(_T_162, DivSqrtRecFM_small_e8_s24.io.exceptionFlags, UInt<1>("h0")) @[Mux.scala 101:16]
    node _T_164 = mux(_T_153, _T_161, _T_163) @[Mux.scala 101:16]
    node _T_165 = mux(_T_144, _T_152, _T_164) @[Mux.scala 101:16]
    node _T_166 = mux(_T_143, INToRecFN_i32_e8_s24.io.exceptionFlags, _T_165) @[Mux.scala 101:16]
    node _T_167 = mux(_T_140, CompareRecFN.io.exceptionFlags, _T_166) @[Mux.scala 101:16]
    node _T_168 = mux(_T_131, MulRecFN.io.exceptionFlags, _T_167) @[Mux.scala 101:16]
    node _T_169 = mux(_T_130, AddRecFN.io.exceptionFlags, _T_168) @[Mux.scala 101:16]
    node _T_170 = mux(_T_127, MulAddRecFN_e8_s24.io.exceptionFlags, _T_169) @[Mux.scala 101:16]
    node _T_171 = bits(_T_170, 0, 0) @[FPU.scala 152:79]
    node _T_172 = bits(_T_170, 1, 1) @[FPU.scala 152:79]
    node _T_173 = bits(_T_170, 2, 2) @[FPU.scala 152:79]
    node _T_174 = bits(_T_170, 3, 3) @[FPU.scala 152:79]
    node _T_175 = bits(_T_170, 4, 4) @[FPU.scala 152:79]
    io.exceptions[0] <= _T_171 @[FPU.scala 140:17]
    io.exceptions[1] <= _T_172 @[FPU.scala 140:17]
    io.exceptions[2] <= _T_173 @[FPU.scala 140:17]
    io.exceptions[3] <= _T_174 @[FPU.scala 140:17]
    io.exceptions[4] <= _T_175 @[FPU.scala 140:17]

  module Execute :
    input clock : Clock
    input reset : Reset
    output io : { flip immediate : UInt<32>, flip readData1 : UInt<32>, flip readData2 : UInt<32>, flip pcAddress : UInt<32>, flip func7 : UInt<7>, flip func3 : UInt<3>, flip mem_result : UInt<32>, flip wb_result : UInt<32>, flip ex_mem_regWrite : UInt<1>[2], flip mem_wb_regWrite : UInt<1>[2], flip id_ex_ins : UInt<32>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ctl_aluSrc : UInt<1>, flip ctl_aluOp : UInt<2>, flip ctl_aluSrc1 : UInt<2>, writeData : UInt<32>, ALUresult : UInt<32>, stall : UInt<1>, rs1_rdata : UInt<32>, flip f_read : UInt<1>[3], flip readData3 : UInt<32>, flip fcsr_o_data : UInt<32>, flip is_f_i : UInt<1>, is_f_o : UInt<1>, exceptions : UInt<1>[5]}

    inst alu of ALU @[Execute.scala 47:19]
    alu.clock <= clock
    alu.reset <= reset
    inst aluCtl of AluControl @[Execute.scala 48:22]
    aluCtl.clock <= clock
    aluCtl.reset <= reset
    inst ForwardingUnit of ForwardingUnit @[Execute.scala 49:18]
    ForwardingUnit.clock <= clock
    ForwardingUnit.reset <= reset
    ForwardingUnit.io.ex_regWrite <= io.ex_mem_regWrite @[Execute.scala 53:18]
    ForwardingUnit.io.mem_regWrite <= io.mem_wb_regWrite @[Execute.scala 54:19]
    node _T = bits(io.ex_mem_ins, 11, 7) @[Execute.scala 55:32]
    ForwardingUnit.io.ex_reg_rd <= _T @[Execute.scala 55:16]
    node _T_1 = bits(io.mem_wb_ins, 11, 7) @[Execute.scala 56:33]
    ForwardingUnit.io.mem_reg_rd <= _T_1 @[Execute.scala 56:17]
    node _T_2 = bits(io.id_ex_ins, 19, 15) @[Execute.scala 57:29]
    ForwardingUnit.io.reg_rs1 <= _T_2 @[Execute.scala 57:14]
    node _T_3 = bits(io.id_ex_ins, 24, 20) @[Execute.scala 58:29]
    ForwardingUnit.io.reg_rs2 <= _T_3 @[Execute.scala 58:14]
    ForwardingUnit.io.f_read <= io.f_read @[Execute.scala 60:19]
    node _T_4 = bits(io.id_ex_ins, 31, 27) @[Execute.scala 61:35]
    ForwardingUnit.io.reg_rs3 <= _T_4 @[Execute.scala 61:20]
    node _inputMux1_T = eq(ForwardingUnit.io.forwardA, UInt<1>("h0")) @[Execute.scala 67:20]
    node _inputMux1_T_1 = eq(ForwardingUnit.io.forwardA, UInt<1>("h1")) @[Execute.scala 68:20]
    node _inputMux1_T_2 = eq(ForwardingUnit.io.forwardA, UInt<2>("h2")) @[Execute.scala 69:20]
    node _inputMux1_T_3 = mux(_inputMux1_T_2, io.wb_result, UInt<1>("h0")) @[Mux.scala 101:16]
    node _inputMux1_T_4 = mux(_inputMux1_T_1, io.mem_result, _inputMux1_T_3) @[Mux.scala 101:16]
    node inputMux1 = mux(_inputMux1_T, io.readData1, _inputMux1_T_4) @[Mux.scala 101:16]
    node _inputMux2_T = eq(ForwardingUnit.io.forwardB, UInt<1>("h0")) @[Execute.scala 75:20]
    node _inputMux2_T_1 = eq(ForwardingUnit.io.forwardB, UInt<1>("h1")) @[Execute.scala 76:20]
    node _inputMux2_T_2 = eq(ForwardingUnit.io.forwardB, UInt<2>("h2")) @[Execute.scala 77:20]
    node _inputMux2_T_3 = mux(_inputMux2_T_2, io.wb_result, UInt<1>("h0")) @[Mux.scala 101:16]
    node _inputMux2_T_4 = mux(_inputMux2_T_1, io.mem_result, _inputMux2_T_3) @[Mux.scala 101:16]
    node inputMux2 = mux(_inputMux2_T, io.readData2, _inputMux2_T_4) @[Mux.scala 101:16]
    node _inputMux3_T = eq(UInt<1>("h0"), ForwardingUnit.io.forwardC) @[Mux.scala 81:61]
    node _inputMux3_T_1 = mux(_inputMux3_T, io.readData3, UInt<1>("h0")) @[Mux.scala 81:58]
    node _inputMux3_T_2 = eq(UInt<1>("h1"), ForwardingUnit.io.forwardC) @[Mux.scala 81:61]
    node _inputMux3_T_3 = mux(_inputMux3_T_2, io.mem_result, _inputMux3_T_1) @[Mux.scala 81:58]
    node _inputMux3_T_4 = eq(UInt<2>("h2"), ForwardingUnit.io.forwardC) @[Mux.scala 81:61]
    node inputMux3 = mux(_inputMux3_T_4, io.wb_result, _inputMux3_T_3) @[Mux.scala 81:58]
    node _aluIn1_T = eq(io.ctl_aluSrc1, UInt<1>("h1")) @[Execute.scala 89:23]
    node _aluIn1_T_1 = eq(io.ctl_aluSrc1, UInt<2>("h2")) @[Execute.scala 90:23]
    node _aluIn1_T_2 = mux(_aluIn1_T_1, UInt<1>("h0"), inputMux1) @[Mux.scala 101:16]
    node aluIn1 = mux(_aluIn1_T, io.pcAddress, _aluIn1_T_2) @[Mux.scala 101:16]
    node aluIn2 = mux(io.ctl_aluSrc, inputMux2, io.immediate) @[Execute.scala 93:19]
    aluCtl.io.f3 <= io.func3 @[Execute.scala 95:16]
    node _aluCtl_io_f7_T = bits(io.func7, 5, 5) @[Execute.scala 96:27]
    aluCtl.io.f7 <= _aluCtl_io_f7_T @[Execute.scala 96:16]
    aluCtl.io.aluOp <= io.ctl_aluOp @[Execute.scala 97:19]
    aluCtl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 98:20]
    alu.io.input1 <= aluIn1 @[Execute.scala 100:17]
    alu.io.input2 <= aluIn2 @[Execute.scala 101:17]
    alu.io.aluCtl <= aluCtl.io.out @[Execute.scala 102:17]
    inst mdu of MDU @[Execute.scala 107:32]
    mdu.clock <= clock
    mdu.reset <= reset
    reg src_a_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Execute.scala 108:38]
    reg src_b_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Execute.scala 109:38]
    reg op_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Execute.scala 110:38]
    reg div_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Execute.scala 111:38]
    reg f7_reg : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Execute.scala 112:38]
    reg counter : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Execute.scala 113:38]
    mdu.io.src_a <= aluIn1 @[Execute.scala 115:22]
    mdu.io.src_b <= aluIn2 @[Execute.scala 116:22]
    mdu.io.op <= io.func3 @[Execute.scala 117:22]
    node _T_5 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 121:19]
    node _T_6 = eq(io.func3, UInt<1>("h0")) @[Execute.scala 121:40]
    node _T_7 = eq(io.func3, UInt<1>("h1")) @[Execute.scala 121:60]
    node _T_8 = or(_T_6, _T_7) @[Execute.scala 121:48]
    node _T_9 = eq(io.func3, UInt<2>("h2")) @[Execute.scala 121:80]
    node _T_10 = or(_T_8, _T_9) @[Execute.scala 121:68]
    node _T_11 = eq(io.func3, UInt<2>("h3")) @[Execute.scala 121:100]
    node _T_12 = or(_T_10, _T_11) @[Execute.scala 121:88]
    node _T_13 = and(_T_5, _T_12) @[Execute.scala 121:27]
    when _T_13 : @[Execute.scala 121:109]
      mdu.io.valid <= UInt<1>("h1") @[Execute.scala 122:24]
    else :
      mdu.io.valid <= UInt<1>("h0") @[Execute.scala 124:24]
    node _T_14 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 127:19]
    node _T_15 = not(div_en) @[Execute.scala 127:30]
    node _T_16 = and(_T_14, _T_15) @[Execute.scala 127:27]
    node _T_17 = eq(io.func3, UInt<3>("h4")) @[Execute.scala 127:55]
    node _T_18 = eq(io.func3, UInt<3>("h5")) @[Execute.scala 127:75]
    node _T_19 = or(_T_17, _T_18) @[Execute.scala 127:63]
    node _T_20 = eq(io.func3, UInt<3>("h6")) @[Execute.scala 127:95]
    node _T_21 = or(_T_19, _T_20) @[Execute.scala 127:83]
    node _T_22 = eq(io.func3, UInt<3>("h7")) @[Execute.scala 127:115]
    node _T_23 = or(_T_21, _T_22) @[Execute.scala 127:103]
    node _T_24 = and(_T_16, _T_23) @[Execute.scala 127:42]
    when _T_24 : @[Execute.scala 127:124]
      reg mdu_io_valid_REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), mdu_io_valid_REG) @[Execute.scala 128:34]
      mdu_io_valid_REG <= UInt<1>("h1") @[Execute.scala 128:34]
      mdu.io.valid <= mdu_io_valid_REG @[Execute.scala 128:24]
      div_en <= UInt<1>("h1") @[Execute.scala 129:18]
      src_a_reg <= aluIn1 @[Execute.scala 130:21]
      src_b_reg <= aluIn2 @[Execute.scala 131:21]
      op_reg <= io.func3 @[Execute.scala 132:18]
      f7_reg <= io.func7 @[Execute.scala 133:18]
    when div_en : @[Execute.scala 138:21]
      node _T_25 = lt(counter, UInt<6>("h20")) @[Execute.scala 139:25]
      when _T_25 : @[Execute.scala 139:32]
        mdu.io.src_a <= src_a_reg @[Execute.scala 141:26]
        mdu.io.src_b <= src_b_reg @[Execute.scala 142:26]
        mdu.io.op <= op_reg @[Execute.scala 143:26]
        node _counter_T = add(counter, UInt<1>("h1")) @[Execute.scala 145:36]
        node _counter_T_1 = tail(_counter_T, 1) @[Execute.scala 145:36]
        counter <= _counter_T_1 @[Execute.scala 145:21]
      else :
        mdu.io.valid <= UInt<1>("h0") @[Execute.scala 147:26]
        div_en <= UInt<1>("h0") @[Execute.scala 148:26]
        mdu.io.src_a <= src_a_reg @[Execute.scala 149:26]
        mdu.io.src_b <= src_b_reg @[Execute.scala 150:26]
        mdu.io.op <= op_reg @[Execute.scala 151:26]
        counter <= UInt<1>("h0") @[Execute.scala 152:21]
    inst FPU of FPU @[Execute.scala 164:41]
    FPU.clock <= clock
    FPU.reset <= reset
    node _f_mono_cycle_inst_T = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_1 = eq(UInt<7>("h43"), _f_mono_cycle_inst_T) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_2 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_3 = eq(UInt<7>("h47"), _f_mono_cycle_inst_T_2) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_4 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_5 = eq(UInt<7>("h4b"), _f_mono_cycle_inst_T_4) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_6 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_7 = eq(UInt<7>("h4f"), _f_mono_cycle_inst_T_6) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_8 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_9 = eq(UInt<7>("h53"), _f_mono_cycle_inst_T_8) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_10 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_11 = eq(UInt<28>("h8000053"), _f_mono_cycle_inst_T_10) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_12 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_13 = eq(UInt<29>("h10000053"), _f_mono_cycle_inst_T_12) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_14 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_15 = eq(UInt<30>("h20000053"), _f_mono_cycle_inst_T_14) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_16 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_17 = eq(UInt<30>("h20001053"), _f_mono_cycle_inst_T_16) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_18 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_19 = eq(UInt<30>("h20002053"), _f_mono_cycle_inst_T_18) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_20 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_21 = eq(UInt<30>("h28000053"), _f_mono_cycle_inst_T_20) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_22 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_23 = eq(UInt<30>("h28001053"), _f_mono_cycle_inst_T_22) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_24 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_25 = eq(UInt<32>("hc0000053"), _f_mono_cycle_inst_T_24) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_26 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_27 = eq(UInt<32>("hc0100053"), _f_mono_cycle_inst_T_26) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_28 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_29 = eq(UInt<32>("he0000053"), _f_mono_cycle_inst_T_28) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_30 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_31 = eq(UInt<32>("ha0002053"), _f_mono_cycle_inst_T_30) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_32 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_33 = eq(UInt<32>("ha0001053"), _f_mono_cycle_inst_T_32) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_34 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_35 = eq(UInt<32>("ha0000053"), _f_mono_cycle_inst_T_34) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_36 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_37 = eq(UInt<32>("he0001053"), _f_mono_cycle_inst_T_36) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_38 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_39 = eq(UInt<32>("hd0000053"), _f_mono_cycle_inst_T_38) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_40 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_41 = eq(UInt<32>("hd0100053"), _f_mono_cycle_inst_T_40) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_42 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_43 = eq(UInt<32>("hf0000053"), _f_mono_cycle_inst_T_42) @[Execute.scala 189:12]
    node _f_mono_cycle_inst_T_44 = or(_f_mono_cycle_inst_T_1, _f_mono_cycle_inst_T_3) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_45 = or(_f_mono_cycle_inst_T_44, _f_mono_cycle_inst_T_5) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_46 = or(_f_mono_cycle_inst_T_45, _f_mono_cycle_inst_T_7) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_47 = or(_f_mono_cycle_inst_T_46, _f_mono_cycle_inst_T_9) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_48 = or(_f_mono_cycle_inst_T_47, _f_mono_cycle_inst_T_11) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_49 = or(_f_mono_cycle_inst_T_48, _f_mono_cycle_inst_T_13) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_50 = or(_f_mono_cycle_inst_T_49, _f_mono_cycle_inst_T_15) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_51 = or(_f_mono_cycle_inst_T_50, _f_mono_cycle_inst_T_17) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_52 = or(_f_mono_cycle_inst_T_51, _f_mono_cycle_inst_T_19) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_53 = or(_f_mono_cycle_inst_T_52, _f_mono_cycle_inst_T_21) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_54 = or(_f_mono_cycle_inst_T_53, _f_mono_cycle_inst_T_23) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_55 = or(_f_mono_cycle_inst_T_54, _f_mono_cycle_inst_T_25) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_56 = or(_f_mono_cycle_inst_T_55, _f_mono_cycle_inst_T_27) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_57 = or(_f_mono_cycle_inst_T_56, _f_mono_cycle_inst_T_29) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_58 = or(_f_mono_cycle_inst_T_57, _f_mono_cycle_inst_T_31) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_59 = or(_f_mono_cycle_inst_T_58, _f_mono_cycle_inst_T_33) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_60 = or(_f_mono_cycle_inst_T_59, _f_mono_cycle_inst_T_35) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_61 = or(_f_mono_cycle_inst_T_60, _f_mono_cycle_inst_T_37) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_62 = or(_f_mono_cycle_inst_T_61, _f_mono_cycle_inst_T_39) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_63 = or(_f_mono_cycle_inst_T_62, _f_mono_cycle_inst_T_41) @[Execute.scala 191:17]
    node _f_mono_cycle_inst_T_64 = or(_f_mono_cycle_inst_T_63, _f_mono_cycle_inst_T_43) @[Execute.scala 191:17]
    wire f_mono_cycle_inst : UInt<1> @[Execute.scala 165:47]
    f_mono_cycle_inst <= _f_mono_cycle_inst_T_64 @[Execute.scala 165:47]
    node _f_multi_cycle_inst_T = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 194:12]
    node _f_multi_cycle_inst_T_1 = eq(UInt<29>("h18000053"), _f_multi_cycle_inst_T) @[Execute.scala 194:12]
    node _f_multi_cycle_inst_T_2 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 194:12]
    node _f_multi_cycle_inst_T_3 = eq(UInt<31>("h58000053"), _f_multi_cycle_inst_T_2) @[Execute.scala 194:12]
    node f_multi_cycle_inst = or(_f_multi_cycle_inst_T_1, _f_multi_cycle_inst_T_3) @[Execute.scala 195:14]
    node _f_stall_T = eq(io.func7, UInt<4>("hc")) @[Execute.scala 196:39]
    node _f_stall_T_1 = eq(io.func7, UInt<6>("h2c")) @[Execute.scala 196:70]
    node _f_stall_T_2 = or(_f_stall_T, _f_stall_T_1) @[Execute.scala 196:57]
    node _f_stall_T_3 = eq(FPU.io.div_sqrt_ready, UInt<1>("h0")) @[Execute.scala 196:92]
    node f_stall = or(_f_stall_T_2, _f_stall_T_3) @[Execute.scala 196:88]
    node _T_26 = eq(io.func3, UInt<3>("h7")) @[Execute.scala 199:16]
    node _T_27 = bits(io.fcsr_o_data, 7, 5) @[Execute.scala 200:25]
    node _T_28 = mux(_T_26, _T_27, io.func3) @[Execute.scala 198:22]
    FPU.io.rm <= _T_28 @[Execute.scala 198:16]
    FPU.io.in[0] <= inputMux1 @[Execute.scala 204:29]
    FPU.io.in[1] <= inputMux2 @[Execute.scala 204:29]
    FPU.io.in[2] <= inputMux3 @[Execute.scala 204:29]
    node _T_29 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 232:18]
    node _T_30 = eq(UInt<7>("h43"), _T_29) @[Execute.scala 232:18]
    node _T_31 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 232:18]
    node _T_32 = eq(UInt<7>("h47"), _T_31) @[Execute.scala 232:18]
    node _T_33 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 232:18]
    node _T_34 = eq(UInt<7>("h4b"), _T_33) @[Execute.scala 232:18]
    node _T_35 = and(io.id_ex_ins, UInt<7>("h7f")) @[Execute.scala 232:18]
    node _T_36 = eq(UInt<7>("h4f"), _T_35) @[Execute.scala 232:18]
    node _T_37 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 232:18]
    node _T_38 = eq(UInt<7>("h53"), _T_37) @[Execute.scala 232:18]
    node _T_39 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 232:18]
    node _T_40 = eq(UInt<28>("h8000053"), _T_39) @[Execute.scala 232:18]
    node _T_41 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 232:18]
    node _T_42 = eq(UInt<29>("h10000053"), _T_41) @[Execute.scala 232:18]
    node _T_43 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 232:18]
    node _T_44 = eq(UInt<29>("h18000053"), _T_43) @[Execute.scala 232:18]
    node _T_45 = and(io.id_ex_ins, UInt<32>("hfe00007f")) @[Execute.scala 232:18]
    node _T_46 = eq(UInt<31>("h58000053"), _T_45) @[Execute.scala 232:18]
    node _T_47 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_48 = eq(UInt<30>("h20000053"), _T_47) @[Execute.scala 232:18]
    node _T_49 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_50 = eq(UInt<30>("h20001053"), _T_49) @[Execute.scala 232:18]
    node _T_51 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_52 = eq(UInt<30>("h20002053"), _T_51) @[Execute.scala 232:18]
    node _T_53 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_54 = eq(UInt<30>("h28000053"), _T_53) @[Execute.scala 232:18]
    node _T_55 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_56 = eq(UInt<30>("h28001053"), _T_55) @[Execute.scala 232:18]
    node _T_57 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 232:18]
    node _T_58 = eq(UInt<32>("hc0000053"), _T_57) @[Execute.scala 232:18]
    node _T_59 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 232:18]
    node _T_60 = eq(UInt<32>("hc0100053"), _T_59) @[Execute.scala 232:18]
    node _T_61 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_62 = eq(UInt<32>("he0000053"), _T_61) @[Execute.scala 232:18]
    node _T_63 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_64 = eq(UInt<32>("ha0002053"), _T_63) @[Execute.scala 232:18]
    node _T_65 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_66 = eq(UInt<32>("ha0001053"), _T_65) @[Execute.scala 232:18]
    node _T_67 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_68 = eq(UInt<32>("ha0000053"), _T_67) @[Execute.scala 232:18]
    node _T_69 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_70 = eq(UInt<32>("he0001053"), _T_69) @[Execute.scala 232:18]
    node _T_71 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 232:18]
    node _T_72 = eq(UInt<32>("hd0000053"), _T_71) @[Execute.scala 232:18]
    node _T_73 = and(io.id_ex_ins, UInt<32>("hfff0007f")) @[Execute.scala 232:18]
    node _T_74 = eq(UInt<32>("hd0100053"), _T_73) @[Execute.scala 232:18]
    node _T_75 = and(io.id_ex_ins, UInt<32>("hfe00707f")) @[Execute.scala 232:18]
    node _T_76 = eq(UInt<32>("hf0000053"), _T_75) @[Execute.scala 232:18]
    node _T_77 = mux(_T_76, UInt<5>("h18"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _T_78 = mux(_T_74, UInt<5>("h17"), _T_77) @[Mux.scala 101:16]
    node _T_79 = mux(_T_72, UInt<5>("h16"), _T_78) @[Mux.scala 101:16]
    node _T_80 = mux(_T_70, UInt<5>("h15"), _T_79) @[Mux.scala 101:16]
    node _T_81 = mux(_T_68, UInt<5>("h14"), _T_80) @[Mux.scala 101:16]
    node _T_82 = mux(_T_66, UInt<5>("h13"), _T_81) @[Mux.scala 101:16]
    node _T_83 = mux(_T_64, UInt<5>("h12"), _T_82) @[Mux.scala 101:16]
    node _T_84 = mux(_T_62, UInt<5>("h11"), _T_83) @[Mux.scala 101:16]
    node _T_85 = mux(_T_60, UInt<5>("h10"), _T_84) @[Mux.scala 101:16]
    node _T_86 = mux(_T_58, UInt<4>("hf"), _T_85) @[Mux.scala 101:16]
    node _T_87 = mux(_T_56, UInt<4>("he"), _T_86) @[Mux.scala 101:16]
    node _T_88 = mux(_T_54, UInt<4>("hd"), _T_87) @[Mux.scala 101:16]
    node _T_89 = mux(_T_52, UInt<4>("hc"), _T_88) @[Mux.scala 101:16]
    node _T_90 = mux(_T_50, UInt<4>("hb"), _T_89) @[Mux.scala 101:16]
    node _T_91 = mux(_T_48, UInt<4>("ha"), _T_90) @[Mux.scala 101:16]
    node _T_92 = mux(_T_46, UInt<4>("h9"), _T_91) @[Mux.scala 101:16]
    node _T_93 = mux(_T_44, UInt<4>("h8"), _T_92) @[Mux.scala 101:16]
    node _T_94 = mux(_T_42, UInt<3>("h7"), _T_93) @[Mux.scala 101:16]
    node _T_95 = mux(_T_40, UInt<3>("h6"), _T_94) @[Mux.scala 101:16]
    node _T_96 = mux(_T_38, UInt<3>("h5"), _T_95) @[Mux.scala 101:16]
    node _T_97 = mux(_T_36, UInt<3>("h4"), _T_96) @[Mux.scala 101:16]
    node _T_98 = mux(_T_34, UInt<2>("h3"), _T_97) @[Mux.scala 101:16]
    node _T_99 = mux(_T_32, UInt<2>("h2"), _T_98) @[Mux.scala 101:16]
    node _T_100 = mux(_T_30, UInt<1>("h1"), _T_99) @[Mux.scala 101:16]
    FPU.io.aluOp <= _T_100 @[Execute.scala 206:19]
    FPU.io.div_sqrt_valid <= f_multi_cycle_inst @[Execute.scala 234:28]
    io.exceptions <= FPU.io.exceptions @[Execute.scala 235:23]
    reg io_is_f_o_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_is_f_o_REG) @[Execute.scala 236:45]
    io_is_f_o_REG <= f_stall @[Execute.scala 236:45]
    node _io_is_f_o_T = or(io.is_f_i, io_is_f_o_REG) @[Execute.scala 236:36]
    io.is_f_o <= _io_is_f_o_T @[Execute.scala 236:19]
    node _io_ALUresult_T = eq(f7_reg, UInt<1>("h1")) @[Execute.scala 241:33]
    node _io_ALUresult_T_1 = and(div_en, _io_ALUresult_T) @[Execute.scala 241:19]
    node _io_ALUresult_T_2 = and(_io_ALUresult_T_1, mdu.io.ready) @[Execute.scala 241:41]
    node _io_ALUresult_T_3 = mux(mdu.io.output.valid, mdu.io.output.bits, UInt<1>("h0")) @[Execute.scala 241:68]
    node _io_ALUresult_T_4 = eq(io.func7, UInt<1>("h1")) @[Execute.scala 242:17]
    node _io_ALUresult_T_5 = and(_io_ALUresult_T_4, mdu.io.ready) @[Execute.scala 242:25]
    node _io_ALUresult_T_6 = mux(mdu.io.output.valid, mdu.io.output.bits, UInt<1>("h0")) @[Execute.scala 242:52]
    node _io_ALUresult_T_7 = mux(FPU.io.div_sqrt_valid_out, FPU.io.out, alu.io.result) @[Mux.scala 101:16]
    node _io_ALUresult_T_8 = mux(f_mono_cycle_inst, FPU.io.out, _io_ALUresult_T_7) @[Mux.scala 101:16]
    node _io_ALUresult_T_9 = mux(_io_ALUresult_T_5, _io_ALUresult_T_6, _io_ALUresult_T_8) @[Mux.scala 101:16]
    node _io_ALUresult_T_10 = mux(_io_ALUresult_T_2, _io_ALUresult_T_3, _io_ALUresult_T_9) @[Mux.scala 101:16]
    io.ALUresult <= _io_ALUresult_T_10 @[Execute.scala 239:16]
    node _io_stall_T = eq(io.func7, UInt<1>("h1")) @[Execute.scala 253:16]
    node _io_stall_T_1 = not(div_en) @[Execute.scala 253:27]
    node _io_stall_T_2 = and(_io_stall_T, _io_stall_T_1) @[Execute.scala 253:24]
    node _io_stall_T_3 = eq(io.func3, UInt<3>("h4")) @[Execute.scala 253:52]
    node _io_stall_T_4 = eq(io.func3, UInt<3>("h5")) @[Execute.scala 253:72]
    node _io_stall_T_5 = or(_io_stall_T_3, _io_stall_T_4) @[Execute.scala 253:60]
    node _io_stall_T_6 = eq(io.func3, UInt<3>("h6")) @[Execute.scala 253:92]
    node _io_stall_T_7 = or(_io_stall_T_5, _io_stall_T_6) @[Execute.scala 253:80]
    node _io_stall_T_8 = eq(io.func3, UInt<3>("h7")) @[Execute.scala 253:112]
    node _io_stall_T_9 = or(_io_stall_T_7, _io_stall_T_8) @[Execute.scala 253:100]
    node _io_stall_T_10 = and(_io_stall_T_2, _io_stall_T_9) @[Execute.scala 253:39]
    node _io_stall_T_11 = lt(counter, UInt<6>("h20")) @[Execute.scala 254:37]
    node _io_stall_T_12 = and(div_en, _io_stall_T_11) @[Execute.scala 254:22]
    node _io_stall_T_13 = or(_io_stall_T_10, _io_stall_T_12) @[Execute.scala 254:7]
    node _io_stall_T_14 = or(_io_stall_T_13, f_stall) @[Execute.scala 256:5]
    io.stall <= _io_stall_T_14 @[Execute.scala 251:12]
    io.writeData <= inputMux2 @[Execute.scala 260:16]
    io.rs1_rdata <= inputMux1 @[Execute.scala 263:22]

  module MemoryFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip aluResultIn : UInt<32>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, readData : UInt<32>, stall : UInt<1>, flip f3 : UInt<3>, dccmReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dccmRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, wmask : UInt<4>, baby_kyber : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, flip cio_babykyber_intr_key : UInt<1>, flip cio_babykyber_intr_encrypt : UInt<1>, flip cio_babykyber_intr_decrypt : UInt<1>}, key_enable_trigger : UInt<1>, encryption_enable_trigger : UInt<1>, decryption_enable_trigger : UInt<1>}

    node _io_key_enable_trigger_T = eq(io.aluResultIn, UInt<32>("h40007356")) @[MemoryFetch.scala 51:62]
    node _io_key_enable_trigger_T_1 = and(io.writeEnable, _io_key_enable_trigger_T) @[MemoryFetch.scala 51:43]
    io.key_enable_trigger <= _io_key_enable_trigger_T_1 @[MemoryFetch.scala 51:25]
    node _io_encryption_enable_trigger_T = eq(io.aluResultIn, UInt<32>("h40007360")) @[MemoryFetch.scala 52:69]
    node _io_encryption_enable_trigger_T_1 = and(io.writeEnable, _io_encryption_enable_trigger_T) @[MemoryFetch.scala 52:50]
    io.encryption_enable_trigger <= _io_encryption_enable_trigger_T_1 @[MemoryFetch.scala 52:32]
    node _io_decryption_enable_trigger_T = eq(io.aluResultIn, UInt<32>("h40007364")) @[MemoryFetch.scala 53:69]
    node _io_decryption_enable_trigger_T_1 = and(io.writeEnable, _io_decryption_enable_trigger_T) @[MemoryFetch.scala 53:50]
    io.decryption_enable_trigger <= _io_decryption_enable_trigger_T_1 @[MemoryFetch.scala 53:32]
    io.dccmRsp.ready <= UInt<1>("h1") @[MemoryFetch.scala 55:20]
    wire wdata : UInt<8>[4] @[MemoryFetch.scala 57:19]
    wire rdata : UInt<32> @[MemoryFetch.scala 58:19]
    reg offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MemoryFetch.scala 59:23]
    reg funct3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MemoryFetch.scala 60:23]
    node offsetSW = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 61:32]
    node _T = eq(io.dccmRsp.valid, UInt<1>("h0")) @[MemoryFetch.scala 63:8]
    when _T : @[MemoryFetch.scala 63:26]
      funct3 <= io.f3 @[MemoryFetch.scala 64:12]
      node _offset_T = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 65:29]
      offset <= _offset_T @[MemoryFetch.scala 65:12]
    else :
      funct3 <= funct3 @[MemoryFetch.scala 67:12]
      offset <= offset @[MemoryFetch.scala 68:12]
    node _wdata_0_T = bits(io.writeData, 7, 0) @[MemoryFetch.scala 71:27]
    wdata[0] <= _wdata_0_T @[MemoryFetch.scala 71:12]
    node _wdata_1_T = bits(io.writeData, 15, 8) @[MemoryFetch.scala 72:27]
    wdata[1] <= _wdata_1_T @[MemoryFetch.scala 72:12]
    node _wdata_2_T = bits(io.writeData, 23, 16) @[MemoryFetch.scala 73:27]
    wdata[2] <= _wdata_2_T @[MemoryFetch.scala 73:12]
    node _wdata_3_T = bits(io.writeData, 31, 24) @[MemoryFetch.scala 74:27]
    wdata[3] <= _wdata_3_T @[MemoryFetch.scala 74:12]
    node _T_1 = eq(io.f3, UInt<1>("h0")) @[MemoryFetch.scala 77:32]
    node _T_2 = and(io.writeEnable, _T_1) @[MemoryFetch.scala 77:23]
    when _T_2 : @[MemoryFetch.scala 77:45]
      node _T_3 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 78:19]
      when _T_3 : @[MemoryFetch.scala 78:27]
        io.dccmReq.bits.activeByteLane <= UInt<1>("h1") @[MemoryFetch.scala 79:38]
        io.wmask <= UInt<1>("h1") @[MemoryFetch.scala 80:20]
      else :
        node _T_4 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 81:25]
        when _T_4 : @[MemoryFetch.scala 81:33]
          node _wdata_0_T_1 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 82:31]
          wdata[0] <= _wdata_0_T_1 @[MemoryFetch.scala 82:16]
          node _wdata_1_T_1 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 83:31]
          wdata[1] <= _wdata_1_T_1 @[MemoryFetch.scala 83:16]
          node _wdata_2_T_1 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 84:31]
          wdata[2] <= _wdata_2_T_1 @[MemoryFetch.scala 84:16]
          node _wdata_3_T_1 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 85:31]
          wdata[3] <= _wdata_3_T_1 @[MemoryFetch.scala 85:16]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h2") @[MemoryFetch.scala 86:38]
          io.wmask <= UInt<2>("h2") @[MemoryFetch.scala 87:20]
        else :
          node _T_5 = eq(offsetSW, UInt<2>("h2")) @[MemoryFetch.scala 88:25]
          when _T_5 : @[MemoryFetch.scala 88:33]
            node _wdata_0_T_2 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 89:31]
            wdata[0] <= _wdata_0_T_2 @[MemoryFetch.scala 89:16]
            node _wdata_1_T_2 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 90:31]
            wdata[1] <= _wdata_1_T_2 @[MemoryFetch.scala 90:16]
            node _wdata_2_T_2 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 91:31]
            wdata[2] <= _wdata_2_T_2 @[MemoryFetch.scala 91:16]
            node _wdata_3_T_2 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 92:31]
            wdata[3] <= _wdata_3_T_2 @[MemoryFetch.scala 92:16]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h4") @[MemoryFetch.scala 93:38]
            io.wmask <= UInt<3>("h4") @[MemoryFetch.scala 94:20]
          else :
            node _wdata_0_T_3 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 96:31]
            wdata[0] <= _wdata_0_T_3 @[MemoryFetch.scala 96:16]
            node _wdata_1_T_3 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 97:31]
            wdata[1] <= _wdata_1_T_3 @[MemoryFetch.scala 97:16]
            node _wdata_2_T_3 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 98:31]
            wdata[2] <= _wdata_2_T_3 @[MemoryFetch.scala 98:16]
            node _wdata_3_T_3 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 99:31]
            wdata[3] <= _wdata_3_T_3 @[MemoryFetch.scala 99:16]
            io.dccmReq.bits.activeByteLane <= UInt<4>("h8") @[MemoryFetch.scala 100:38]
            io.wmask <= UInt<4>("h8") @[MemoryFetch.scala 101:20]
    else :
      node _T_6 = eq(io.f3, UInt<1>("h1")) @[MemoryFetch.scala 105:39]
      node _T_7 = and(io.writeEnable, _T_6) @[MemoryFetch.scala 105:30]
      when _T_7 : @[MemoryFetch.scala 105:52]
        node _T_8 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 107:19]
        when _T_8 : @[MemoryFetch.scala 107:27]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h3") @[MemoryFetch.scala 109:38]
          io.wmask <= UInt<2>("h3") @[MemoryFetch.scala 110:20]
        else :
          node _T_9 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 111:25]
          when _T_9 : @[MemoryFetch.scala 111:33]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h6") @[MemoryFetch.scala 113:38]
            io.wmask <= UInt<3>("h6") @[MemoryFetch.scala 114:20]
            node _wdata_0_T_4 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 115:31]
            wdata[0] <= _wdata_0_T_4 @[MemoryFetch.scala 115:16]
            node _wdata_1_T_4 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 116:31]
            wdata[1] <= _wdata_1_T_4 @[MemoryFetch.scala 116:16]
            node _wdata_2_T_4 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 117:31]
            wdata[2] <= _wdata_2_T_4 @[MemoryFetch.scala 117:16]
            node _wdata_3_T_4 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 118:31]
            wdata[3] <= _wdata_3_T_4 @[MemoryFetch.scala 118:16]
          else :
            io.dccmReq.bits.activeByteLane <= UInt<4>("hc") @[MemoryFetch.scala 121:38]
            io.wmask <= UInt<4>("hc") @[MemoryFetch.scala 122:20]
            node _wdata_2_T_5 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 123:31]
            wdata[2] <= _wdata_2_T_5 @[MemoryFetch.scala 123:16]
            node _wdata_3_T_5 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 124:31]
            wdata[3] <= _wdata_3_T_5 @[MemoryFetch.scala 124:16]
            node _wdata_0_T_5 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 125:31]
            wdata[0] <= _wdata_0_T_5 @[MemoryFetch.scala 125:16]
            node _wdata_1_T_5 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 126:31]
            wdata[1] <= _wdata_1_T_5 @[MemoryFetch.scala 126:16]
      else :
        io.dccmReq.bits.activeByteLane <= UInt<4>("hf") @[MemoryFetch.scala 131:36]
        node _io_wmask_T = mux(io.writeEnable, UInt<4>("hf"), UInt<1>("h0")) @[MemoryFetch.scala 132:24]
        io.wmask <= _io_wmask_T @[MemoryFetch.scala 132:18]
    node io_dccmReq_bits_dataRequest_lo = cat(wdata[1], wdata[0]) @[MemoryFetch.scala 135:40]
    node io_dccmReq_bits_dataRequest_hi = cat(wdata[3], wdata[2]) @[MemoryFetch.scala 135:40]
    node _io_dccmReq_bits_dataRequest_T = cat(io_dccmReq_bits_dataRequest_hi, io_dccmReq_bits_dataRequest_lo) @[MemoryFetch.scala 135:40]
    io.dccmReq.bits.dataRequest <= _io_dccmReq_bits_dataRequest_T @[MemoryFetch.scala 135:31]
    node _io_dccmReq_bits_addrRequest_T = and(io.aluResultIn, UInt<30>("h3fffffff")) @[MemoryFetch.scala 136:63]
    node _io_dccmReq_bits_addrRequest_T_1 = bits(_io_dccmReq_bits_addrRequest_T, 31, 2) @[MemoryFetch.scala 136:79]
    node _io_dccmReq_bits_addrRequest_T_2 = cat(UInt<1>("h0"), _io_dccmReq_bits_addrRequest_T_1) @[Cat.scala 33:92]
    io.dccmReq.bits.addrRequest <= _io_dccmReq_bits_addrRequest_T_2 @[MemoryFetch.scala 136:31]
    io.dccmReq.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 137:27]
    node _io_dccmReq_valid_T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 138:42]
    node _io_dccmReq_valid_T_1 = mux(_io_dccmReq_valid_T, UInt<1>("h1"), UInt<1>("h0")) @[MemoryFetch.scala 138:26]
    io.dccmReq.valid <= _io_dccmReq_valid_T_1 @[MemoryFetch.scala 138:20]
    node _io_stall_T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 140:31]
    node _io_stall_T_1 = eq(io.dccmRsp.valid, UInt<1>("h0")) @[MemoryFetch.scala 140:52]
    node _io_stall_T_2 = and(_io_stall_T, _io_stall_T_1) @[MemoryFetch.scala 140:49]
    io.stall <= _io_stall_T_2 @[MemoryFetch.scala 140:12]
    wire _rdata_WIRE : UInt<32> @[MemoryFetch.scala 142:15]
    _rdata_WIRE is invalid @[MemoryFetch.scala 142:15]
    node _rdata_T = mux(io.dccmRsp.valid, io.dccmRsp.bits.dataResponse, _rdata_WIRE) @[MemoryFetch.scala 142:15]
    rdata <= _rdata_T @[MemoryFetch.scala 142:9]
    node _babyKyberAddrRange_T = geq(io.aluResultIn, UInt<31>("h40007000")) @[MemoryFetch.scala 145:46]
    node _babyKyberAddrRange_T_1 = leq(io.aluResultIn, UInt<31>("h40007fff")) @[MemoryFetch.scala 145:83]
    node babyKyberAddrRange = and(_babyKyberAddrRange_T, _babyKyberAddrRange_T_1) @[MemoryFetch.scala 145:64]
    io.baby_kyber.req.bits.addrRequest <= UInt<1>("h0") @[MemoryFetch.scala 147:44]
    io.baby_kyber.req.bits.dataRequest <= UInt<1>("h0") @[MemoryFetch.scala 148:44]
    io.baby_kyber.req.bits.activeByteLane <= UInt<1>("h0") @[MemoryFetch.scala 149:47]
    io.baby_kyber.req.bits.isWrite <= UInt<1>("h0") @[MemoryFetch.scala 150:40]
    io.baby_kyber.req.valid <= UInt<1>("h0") @[MemoryFetch.scala 151:33]
    io.baby_kyber.rsp.ready <= UInt<1>("h0") @[MemoryFetch.scala 152:33]
    when babyKyberAddrRange : @[MemoryFetch.scala 154:30]
      io.baby_kyber.req.bits.addrRequest <= io.aluResultIn @[MemoryFetch.scala 155:46]
      io.baby_kyber.req.bits.dataRequest <= io.writeData @[MemoryFetch.scala 156:46]
      io.baby_kyber.req.bits.activeByteLane <= UInt<4>("hf") @[MemoryFetch.scala 157:49]
      io.baby_kyber.req.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 158:42]
      io.baby_kyber.req.valid <= UInt<1>("h1") @[MemoryFetch.scala 159:35]
      io.baby_kyber.rsp.ready <= UInt<1>("h1") @[MemoryFetch.scala 160:35]
    when io.readEnable : @[MemoryFetch.scala 164:23]
      node _T_10 = eq(funct3, UInt<2>("h2")) @[MemoryFetch.scala 165:17]
      when _T_10 : @[MemoryFetch.scala 165:31]
        io.readData <= rdata @[MemoryFetch.scala 167:19]
      else :
        node _T_11 = eq(funct3, UInt<1>("h0")) @[MemoryFetch.scala 169:24]
        when _T_11 : @[MemoryFetch.scala 169:38]
          node _T_12 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 171:21]
          when _T_12 : @[MemoryFetch.scala 171:34]
            node _io_readData_T = bits(rdata, 7, 7) @[MemoryFetch.scala 173:43]
            node _io_readData_T_1 = bits(_io_readData_T, 0, 0) @[Bitwise.scala 77:15]
            node _io_readData_T_2 = mux(_io_readData_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
            node _io_readData_T_3 = bits(rdata, 7, 0) @[MemoryFetch.scala 173:53]
            node _io_readData_T_4 = cat(_io_readData_T_2, _io_readData_T_3) @[Cat.scala 33:92]
            io.readData <= _io_readData_T_4 @[MemoryFetch.scala 173:23]
          else :
            node _T_13 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 174:28]
            when _T_13 : @[MemoryFetch.scala 174:41]
              node _io_readData_T_5 = bits(rdata, 15, 15) @[MemoryFetch.scala 176:44]
              node _io_readData_T_6 = bits(_io_readData_T_5, 0, 0) @[Bitwise.scala 77:15]
              node _io_readData_T_7 = mux(_io_readData_T_6, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_8 = bits(rdata, 15, 8) @[MemoryFetch.scala 176:55]
              node _io_readData_T_9 = cat(_io_readData_T_7, _io_readData_T_8) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_9 @[MemoryFetch.scala 176:23]
            else :
              node _T_14 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 177:28]
              when _T_14 : @[MemoryFetch.scala 177:41]
                node _io_readData_T_10 = bits(rdata, 23, 23) @[MemoryFetch.scala 179:44]
                node _io_readData_T_11 = bits(_io_readData_T_10, 0, 0) @[Bitwise.scala 77:15]
                node _io_readData_T_12 = mux(_io_readData_T_11, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_13 = bits(rdata, 23, 16) @[MemoryFetch.scala 179:55]
                node _io_readData_T_14 = cat(_io_readData_T_12, _io_readData_T_13) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_14 @[MemoryFetch.scala 179:23]
              else :
                node _T_15 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 180:28]
                when _T_15 : @[MemoryFetch.scala 180:41]
                  node _io_readData_T_15 = bits(rdata, 31, 31) @[MemoryFetch.scala 182:44]
                  node _io_readData_T_16 = bits(_io_readData_T_15, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_17 = mux(_io_readData_T_16, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_18 = bits(rdata, 31, 24) @[MemoryFetch.scala 182:55]
                  node _io_readData_T_19 = cat(_io_readData_T_17, _io_readData_T_18) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_19 @[MemoryFetch.scala 182:23]
                else :
                  io.readData is invalid @[MemoryFetch.scala 185:23]
        else :
          node _T_16 = eq(funct3, UInt<3>("h4")) @[MemoryFetch.scala 188:24]
          when _T_16 : @[MemoryFetch.scala 188:38]
            node _T_17 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 190:21]
            when _T_17 : @[MemoryFetch.scala 190:34]
              node _io_readData_T_20 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_21 = bits(rdata, 7, 0) @[MemoryFetch.scala 192:50]
              node _io_readData_T_22 = cat(_io_readData_T_20, _io_readData_T_21) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_22 @[MemoryFetch.scala 192:23]
            else :
              node _T_18 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 193:27]
              when _T_18 : @[MemoryFetch.scala 193:40]
                node _io_readData_T_23 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_24 = bits(rdata, 15, 8) @[MemoryFetch.scala 195:50]
                node _io_readData_T_25 = cat(_io_readData_T_23, _io_readData_T_24) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_25 @[MemoryFetch.scala 195:23]
              else :
                node _T_19 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 196:27]
                when _T_19 : @[MemoryFetch.scala 196:40]
                  node _io_readData_T_26 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_27 = bits(rdata, 23, 16) @[MemoryFetch.scala 198:50]
                  node _io_readData_T_28 = cat(_io_readData_T_26, _io_readData_T_27) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_28 @[MemoryFetch.scala 198:23]
                else :
                  node _T_20 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 199:27]
                  when _T_20 : @[MemoryFetch.scala 199:40]
                    node _io_readData_T_29 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_30 = bits(rdata, 31, 24) @[MemoryFetch.scala 201:50]
                    node _io_readData_T_31 = cat(_io_readData_T_29, _io_readData_T_30) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_31 @[MemoryFetch.scala 201:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 204:23]
          else :
            node _T_21 = eq(funct3, UInt<3>("h5")) @[MemoryFetch.scala 207:24]
            when _T_21 : @[MemoryFetch.scala 207:38]
              node _T_22 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 209:21]
              when _T_22 : @[MemoryFetch.scala 209:34]
                node _io_readData_T_32 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_33 = bits(rdata, 15, 0) @[MemoryFetch.scala 211:49]
                node _io_readData_T_34 = cat(_io_readData_T_32, _io_readData_T_33) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_34 @[MemoryFetch.scala 211:23]
              else :
                node _T_23 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 212:28]
                when _T_23 : @[MemoryFetch.scala 212:41]
                  node _io_readData_T_35 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_36 = bits(rdata, 23, 8) @[MemoryFetch.scala 214:49]
                  node _io_readData_T_37 = cat(_io_readData_T_35, _io_readData_T_36) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_37 @[MemoryFetch.scala 214:23]
                else :
                  node _T_24 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 215:28]
                  when _T_24 : @[MemoryFetch.scala 215:41]
                    node _io_readData_T_38 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_39 = bits(rdata, 31, 16) @[MemoryFetch.scala 217:49]
                    node _io_readData_T_40 = cat(_io_readData_T_38, _io_readData_T_39) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_40 @[MemoryFetch.scala 217:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 220:23]
            else :
              node _T_25 = eq(funct3, UInt<1>("h1")) @[MemoryFetch.scala 223:24]
              when _T_25 : @[MemoryFetch.scala 223:38]
                node _T_26 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 225:21]
                when _T_26 : @[MemoryFetch.scala 225:34]
                  node _io_readData_T_41 = bits(rdata, 15, 15) @[MemoryFetch.scala 227:44]
                  node _io_readData_T_42 = bits(_io_readData_T_41, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_43 = mux(_io_readData_T_42, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_44 = bits(rdata, 15, 0) @[MemoryFetch.scala 227:55]
                  node _io_readData_T_45 = cat(_io_readData_T_43, _io_readData_T_44) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_45 @[MemoryFetch.scala 227:23]
                else :
                  node _T_27 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 228:28]
                  when _T_27 : @[MemoryFetch.scala 228:41]
                    node _io_readData_T_46 = bits(rdata, 23, 23) @[MemoryFetch.scala 230:44]
                    node _io_readData_T_47 = bits(_io_readData_T_46, 0, 0) @[Bitwise.scala 77:15]
                    node _io_readData_T_48 = mux(_io_readData_T_47, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_49 = bits(rdata, 23, 8) @[MemoryFetch.scala 230:55]
                    node _io_readData_T_50 = cat(_io_readData_T_48, _io_readData_T_49) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_50 @[MemoryFetch.scala 230:23]
                  else :
                    node _T_28 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 231:28]
                    when _T_28 : @[MemoryFetch.scala 231:41]
                      node _io_readData_T_51 = bits(rdata, 31, 31) @[MemoryFetch.scala 233:44]
                      node _io_readData_T_52 = bits(_io_readData_T_51, 0, 0) @[Bitwise.scala 77:15]
                      node _io_readData_T_53 = mux(_io_readData_T_52, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                      node _io_readData_T_54 = bits(rdata, 31, 16) @[MemoryFetch.scala 233:55]
                      node _io_readData_T_55 = cat(_io_readData_T_53, _io_readData_T_54) @[Cat.scala 33:92]
                      io.readData <= _io_readData_T_55 @[MemoryFetch.scala 233:23]
                    else :
                      io.readData is invalid @[MemoryFetch.scala 236:23]
              else :
                io.readData is invalid @[MemoryFetch.scala 241:19]
    else :
      io.readData is invalid @[MemoryFetch.scala 244:17]
    node _T_29 = asUInt(reset) @[MemoryFetch.scala 253:9]
    node _T_30 = eq(_T_29, UInt<1>("h0")) @[MemoryFetch.scala 253:9]
    when _T_30 : @[MemoryFetch.scala 253:9]
      printf(clock, UInt<1>("h1"), "[MEMFETCH] writeEnable: %d, aluResultIn: 0x%x, writeData: 0x%x\n", io.writeEnable, io.aluResultIn, io.writeData) : printf @[MemoryFetch.scala 253:9]


  module PC :
    input clock : Clock
    input reset : Reset
    output io : { flip in : SInt<32>, flip halt : UInt<1>, out : SInt<32>, pc4 : SInt<32>, pc2 : SInt<32>}

    reg pc_reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("hfffffffc"))) @[PC.scala 13:23]
    pc_reg <= io.in @[PC.scala 14:10]
    io.out <= pc_reg @[PC.scala 15:10]
    node _io_pc4_T = add(pc_reg, asSInt(UInt<4>("h4"))) @[PC.scala 16:41]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[PC.scala 16:41]
    node _io_pc4_T_2 = asSInt(_io_pc4_T_1) @[PC.scala 16:41]
    node _io_pc4_T_3 = mux(io.halt, pc_reg, _io_pc4_T_2) @[PC.scala 16:16]
    io.pc4 <= _io_pc4_T_3 @[PC.scala 16:10]
    node _io_pc2_T = add(pc_reg, asSInt(UInt<3>("h2"))) @[PC.scala 17:41]
    node _io_pc2_T_1 = tail(_io_pc2_T, 1) @[PC.scala 17:41]
    node _io_pc2_T_2 = asSInt(_io_pc2_T_1) @[PC.scala 17:41]
    node _io_pc2_T_3 = mux(io.halt, pc_reg, _io_pc2_T_2) @[PC.scala 17:16]
    io.pc2 <= _io_pc2_T_3 @[PC.scala 17:10]

  module Core :
    input clock : Clock
    input reset : Reset
    output io : { pin : UInt<32>, flip stall : UInt<1>, dmemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dmemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, imemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip imemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, flip rvfi : { flip bool : UInt<1>, flip uint2 : UInt<2>, flip uint4 : UInt<4>, flip uint5 : UInt<5>[3], flip uint32 : UInt<32>[9]}, baby_kyber : { req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}, flip cio_babykyber_intr_key : UInt<1>, flip cio_babykyber_intr_encrypt : UInt<1>, flip cio_babykyber_intr_decrypt : UInt<1>}, key_enable_trigger : UInt<1>, encryption_enable_trigger : UInt<1>, decryption_enable_trigger : UInt<1>}

    reg if_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 39:26]
    reg if_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 40:27]
    reg id_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 43:26]
    reg id_reg_rd1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 44:27]
    reg id_reg_rd2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 45:27]
    reg id_reg_imm : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 46:27]
    reg id_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 47:27]
    reg id_reg_f7 : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Core.scala 48:26]
    reg id_reg_f3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Core.scala 49:26]
    reg id_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 50:27]
    reg id_reg_ctl_aluSrc : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 51:34]
    reg id_reg_ctl_aluSrc1 : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 52:35]
    reg id_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 53:36]
    wire _id_reg_ctl_regWrite_WIRE : UInt<1>[2] @[Core.scala 54:44]
    _id_reg_ctl_regWrite_WIRE[0] <= UInt<1>("h0") @[Core.scala 54:44]
    _id_reg_ctl_regWrite_WIRE[1] <= UInt<1>("h0") @[Core.scala 54:44]
    reg id_reg_ctl_regWrite : UInt<1>[2], clock with :
      reset => (reset, _id_reg_ctl_regWrite_WIRE) @[Core.scala 54:36]
    reg id_reg_ctl_memRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 55:35]
    reg id_reg_ctl_memWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 56:36]
    reg id_reg_ctl_branch : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 57:34]
    reg id_reg_ctl_aluOp : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 58:33]
    reg id_reg_ctl_jump : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 59:32]
    reg id_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 60:30]
    reg id_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 61:32]
    reg id_reg_f_read : UInt<1>[3], clock with :
      reset => (UInt<1>("h0"), id_reg_f_read) @[Core.scala 63:38]
    reg id_reg_rd3 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 64:39]
    reg id_reg_fcsr_o_data : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 65:47]
    reg id_reg_is_f : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 66:40]
    reg ex_reg_branch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 69:30]
    reg ex_reg_zero : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 70:28]
    reg ex_reg_result : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 71:30]
    reg ex_reg_wd : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 72:26]
    reg ex_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 73:27]
    reg ex_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 74:27]
    reg ex_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 75:36]
    wire _ex_reg_ctl_regWrite_WIRE : UInt<1>[2] @[Core.scala 76:44]
    _ex_reg_ctl_regWrite_WIRE[0] <= UInt<1>("h0") @[Core.scala 76:44]
    _ex_reg_ctl_regWrite_WIRE[1] <= UInt<1>("h0") @[Core.scala 76:44]
    reg ex_reg_ctl_regWrite : UInt<1>[2], clock with :
      reset => (reset, _ex_reg_ctl_regWrite_WIRE) @[Core.scala 76:36]
    reg ex_reg_ctl_memRead : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 77:35]
    reg ex_reg_ctl_memWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 78:36]
    reg ex_reg_ctl_branch_taken : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 79:40]
    reg ex_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 80:26]
    reg ex_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 81:30]
    reg ex_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 82:32]
    reg ex_reg_f_read : UInt<1>[3], clock with :
      reset => (UInt<1>("h0"), ex_reg_f_read) @[Core.scala 84:38]
    wire _ex_reg_f_except_WIRE : UInt<1>[5] @[Core.scala 85:52]
    _ex_reg_f_except_WIRE[0] <= UInt<1>("h0") @[Core.scala 85:52]
    _ex_reg_f_except_WIRE[1] <= UInt<1>("h0") @[Core.scala 85:52]
    _ex_reg_f_except_WIRE[2] <= UInt<1>("h0") @[Core.scala 85:52]
    _ex_reg_f_except_WIRE[3] <= UInt<1>("h0") @[Core.scala 85:52]
    _ex_reg_f_except_WIRE[4] <= UInt<1>("h0") @[Core.scala 85:52]
    reg ex_reg_f_except : UInt<1>[5], clock with :
      reset => (reset, _ex_reg_f_except_WIRE) @[Core.scala 85:44]
    reg ex_reg_is_f : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 86:40]
    reg mem_reg_rd : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 89:27]
    reg mem_reg_ins : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 90:28]
    reg mem_reg_result : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 91:31]
    reg mem_reg_branch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 92:31]
    reg mem_reg_wra : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core.scala 93:28]
    reg mem_reg_ctl_memToReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core.scala 94:37]
    wire _mem_reg_ctl_regWrite_WIRE : UInt<1>[2] @[Core.scala 95:45]
    _mem_reg_ctl_regWrite_WIRE[0] <= UInt<1>("h0") @[Core.scala 95:45]
    _mem_reg_ctl_regWrite_WIRE[1] <= UInt<1>("h0") @[Core.scala 95:45]
    reg mem_reg_ctl_regWrite : UInt<1>[2], clock with :
      reset => (reset, _mem_reg_ctl_regWrite_WIRE) @[Core.scala 95:37]
    reg mem_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 96:27]
    reg mem_reg_is_csr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 97:31]
    reg mem_reg_csr_data : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 98:33]
    reg mem_reg_f_read : UInt<1>[3], clock with :
      reset => (UInt<1>("h0"), mem_reg_f_read) @[Core.scala 100:39]
    wire _mem_reg_f_except_WIRE : UInt<1>[5] @[Core.scala 101:53]
    _mem_reg_f_except_WIRE[0] <= UInt<1>("h0") @[Core.scala 101:53]
    _mem_reg_f_except_WIRE[1] <= UInt<1>("h0") @[Core.scala 101:53]
    _mem_reg_f_except_WIRE[2] <= UInt<1>("h0") @[Core.scala 101:53]
    _mem_reg_f_except_WIRE[3] <= UInt<1>("h0") @[Core.scala 101:53]
    _mem_reg_f_except_WIRE[4] <= UInt<1>("h0") @[Core.scala 101:53]
    reg mem_reg_f_except : UInt<1>[5], clock with :
      reset => (reset, _mem_reg_f_except_WIRE) @[Core.scala 101:45]
    reg mem_reg_is_f : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 102:41]
    inst InstructionFetch of InstructionFetch @[Core.scala 105:18]
    InstructionFetch.clock <= clock
    InstructionFetch.reset <= reset
    inst InstructionDecode of InstructionDecode @[Core.scala 106:18]
    InstructionDecode.clock <= clock
    InstructionDecode.reset <= reset
    inst Execute of Execute @[Core.scala 107:18]
    Execute.clock <= clock
    Execute.reset <= reset
    inst MEM of MemoryFetch @[Core.scala 108:19]
    MEM.clock <= clock
    MEM.reset <= reset
    inst pc of PC @[Core.scala 115:18]
    pc.clock <= clock
    pc.reset <= reset
    io.imemReq.bits <= InstructionFetch.io.coreInstrReq.bits @[Core.scala 117:14]
    io.imemReq.valid <= InstructionFetch.io.coreInstrReq.valid @[Core.scala 117:14]
    InstructionFetch.io.coreInstrReq.ready <= io.imemReq.ready @[Core.scala 117:14]
    InstructionFetch.io.coreInstrResp <= io.imemRsp @[Core.scala 118:20]
    wire instruction : UInt<32> @[Core.scala 120:25]
    wire ral_halt_o : UInt<1> @[Core.scala 121:29]
    ral_halt_o <= UInt<1>("h0") @[Core.scala 121:29]
    wire is_comp : UInt<1> @[Core.scala 122:39]
    is_comp <= UInt<1>("h0") @[Core.scala 122:39]
    node _T = asUInt(pc.io.out) @[Core.scala 152:29]
    InstructionFetch.io.address <= _T @[Core.scala 152:16]
    instruction <= InstructionFetch.io.instruction @[Core.scala 153:17]
    node func3 = bits(instruction, 14, 12) @[Core.scala 157:26]
    wire func7 : UInt<7> @[Core.scala 158:19]
    node _T_1 = bits(instruction, 6, 0) @[Core.scala 159:20]
    node _T_2 = eq(_T_1, UInt<6>("h33")) @[Core.scala 159:26]
    node _T_3 = bits(instruction, 6, 0) @[Core.scala 159:59]
    node _T_4 = eq(_T_3, UInt<7>("h53")) @[Core.scala 159:66]
    node _T_5 = or(_T_2, _T_4) @[Core.scala 159:44]
    when _T_5 : @[Core.scala 159:84]
      node _func7_T = bits(instruction, 31, 25) @[Core.scala 160:25]
      func7 <= _func7_T @[Core.scala 160:11]
    else :
      func7 <= UInt<1>("h0") @[Core.scala 162:11]
    node _IF_stall_T = eq(func7, UInt<1>("h1")) @[Core.scala 166:11]
    node _IF_stall_T_1 = eq(func3, UInt<3>("h4")) @[Core.scala 166:29]
    node _IF_stall_T_2 = eq(func3, UInt<3>("h5")) @[Core.scala 166:46]
    node _IF_stall_T_3 = or(_IF_stall_T_1, _IF_stall_T_2) @[Core.scala 166:37]
    node _IF_stall_T_4 = eq(func3, UInt<3>("h6")) @[Core.scala 166:63]
    node _IF_stall_T_5 = or(_IF_stall_T_3, _IF_stall_T_4) @[Core.scala 166:54]
    node _IF_stall_T_6 = eq(func3, UInt<3>("h7")) @[Core.scala 166:80]
    node _IF_stall_T_7 = or(_IF_stall_T_5, _IF_stall_T_6) @[Core.scala 166:71]
    node _IF_stall_T_8 = and(_IF_stall_T, _IF_stall_T_7) @[Core.scala 166:19]
    node _IF_stall_T_9 = eq(func7, UInt<4>("hc")) @[Core.scala 167:16]
    node _IF_stall_T_10 = eq(func7, UInt<6>("h2c")) @[Core.scala 167:44]
    node _IF_stall_T_11 = or(_IF_stall_T_9, _IF_stall_T_10) @[Core.scala 167:34]
    node IF_stall = or(_IF_stall_T_8, _IF_stall_T_11) @[Core.scala 167:5]
    node _T_6 = or(io.stall, Execute.io.stall) @[Core.scala 169:24]
    node _T_7 = or(_T_6, InstructionDecode.io.stall) @[Core.scala 169:36]
    node _T_8 = or(_T_7, IF_stall) @[Core.scala 169:48]
    node _T_9 = or(_T_8, InstructionDecode.io.pcSrc) @[Core.scala 169:60]
    InstructionFetch.io.stall <= _T_9 @[Core.scala 169:12]
    node _halt_T = or(Execute.io.stall, InstructionDecode.io.stall) @[Core.scala 171:29]
    node _halt_T_1 = or(_halt_T, io.imemReq.valid) @[Core.scala 171:41]
    node _halt_T_2 = or(_halt_T_1, ral_halt_o) @[Core.scala 171:62]
    node halt = mux(_halt_T_2, UInt<1>("h1"), UInt<1>("h0")) @[Core.scala 171:17]
    pc.io.halt <= halt @[Core.scala 172:14]
    node _npc_T = asSInt(InstructionDecode.io.pcPlusOffset) @[Core.scala 177:23]
    node _npc_T_1 = mux(is_comp, pc.io.pc2, pc.io.pc4) @[Core.scala 178:10]
    node _npc_T_2 = mux(InstructionDecode.io.pcSrc, _npc_T, _npc_T_1) @[Core.scala 175:8]
    node npc = mux(InstructionDecode.io.hdu_pcWrite, _npc_T_2, pc.io.out) @[Core.scala 173:16]
    pc.io.in <= npc @[Core.scala 182:12]
    when InstructionDecode.io.hdu_if_reg_write : @[Core.scala 184:29]
      node _if_reg_pc_T = asUInt(pc.io.out) @[Core.scala 185:28]
      if_reg_pc <= _if_reg_pc_T @[Core.scala 185:15]
      if_reg_ins <= instruction @[Core.scala 186:16]
    when InstructionDecode.io.ifid_flush : @[Core.scala 188:23]
      if_reg_ins <= UInt<1>("h0") @[Core.scala 189:16]
    id_reg_rd1 <= InstructionDecode.io.readData1 @[Core.scala 197:14]
    id_reg_rd2 <= InstructionDecode.io.readData2 @[Core.scala 198:14]
    id_reg_imm <= InstructionDecode.io.immediate @[Core.scala 199:14]
    id_reg_wra <= InstructionDecode.io.writeRegAddress @[Core.scala 200:14]
    id_reg_f3 <= InstructionDecode.io.func3 @[Core.scala 201:13]
    id_reg_f7 <= InstructionDecode.io.func7 @[Core.scala 202:13]
    id_reg_ins <= if_reg_ins @[Core.scala 203:14]
    id_reg_pc <= if_reg_pc @[Core.scala 204:13]
    id_reg_ctl_aluSrc <= InstructionDecode.io.ctl_aluSrc @[Core.scala 205:21]
    id_reg_ctl_memToReg <= InstructionDecode.io.ctl_memToReg @[Core.scala 206:23]
    id_reg_ctl_regWrite <= InstructionDecode.io.ctl_regWrite @[Core.scala 207:23]
    id_reg_ctl_memRead <= InstructionDecode.io.ctl_memRead @[Core.scala 208:22]
    id_reg_ctl_memWrite <= InstructionDecode.io.ctl_memWrite @[Core.scala 209:23]
    id_reg_ctl_branch <= InstructionDecode.io.ctl_branch @[Core.scala 210:21]
    id_reg_ctl_aluOp <= InstructionDecode.io.ctl_aluOp @[Core.scala 211:20]
    id_reg_ctl_jump <= InstructionDecode.io.ctl_jump @[Core.scala 212:19]
    id_reg_ctl_aluSrc1 <= InstructionDecode.io.ctl_aluSrc1 @[Core.scala 213:22]
    id_reg_is_csr <= InstructionDecode.io.is_csr @[Core.scala 214:17]
    id_reg_csr_data <= InstructionDecode.io.csr_o_data @[Core.scala 215:19]
    InstructionDecode.io.id_instruction <= if_reg_ins @[Core.scala 216:21]
    InstructionDecode.io.pcAddress <= if_reg_pc @[Core.scala 217:16]
    InstructionDecode.io.dmem_resp_valid <= io.dmemRsp.valid @[Core.scala 218:22]
    InstructionDecode.io.ex_ins <= id_reg_ins @[Core.scala 220:13]
    InstructionDecode.io.ex_mem_ins <= ex_reg_ins @[Core.scala 221:17]
    InstructionDecode.io.mem_wb_ins <= mem_reg_ins @[Core.scala 222:17]
    InstructionDecode.io.ex_mem_result <= ex_reg_result @[Core.scala 223:20]
    InstructionDecode.io.csr_i_misa is invalid @[Core.scala 225:24]
    InstructionDecode.io.csr_i_mhartid is invalid @[Core.scala 226:24]
    InstructionDecode.io.id_ex_regWr <= id_reg_ctl_regWrite[0] @[Core.scala 227:18]
    InstructionDecode.io.ex_mem_regWr <= ex_reg_ctl_regWrite[0] @[Core.scala 228:19]
    id_reg_f_read <= InstructionDecode.io.f_read @[Core.scala 231:23]
    id_reg_rd3 <= InstructionDecode.io.readData3 @[Core.scala 232:20]
    id_reg_fcsr_o_data <= InstructionDecode.io.fcsr_o_data @[Core.scala 233:28]
    id_reg_is_f <= InstructionDecode.io.is_f @[Core.scala 234:21]
    InstructionDecode.io.f_read_reg[0][0] <= id_reg_f_read[0] @[Core.scala 236:31]
    InstructionDecode.io.f_read_reg[1][0] <= ex_reg_f_read[0] @[Core.scala 237:31]
    InstructionDecode.io.f_read_reg[2][0] <= mem_reg_f_read[0] @[Core.scala 238:31]
    InstructionDecode.io.f_read_reg[0][1] <= id_reg_f_read[1] @[Core.scala 236:31]
    InstructionDecode.io.f_read_reg[1][1] <= ex_reg_f_read[1] @[Core.scala 237:31]
    InstructionDecode.io.f_read_reg[2][1] <= mem_reg_f_read[1] @[Core.scala 238:31]
    Execute.io.immediate <= id_reg_imm @[Core.scala 248:16]
    Execute.io.readData1 <= id_reg_rd1 @[Core.scala 249:16]
    Execute.io.readData2 <= id_reg_rd2 @[Core.scala 250:16]
    Execute.io.pcAddress <= id_reg_pc @[Core.scala 251:16]
    Execute.io.func3 <= id_reg_f3 @[Core.scala 252:12]
    Execute.io.func7 <= id_reg_f7 @[Core.scala 253:12]
    Execute.io.ctl_aluSrc <= id_reg_ctl_aluSrc @[Core.scala 254:17]
    Execute.io.ctl_aluOp <= id_reg_ctl_aluOp @[Core.scala 255:16]
    Execute.io.ctl_aluSrc1 <= id_reg_ctl_aluSrc1 @[Core.scala 256:18]
    ex_reg_pc <= id_reg_pc @[Core.scala 259:13]
    ex_reg_wra <= id_reg_wra @[Core.scala 260:14]
    ex_reg_ins <= id_reg_ins @[Core.scala 261:14]
    ex_reg_ctl_memToReg <= id_reg_ctl_memToReg @[Core.scala 262:23]
    ex_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 263:23]
    ex_reg_is_csr <= id_reg_is_csr @[Core.scala 264:17]
    ex_reg_csr_data <= id_reg_csr_data @[Core.scala 265:19]
    InstructionDecode.io.id_ex_mem_read <= id_reg_ctl_memRead @[Core.scala 266:21]
    InstructionDecode.io.ex_mem_mem_read <= ex_reg_ctl_memRead @[Core.scala 267:22]
    Execute.io.id_ex_ins <= id_reg_ins @[Core.scala 268:16]
    Execute.io.ex_mem_ins <= ex_reg_ins @[Core.scala 269:17]
    Execute.io.mem_wb_ins <= mem_reg_ins @[Core.scala 270:17]
    node _T_10 = bits(id_reg_ins, 11, 7) @[Core.scala 271:28]
    InstructionDecode.io.id_ex_rd <= _T_10 @[Core.scala 271:15]
    node _T_11 = bits(id_reg_ins, 6, 0) @[Core.scala 272:36]
    node _T_12 = eq(_T_11, UInt<7>("h63")) @[Core.scala 272:42]
    node _T_13 = mux(_T_12, UInt<1>("h1"), UInt<1>("h0")) @[Core.scala 272:25]
    InstructionDecode.io.id_ex_branch <= _T_13 @[Core.scala 272:19]
    node _T_14 = bits(ex_reg_ins, 11, 7) @[Core.scala 273:29]
    InstructionDecode.io.ex_mem_rd <= _T_14 @[Core.scala 273:16]
    InstructionDecode.io.ex_result <= Execute.io.ALUresult @[Core.scala 274:16]
    InstructionDecode.io.csr_Ex <= id_reg_is_csr @[Core.scala 275:13]
    InstructionDecode.io.csr_Ex_data <= id_reg_csr_data @[Core.scala 276:18]
    InstructionDecode.io.ex_stall <= Execute.io.stall @[Core.scala 277:15]
    when Execute.io.stall : @[Core.scala 279:17]
      id_reg_wra <= id_reg_wra @[Core.scala 280:16]
      id_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 281:25]
    ex_reg_f_read <= id_reg_f_read @[Core.scala 285:23]
    Execute.io.f_read <= id_reg_f_read @[Core.scala 286:19]
    Execute.io.readData3 <= id_reg_rd3 @[Core.scala 287:22]
    Execute.io.fcsr_o_data <= id_reg_fcsr_o_data @[Core.scala 288:24]
    Execute.io.is_f_i <= id_reg_is_f @[Core.scala 289:19]
    ex_reg_f_except <= Execute.io.exceptions @[Core.scala 290:25]
    ex_reg_is_f <= Execute.io.is_f_o @[Core.scala 291:21]
    InstructionDecode.io.f_except[0] <= Execute.io.exceptions @[Core.scala 292:24]
    io.dmemReq.bits <= MEM.io.dccmReq.bits @[Core.scala 299:14]
    io.dmemReq.valid <= MEM.io.dccmReq.valid @[Core.scala 299:14]
    MEM.io.dccmReq.ready <= io.dmemReq.ready @[Core.scala 299:14]
    MEM.io.dccmRsp <= io.dmemRsp @[Core.scala 300:18]
    mem_reg_rd <= MEM.io.readData @[Core.scala 312:16]
    mem_reg_result <= ex_reg_result @[Core.scala 313:20]
    mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 315:26]
    mem_reg_ins <= ex_reg_ins @[Core.scala 316:17]
    mem_reg_pc <= ex_reg_pc @[Core.scala 317:16]
    ex_reg_ctl_memRead <= id_reg_ctl_memRead @[Core.scala 318:24]
    ex_reg_ctl_memWrite <= id_reg_ctl_memWrite @[Core.scala 319:25]
    ex_reg_wd <= Execute.io.writeData @[Core.scala 320:15]
    ex_reg_result <= Execute.io.ALUresult @[Core.scala 321:19]
    mem_reg_wra <= ex_reg_wra @[Core.scala 323:15]
    mem_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 324:24]
    mem_reg_is_csr <= ex_reg_is_csr @[Core.scala 325:18]
    mem_reg_csr_data <= ex_reg_csr_data @[Core.scala 326:20]
    Execute.io.ex_mem_regWrite <= ex_reg_ctl_regWrite @[Core.scala 327:22]
    MEM.io.aluResultIn <= ex_reg_result @[Core.scala 328:22]
    MEM.io.writeData <= ex_reg_wd @[Core.scala 329:20]
    MEM.io.readEnable <= ex_reg_ctl_memRead @[Core.scala 330:21]
    MEM.io.writeEnable <= ex_reg_ctl_memWrite @[Core.scala 331:22]
    node _MEM_io_f3_T = bits(ex_reg_ins, 14, 12) @[Core.scala 332:26]
    MEM.io.f3 <= _MEM_io_f3_T @[Core.scala 332:13]
    Execute.io.mem_result <= ex_reg_result @[Core.scala 333:17]
    InstructionDecode.io.csr_Mem <= ex_reg_is_csr @[Core.scala 334:14]
    InstructionDecode.io.csr_Mem_data <= ex_reg_csr_data @[Core.scala 335:19]
    mem_reg_f_read <= ex_reg_f_read @[Core.scala 338:24]
    mem_reg_f_except <= ex_reg_f_except @[Core.scala 339:26]
    mem_reg_is_f <= ex_reg_is_f @[Core.scala 340:22]
    InstructionDecode.io.f_except[1] <= ex_reg_f_except @[Core.scala 341:24]
    MEM.io.baby_kyber.cio_babykyber_intr_decrypt <= io.baby_kyber.cio_babykyber_intr_decrypt @[Core.scala 345:34]
    MEM.io.baby_kyber.cio_babykyber_intr_encrypt <= io.baby_kyber.cio_babykyber_intr_encrypt @[Core.scala 345:34]
    MEM.io.baby_kyber.cio_babykyber_intr_key <= io.baby_kyber.cio_babykyber_intr_key @[Core.scala 345:34]
    MEM.io.baby_kyber.rsp <= io.baby_kyber.rsp @[Core.scala 345:34]
    io.baby_kyber.req.bits <= MEM.io.baby_kyber.req.bits @[Core.scala 345:34]
    io.baby_kyber.req.valid <= MEM.io.baby_kyber.req.valid @[Core.scala 345:34]
    MEM.io.baby_kyber.req.ready <= io.baby_kyber.req.ready @[Core.scala 345:34]
    io.key_enable_trigger <= MEM.io.key_enable_trigger @[Core.scala 348:27]
    io.encryption_enable_trigger <= MEM.io.encryption_enable_trigger @[Core.scala 349:34]
    io.decryption_enable_trigger <= MEM.io.decryption_enable_trigger @[Core.scala 350:34]
    wire wb_data : UInt<32> @[Core.scala 357:31]
    wire wb_addr : UInt<5> @[Core.scala 358:21]
    node _T_15 = eq(mem_reg_ctl_memToReg, UInt<1>("h1")) @[Core.scala 360:29]
    when _T_15 : @[Core.scala 360:38]
      wb_data <= MEM.io.readData @[Core.scala 361:13]
      wb_addr <= mem_reg_wra @[Core.scala 362:13]
    else :
      node _T_16 = eq(mem_reg_ctl_memToReg, UInt<2>("h2")) @[Core.scala 363:35]
      when _T_16 : @[Core.scala 363:44]
        node _wb_data_T = add(mem_reg_pc, UInt<3>("h4")) @[Core.scala 364:28]
        node _wb_data_T_1 = tail(_wb_data_T, 1) @[Core.scala 364:28]
        wb_data <= _wb_data_T_1 @[Core.scala 364:15]
        wb_addr <= mem_reg_wra @[Core.scala 365:15]
      else :
        wb_data <= mem_reg_result @[Core.scala 368:15]
        wb_addr <= mem_reg_wra @[Core.scala 369:15]
    InstructionDecode.io.mem_wb_result <= wb_data @[Core.scala 372:20]
    InstructionDecode.io.writeData <= wb_data @[Core.scala 373:16]
    Execute.io.wb_result <= wb_data @[Core.scala 374:16]
    Execute.io.mem_wb_regWrite <= mem_reg_ctl_regWrite @[Core.scala 375:22]
    InstructionDecode.io.writeReg <= wb_addr @[Core.scala 376:15]
    InstructionDecode.io.ctl_writeEnable <= mem_reg_ctl_regWrite @[Core.scala 377:22]
    InstructionDecode.io.csr_Wb <= mem_reg_is_csr @[Core.scala 378:13]
    InstructionDecode.io.csr_Wb_data <= mem_reg_csr_data @[Core.scala 379:18]
    InstructionDecode.io.dmem_data <= io.dmemRsp.bits.dataResponse @[Core.scala 380:16]
    io.pin <= wb_data @[Core.scala 381:10]
    InstructionDecode.io.f_except[2] <= mem_reg_f_except @[Core.scala 384:24]
    InstructionDecode.io.is_f_in[0] <= Execute.io.is_f_o @[Core.scala 390:33]
    InstructionDecode.io.is_f_in[1] <= ex_reg_is_f @[Core.scala 390:33]
    InstructionDecode.io.is_f_in[2] <= mem_reg_is_f @[Core.scala 390:33]
    node _io_rvfi_bool_T = neq(mem_reg_ins, UInt<1>("h0")) @[Core.scala 398:38]
    node _io_rvfi_bool_T_1 = asUInt(clock) @[Core.scala 398:57]
    node _io_rvfi_bool_T_2 = bits(_io_rvfi_bool_T_1, 0, 0) @[Core.scala 398:57]
    node _io_rvfi_bool_T_3 = eq(_io_rvfi_bool_T_2, UInt<1>("h0")) @[Core.scala 398:50]
    node _io_rvfi_bool_T_4 = and(_io_rvfi_bool_T, _io_rvfi_bool_T_3) @[Core.scala 398:47]
    io.rvfi.bool <= _io_rvfi_bool_T_4 @[Core.scala 398:22]
    io.rvfi.uint2 <= UInt<2>("h3") @[Core.scala 399:23]
    reg io_rvfi_uint4_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint4_REG) @[Tracer.scala 87:14]
    io_rvfi_uint4_REG <= MEM.io.wmask @[Tracer.scala 87:14]
    io.rvfi.uint4 <= io_rvfi_uint4_REG @[Core.scala 400:23]
    reg io_rvfi_uint5_0_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_0_REG) @[Tracer.scala 87:14]
    io_rvfi_uint5_0_REG <= InstructionDecode.io.raddr[0] @[Tracer.scala 87:14]
    reg io_rvfi_uint5_0_REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_0_REG_1) @[Tracer.scala 89:14]
    io_rvfi_uint5_0_REG_1 <= io_rvfi_uint5_0_REG @[Tracer.scala 89:14]
    reg io_rvfi_uint5_0_REG_2 : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_0_REG_2) @[Tracer.scala 89:14]
    io_rvfi_uint5_0_REG_2 <= io_rvfi_uint5_0_REG_1 @[Tracer.scala 89:14]
    io.rvfi.uint5[0] <= io_rvfi_uint5_0_REG_2 @[Core.scala 403:36]
    reg io_rvfi_uint5_1_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_1_REG) @[Tracer.scala 87:14]
    io_rvfi_uint5_1_REG <= InstructionDecode.io.raddr[1] @[Tracer.scala 87:14]
    reg io_rvfi_uint5_1_REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_1_REG_1) @[Tracer.scala 89:14]
    io_rvfi_uint5_1_REG_1 <= io_rvfi_uint5_1_REG @[Tracer.scala 89:14]
    reg io_rvfi_uint5_1_REG_2 : UInt, clock with :
      reset => (UInt<1>("h0"), io_rvfi_uint5_1_REG_2) @[Tracer.scala 89:14]
    io_rvfi_uint5_1_REG_2 <= io_rvfi_uint5_1_REG_1 @[Tracer.scala 89:14]
    io.rvfi.uint5[1] <= io_rvfi_uint5_1_REG_2 @[Core.scala 403:36]
    io.rvfi.uint5[2] <= InstructionDecode.io.raddr[2] @[Core.scala 403:36]
    reg REG : UInt, clock with :
      reset => (UInt<1>("h0"), REG) @[Tracer.scala 87:14]
    REG <= Execute.io.rs1_rdata @[Tracer.scala 87:14]
    reg REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_1) @[Tracer.scala 89:14]
    REG_1 <= REG @[Tracer.scala 89:14]
    reg REG_2 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_2) @[Tracer.scala 87:14]
    REG_2 <= ex_reg_wd @[Tracer.scala 87:14]
    node _T_17 = asUInt(npc) @[Core.scala 412:21]
    reg REG_3 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_3) @[Tracer.scala 87:14]
    REG_3 <= _T_17 @[Tracer.scala 87:14]
    reg REG_4 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_4) @[Tracer.scala 89:14]
    REG_4 <= REG_3 @[Tracer.scala 89:14]
    reg REG_5 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_5) @[Tracer.scala 89:14]
    REG_5 <= REG_4 @[Tracer.scala 89:14]
    reg REG_6 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_6) @[Tracer.scala 89:14]
    REG_6 <= REG_5 @[Tracer.scala 89:14]
    reg REG_7 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_7) @[Tracer.scala 87:14]
    REG_7 <= MEM.io.dccmReq.valid @[Tracer.scala 87:14]
    node _T_18 = bits(REG_7, 0, 0) @[Core.scala 414:41]
    reg REG_8 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_8) @[Tracer.scala 87:14]
    REG_8 <= ex_reg_result @[Tracer.scala 87:14]
    node _T_19 = mux(_T_18, REG_8, UInt<1>("h0")) @[Core.scala 413:10]
    reg REG_9 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_9) @[Tracer.scala 87:14]
    REG_9 <= ex_reg_ctl_memRead @[Tracer.scala 87:14]
    node _T_20 = bits(REG_9, 0, 0) @[Core.scala 419:39]
    node _T_21 = mux(_T_20, mem_reg_rd, UInt<1>("h0")) @[Core.scala 418:10]
    reg REG_10 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_10) @[Tracer.scala 87:14]
    REG_10 <= ex_reg_ctl_memWrite @[Tracer.scala 87:14]
    node _T_22 = bits(REG_10, 0, 0) @[Core.scala 424:40]
    reg REG_11 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_11) @[Tracer.scala 87:14]
    REG_11 <= MEM.io.dccmReq.bits.dataRequest @[Tracer.scala 87:14]
    node _T_23 = mux(_T_22, REG_11, UInt<1>("h0")) @[Core.scala 423:10]
    io.rvfi.uint32[0] <= mem_reg_ins @[Core.scala 429:37]
    io.rvfi.uint32[1] <= REG_1 @[Core.scala 429:37]
    io.rvfi.uint32[2] <= REG_2 @[Core.scala 429:37]
    io.rvfi.uint32[3] <= InstructionDecode.io.rd_wdata @[Core.scala 429:37]
    io.rvfi.uint32[4] <= mem_reg_pc @[Core.scala 429:37]
    io.rvfi.uint32[5] <= REG_6 @[Core.scala 429:37]
    io.rvfi.uint32[6] <= _T_19 @[Core.scala 429:37]
    io.rvfi.uint32[7] <= _T_21 @[Core.scala 429:37]
    io.rvfi.uint32[8] <= _T_23 @[Core.scala 429:37]

  extmodule sram_top :
    input clk_i : UInt<1>
    input rst_i : UInt<1>
    input csb_i : UInt<1>
    input we_i : UInt<1>
    input wmask_i : UInt<4>
    input addr_i : UInt<28>
    input wdata_i : UInt<32>
    output rdata_o : UInt<32>
    defname = sram_top
    parameter IFILE_IN = "/home/mhussain/XSoC-Lite/nucleusrv/../out/babykyber.c/dmem.hex"

  module SRamTop :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}}

    reg state_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:38]
    node _state_reg_T = eq(state_reg, UInt<1>("h0")) @[SRamTop.scala 16:18]
    node _state_reg_T_1 = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 16:42]
    node _state_reg_T_2 = and(_state_reg_T_1, io.rsp.ready) @[SRamTop.scala 16:51]
    node _state_reg_T_3 = or(_state_reg_T, _state_reg_T_2) @[SRamTop.scala 16:27]
    node _state_reg_T_4 = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 17:18]
    node _state_reg_T_5 = and(_state_reg_T_4, io.req.valid) @[SRamTop.scala 17:27]
    node _state_reg_T_6 = mux(_state_reg_T_5, UInt<2>("h2"), state_reg) @[Mux.scala 101:16]
    node _state_reg_T_7 = mux(_state_reg_T_3, UInt<1>("h1"), _state_reg_T_6) @[Mux.scala 101:16]
    state_reg <= _state_reg_T_7 @[SRamTop.scala 15:15]
    node _io_rsp_valid_T = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 21:31]
    io.rsp.valid <= _io_rsp_valid_T @[SRamTop.scala 21:18]
    node _io_req_ready_T = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 22:31]
    io.req.ready <= _io_req_ready_T @[SRamTop.scala 22:18]
    wire rdata : UInt<32> @[SRamTop.scala 24:21]
    inst sram of sram_top @[SRamTop.scala 27:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 29:30]
    wire clk : UInt @[SRamTop.scala 29:23]
    clk <= _clk_T @[SRamTop.scala 29:23]
    wire rst : UInt<1> @[SRamTop.scala 30:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 31:18]
    rst <= _rst_T @[SRamTop.scala 31:9]
    sram.clk_i <= clk @[SRamTop.scala 33:19]
    sram.rst_i <= rst @[SRamTop.scala 34:19]
    node _sram_io_csb_i_T = eq(io.req.valid, UInt<1>("h0")) @[SRamTop.scala 35:22]
    sram.csb_i <= _sram_io_csb_i_T @[SRamTop.scala 35:19]
    sram.we_i is invalid @[SRamTop.scala 36:18]
    sram.wmask_i is invalid @[SRamTop.scala 37:21]
    sram.addr_i is invalid @[SRamTop.scala 38:20]
    sram.wdata_i is invalid @[SRamTop.scala 39:21]
    rdata <= sram.rdata_o @[SRamTop.scala 41:11]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 47:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 47:27]
    when _T_1 : @[SRamTop.scala 47:52]
      sram.we_i <= UInt<1>("h1") @[SRamTop.scala 50:26]
      sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 51:28]
      rdata <= sram.rdata_o @[SRamTop.scala 53:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 54:34]
      when _T_2 : @[SRamTop.scala 54:58]
        sram.we_i <= UInt<1>("h0") @[SRamTop.scala 59:26]
        sram.wmask_i <= io.req.bits.activeByteLane @[SRamTop.scala 60:29]
        sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 61:28]
        sram.wdata_i <= io.req.bits.dataRequest @[SRamTop.scala 62:29]
        rdata is invalid @[SRamTop.scala 63:19]
      else :
        rdata is invalid @[SRamTop.scala 66:19]
    io.rsp.bits.dataResponse <= sram.rdata_o @[SRamTop.scala 69:30]
    io.rsp.bits.error <= UInt<1>("h0") @[SRamTop.scala 70:23]

  extmodule sram_top_1 :
    input clk_i : UInt<1>
    input rst_i : UInt<1>
    input csb_i : UInt<1>
    input we_i : UInt<1>
    input wmask_i : UInt<4>
    input addr_i : UInt<28>
    input wdata_i : UInt<32>
    output rdata_o : UInt<32>
    defname = sram_top
    parameter IFILE_IN = "/home/mhussain/XSoC-Lite/nucleusrv/../out/babykyber.c/imem.hex"

  module SRamTop_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>, error : UInt<1>}}}

    reg state_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:38]
    node _state_reg_T = eq(state_reg, UInt<1>("h0")) @[SRamTop.scala 16:18]
    node _state_reg_T_1 = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 16:42]
    node _state_reg_T_2 = and(_state_reg_T_1, io.rsp.ready) @[SRamTop.scala 16:51]
    node _state_reg_T_3 = or(_state_reg_T, _state_reg_T_2) @[SRamTop.scala 16:27]
    node _state_reg_T_4 = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 17:18]
    node _state_reg_T_5 = and(_state_reg_T_4, io.req.valid) @[SRamTop.scala 17:27]
    node _state_reg_T_6 = mux(_state_reg_T_5, UInt<2>("h2"), state_reg) @[Mux.scala 101:16]
    node _state_reg_T_7 = mux(_state_reg_T_3, UInt<1>("h1"), _state_reg_T_6) @[Mux.scala 101:16]
    state_reg <= _state_reg_T_7 @[SRamTop.scala 15:15]
    node _io_rsp_valid_T = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 21:31]
    io.rsp.valid <= _io_rsp_valid_T @[SRamTop.scala 21:18]
    node _io_req_ready_T = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 22:31]
    io.req.ready <= _io_req_ready_T @[SRamTop.scala 22:18]
    wire rdata : UInt<32> @[SRamTop.scala 24:21]
    inst sram of sram_top_1 @[SRamTop.scala 27:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 29:30]
    wire clk : UInt @[SRamTop.scala 29:23]
    clk <= _clk_T @[SRamTop.scala 29:23]
    wire rst : UInt<1> @[SRamTop.scala 30:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 31:18]
    rst <= _rst_T @[SRamTop.scala 31:9]
    sram.clk_i <= clk @[SRamTop.scala 33:19]
    sram.rst_i <= rst @[SRamTop.scala 34:19]
    node _sram_io_csb_i_T = eq(io.req.valid, UInt<1>("h0")) @[SRamTop.scala 35:22]
    sram.csb_i <= _sram_io_csb_i_T @[SRamTop.scala 35:19]
    sram.we_i is invalid @[SRamTop.scala 36:18]
    sram.wmask_i is invalid @[SRamTop.scala 37:21]
    sram.addr_i is invalid @[SRamTop.scala 38:20]
    sram.wdata_i is invalid @[SRamTop.scala 39:21]
    rdata <= sram.rdata_o @[SRamTop.scala 41:11]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 47:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 47:27]
    when _T_1 : @[SRamTop.scala 47:52]
      sram.we_i <= UInt<1>("h1") @[SRamTop.scala 50:26]
      sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 51:28]
      rdata <= sram.rdata_o @[SRamTop.scala 53:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 54:34]
      when _T_2 : @[SRamTop.scala 54:58]
        sram.we_i <= UInt<1>("h0") @[SRamTop.scala 59:26]
        sram.wmask_i <= io.req.bits.activeByteLane @[SRamTop.scala 60:29]
        sram.addr_i <= io.req.bits.addrRequest @[SRamTop.scala 61:28]
        sram.wdata_i <= io.req.bits.dataRequest @[SRamTop.scala 62:29]
        rdata is invalid @[SRamTop.scala 63:19]
      else :
        rdata is invalid @[SRamTop.scala 66:19]
    io.rsp.bits.dataResponse <= sram.rdata_o @[SRamTop.scala 69:30]
    io.rsp.bits.error <= UInt<1>("h0") @[SRamTop.scala 70:23]

  module Tracer :
    output rvfi_i : { flip bool : UInt<1>, flip uint2 : UInt<2>, flip uint4 : UInt<4>, flip uint5 : UInt<5>[3], flip uint32 : UInt<32>[9]}
    output rvfi_o : { valid : UInt<1>[1], insn : UInt<32>[1], mode : UInt<2>[1], rs1_addr : UInt<5>[1], rs2_addr : UInt<5>[1], rs1_rdata : UInt<32>[1], rs2_rdata : UInt<32>[1], rd_addr : UInt<5>[1], rd_wdata : UInt<32>[1], pc_rdata : UInt<32>[1], pc_wdata : UInt<32>[1], mem_addr : UInt<32>[1], mem_wmask : UInt<4>[1], mem_rdata : UInt<32>[1], mem_wdata : UInt<32>[1]}

    rvfi_o.valid[0] <= rvfi_i.bool @[Tracer.scala 55:19]
    rvfi_o.mode[0] <= rvfi_i.uint2 @[Tracer.scala 56:18]
    rvfi_o.mem_wmask[0] <= rvfi_i.uint4 @[Tracer.scala 57:23]
    rvfi_o.rs1_addr[0] <= rvfi_i.uint5[0] @[Tracer.scala 64:18]
    rvfi_o.rs2_addr[0] <= rvfi_i.uint5[1] @[Tracer.scala 64:18]
    rvfi_o.rd_addr[0] <= rvfi_i.uint5[2] @[Tracer.scala 64:18]
    rvfi_o.insn[0] <= rvfi_i.uint32[0] @[Tracer.scala 78:18]
    rvfi_o.rs1_rdata[0] <= rvfi_i.uint32[1] @[Tracer.scala 78:18]
    rvfi_o.rs2_rdata[0] <= rvfi_i.uint32[2] @[Tracer.scala 78:18]
    rvfi_o.rd_wdata[0] <= rvfi_i.uint32[3] @[Tracer.scala 78:18]
    rvfi_o.pc_rdata[0] <= rvfi_i.uint32[4] @[Tracer.scala 78:18]
    rvfi_o.pc_wdata[0] <= rvfi_i.uint32[5] @[Tracer.scala 78:18]
    rvfi_o.mem_addr[0] <= rvfi_i.uint32[6] @[Tracer.scala 78:18]
    rvfi_o.mem_rdata[0] <= rvfi_i.uint32[7] @[Tracer.scala 78:18]
    rvfi_o.mem_wdata[0] <= rvfi_i.uint32[8] @[Tracer.scala 78:18]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { pin : UInt<32>, rvfi : { valid : UInt<1>[1], insn : UInt<32>[1], mode : UInt<2>[1], rs1_addr : UInt<5>[1], rs2_addr : UInt<5>[1], rs1_rdata : UInt<32>[1], rs2_rdata : UInt<32>[1], rd_addr : UInt<5>[1], rd_wdata : UInt<32>[1], pc_rdata : UInt<32>[1], pc_wdata : UInt<32>[1], mem_addr : UInt<32>[1], mem_wmask : UInt<4>[1], mem_rdata : UInt<32>[1], mem_wdata : UInt<32>[1]}}

    inst babyKyberHarness of BabyKyberHarness @[Top.scala 24:31]
    babyKyberHarness.clock <= clock
    babyKyberHarness.reset <= reset
    inst core of Core @[Top.scala 26:26]
    core.clock <= clock
    core.reset <= reset
    core.io.stall <= UInt<1>("h0") @[Top.scala 27:17]
    babyKyberHarness.io.enable <= UInt<1>("h1") @[Top.scala 31:30]
    babyKyberHarness.io.key_enable <= core.io.key_enable_trigger @[Top.scala 32:34]
    babyKyberHarness.io.encryption_enable <= core.io.encryption_enable_trigger @[Top.scala 33:41]
    babyKyberHarness.io.decryption_enable <= core.io.decryption_enable_trigger @[Top.scala 34:41]
    core.io.baby_kyber.rsp.bits.error <= UInt<1>("h0") @[Top.scala 43:27]
    babyKyberHarness.io.req <= core.io.baby_kyber.req @[Top.scala 44:31]
    core.io.baby_kyber.rsp <= babyKyberHarness.io.rsp @[Top.scala 45:16]
    core.io.baby_kyber.cio_babykyber_intr_key <= babyKyberHarness.io.cio_babykyber_intr_key @[Top.scala 47:35]
    core.io.baby_kyber.cio_babykyber_intr_encrypt <= babyKyberHarness.io.cio_babykyber_intr_encrypt @[Top.scala 48:39]
    core.io.baby_kyber.cio_babykyber_intr_decrypt <= babyKyberHarness.io.cio_babykyber_intr_decrypt @[Top.scala 49:39]
    inst dmem of SRamTop @[Top.scala 56:20]
    dmem.clock <= clock
    dmem.reset <= reset
    inst imem of SRamTop_1 @[Top.scala 57:20]
    imem.clock <= clock
    imem.reset <= reset
    core.io.imemRsp <= imem.io.rsp @[Top.scala 60:19]
    imem.io.req <= core.io.imemReq @[Top.scala 61:15]
    core.io.dmemRsp <= dmem.io.rsp @[Top.scala 65:19]
    dmem.io.req <= core.io.dmemReq @[Top.scala 66:15]
    io.pin <= core.io.pin @[Top.scala 68:10]
    inst tracer of Tracer @[Top.scala 71:24]
    tracer.rvfi_i.uint32 <= core.io.rvfi.uint32 @[Top.scala 72:19]
    tracer.rvfi_i.uint5 <= core.io.rvfi.uint5 @[Top.scala 72:19]
    tracer.rvfi_i.uint4 <= core.io.rvfi.uint4 @[Top.scala 72:19]
    tracer.rvfi_i.uint2 <= core.io.rvfi.uint2 @[Top.scala 72:19]
    tracer.rvfi_i.bool <= core.io.rvfi.bool @[Top.scala 72:19]
    io.rvfi <= tracer.rvfi_o @[Top.scala 73:13]

